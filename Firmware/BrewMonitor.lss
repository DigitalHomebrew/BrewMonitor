
BrewMonitor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00002852  000028e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002852  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005c  00800110  00800110  000028f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000028f6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000880  00000000  00000000  00002926  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000bf02  00000000  00000000  000031a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000325a  00000000  00000000  0000f0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000f0e5  00000000  00000000  00012302  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001668  00000000  00000000  000213e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0001aa65  00000000  00000000  00022a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000082d4  00000000  00000000  0003d4b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000900  00000000  00000000  00045789  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000ab02  00000000  00000000  00046089  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
       0:	f8 c0       	rjmp	.+496    	; 0x1f2 <__ctors_end>
       2:	00 00       	nop
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
       4:	12 c1       	rjmp	.+548    	; 0x22a <__bad_interrupt>
       6:	00 00       	nop
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
       8:	10 c1       	rjmp	.+544    	; 0x22a <__bad_interrupt>
       a:	00 00       	nop
       c:	0e c1       	rjmp	.+540    	; 0x22a <__bad_interrupt>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
       e:	00 00       	nop
      10:	0c c1       	rjmp	.+536    	; 0x22a <__bad_interrupt>
      12:	00 00       	nop
      14:	0a c1       	rjmp	.+532    	; 0x22a <__bad_interrupt>
      16:	00 00       	nop
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
      18:	08 c1       	rjmp	.+528    	; 0x22a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	06 c1       	rjmp	.+524    	; 0x22a <__bad_interrupt>
      1e:	00 00       	nop
      20:	04 c1       	rjmp	.+520    	; 0x22a <__bad_interrupt>
	while (UDCON & (1 << RMWKUP));
      22:	00 00       	nop
      24:	96 c1       	rjmp	.+812    	; 0x352 <__vector_9>
      26:	00 00       	nop
      28:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <__vector_10>
	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
      2c:	fe c0       	rjmp	.+508    	; 0x22a <__bad_interrupt>
      2e:	00 00       	nop
      30:	fc c0       	rjmp	.+504    	; 0x22a <__bad_interrupt>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
      32:	00 00       	nop
      34:	fa c0       	rjmp	.+500    	; 0x22a <__bad_interrupt>
      36:	00 00       	nop
      38:	f8 c0       	rjmp	.+496    	; 0x22a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f6 c0       	rjmp	.+492    	; 0x22a <__bad_interrupt>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
      3e:	00 00       	nop
      40:	f4 c0       	rjmp	.+488    	; 0x22a <__bad_interrupt>
			{
				*CurrConfigLoc = PrevDescLoc;
      42:	00 00       	nop
      44:	f6 c2       	rjmp	.+1516   	; 0x632 <__vector_17>
				*BytesRem      = PrevBytesRem;
      46:	00 00       	nop
      48:	af c4       	rjmp	.+2398   	; 0x9a8 <__vector_18>
      4a:	00 00       	nop
      4c:	47 c5       	rjmp	.+2702   	; 0xadc <__vector_19>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
      4e:	00 00       	nop
}
      50:	ec c0       	rjmp	.+472    	; 0x22a <__bad_interrupt>
      52:	00 00       	nop
      54:	d0 c2       	rjmp	.+1440   	; 0x5f6 <__vector_21>
      56:	00 00       	nop
      58:	b3 c1       	rjmp	.+870    	; 0x3c0 <__vector_22>
      5a:	00 00       	nop
      5c:	e6 c0       	rjmp	.+460    	; 0x22a <__bad_interrupt>
      5e:	00 00       	nop
      60:	e4 c0       	rjmp	.+456    	; 0x22a <__bad_interrupt>
      62:	00 00       	nop
      64:	e2 c0       	rjmp	.+452    	; 0x22a <__bad_interrupt>
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      66:	00 00       	nop
      68:	e0 c0       	rjmp	.+448    	; 0x22a <__bad_interrupt>
      6a:	00 00       	nop

	ParserData->TotalDeviceReports = 1;
      6c:	de c0       	rjmp	.+444    	; 0x22a <__bad_interrupt>
      6e:	00 00       	nop
      70:	dc c0       	rjmp	.+440    	; 0x22a <__bad_interrupt>
      72:	00 00       	nop
      74:	da c0       	rjmp	.+436    	; 0x22a <__bad_interrupt>
      76:	00 00       	nop
      78:	d8 c0       	rjmp	.+432    	; 0x22a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d6 c0       	rjmp	.+428    	; 0x22a <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
      7e:	00 00       	nop
      80:	d4 c0       	rjmp	.+424    	; 0x22a <__bad_interrupt>
      82:	00 00       	nop
      84:	d2 c0       	rjmp	.+420    	; 0x22a <__bad_interrupt>
      86:	00 00       	nop
      88:	d0 c0       	rjmp	.+416    	; 0x22a <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
      8a:	00 00       	nop
      8c:	ce c0       	rjmp	.+412    	; 0x22a <__bad_interrupt>
      8e:	00 00       	nop
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
      90:	cc c0       	rjmp	.+408    	; 0x22a <__bad_interrupt>
      92:	00 00       	nop
      94:	ca c0       	rjmp	.+404    	; 0x22a <__bad_interrupt>
      96:	00 00       	nop
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
      98:	c8 c0       	rjmp	.+400    	; 0x22a <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      9a:	00 00       	nop
      9c:	c6 c0       	rjmp	.+396    	; 0x22a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c4 c0       	rjmp	.+392    	; 0x22a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c2 c0       	rjmp	.+388    	; 0x22a <__bad_interrupt>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      a6:	00 00       	nop
      a8:	c0 c0       	rjmp	.+384    	; 0x22a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	03 06       	cpc	r0, r19
      ae:	ff 05       	cpc	r31, r15
      b0:	56 06       	cpc	r5, r22
      b2:	1c 06       	cpc	r1, r28
      b4:	f8 05       	cpc	r31, r8
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      b6:	fc 05       	cpc	r31, r12
      b8:	a3 06       	cpc	r10, r19
      ba:	73 06       	cpc	r7, r19
      bc:	87 06       	cpc	r8, r23
      be:	60 0d       	add	r22, r0
      c0:	82 0d       	add	r24, r2
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      c2:	68 0e       	add	r6, r24
      c4:	82 0d       	add	r24, r2
      c6:	68 0e       	add	r6, r24
      c8:	c4 0d       	add	r28, r4
      ca:	e7 0d       	add	r30, r7
      cc:	68 0e       	add	r6, r24
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      ce:	39 0e       	add	r3, r25
      d0:	4b 0e       	add	r4, r27
      d2:	07 63       	ori	r16, 0x37	; 55
      d4:	42 36       	cpi	r20, 0x62	; 98
	{
		uint8_t  HIDReportItem  = *ReportData;
      d6:	b7 9b       	sbis	0x16, 7	; 22
      d8:	d8 a7       	std	Y+40, r29	; 0x28
      da:	1a 39       	cpi	r17, 0x9A	; 154
      dc:	68 56       	subi	r22, 0x68	; 104
      de:	18 ae       	std	Y+56, r1	; 0x38
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e0:	ba ab       	std	Y+50, r27	; 0x32
      e2:	55 8c       	ldd	r5, Z+29	; 0x1d
      e4:	1d 3c       	cpi	r17, 0xCD	; 205
      e6:	b7 cc       	rjmp	.-1682   	; 0xfffffa56 <__eeprom_end+0xff7efa56>
      e8:	57 63       	ori	r21, 0x37	; 55
      ea:	bd 6d       	ori	r27, 0xDD	; 221
      ec:	ed fd       	.word	0xfded	; ????
      ee:	75 3e       	cpi	r23, 0xE5	; 229
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;

		ReportData++;
      f0:	f6 17       	cp	r31, r22
      f2:	72 31       	cpi	r23, 0x12	; 18
      f4:	bf 00       	.word	0x00bf	; ????
		ReportSize--;
      f6:	00 00       	nop
      f8:	80 3f       	cpi	r24, 0xF0	; 240
	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;
      fa:	08 00       	.word	0x0008	; ????
      fc:	00 00       	nop
      fe:	be 92       	st	-X, r11
     100:	24 49       	sbci	r18, 0x94	; 148
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     102:	12 3e       	cpi	r17, 0xE2	; 226
     104:	ab aa       	std	Y+51, r10	; 0x33
     106:	aa 2a       	or	r10, r26
     108:	be cd       	rjmp	.-1156   	; 0xfffffc86 <__eeprom_end+0xff7efc86>
     10a:	cc cc       	rjmp	.-1640   	; 0xfffffaa4 <__eeprom_end+0xff7efaa4>
     10c:	4c 3e       	cpi	r20, 0xEC	; 236
     10e:	00 00       	nop
     110:	00 80       	ld	r0, Z
     112:	be ab       	std	Y+54, r27	; 0x36
     114:	aa aa       	std	Y+50, r10	; 0x32
     116:	aa 3e       	cpi	r26, 0xEA	; 234
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	bf 00       	.word	0x00bf	; ????
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     11e:	00 00       	nop
     120:	80 3f       	cpi	r24, 0xF0	; 240
     122:	00 00       	nop
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     124:	00 00       	nop
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     126:	00 08       	sbc	r0, r0
     128:	41 78       	andi	r20, 0x81	; 129
     12a:	d3 bb       	out	0x13, r29	; 19
     12c:	43 87       	std	Z+11, r20	; 0x0b
     12e:	d1 13       	cpse	r29, r17
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     130:	3d 19       	sub	r19, r13
     132:	0e 3c       	cpi	r16, 0xCE	; 206
     134:	c3 bd       	out	0x23, r28	; 35
     136:	42 82       	std	Z+2, r4	; 0x02
     138:	ad 2b       	or	r26, r29
     13a:	3e 68       	ori	r19, 0x8E	; 142
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     13c:	ec 82       	std	Y+4, r14	; 0x04
     13e:	76 be       	out	0x36, r7	; 54
				ReportData     += 4;
     140:	d9 8f       	std	Y+25, r29	; 0x19
     142:	e1 a9       	ldd	r30, Z+49	; 0x31
     144:	3e 4c       	sbci	r19, 0xCE	; 206
				break;
     146:	80 ef       	ldi	r24, 0xF0	; 240
			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     148:	ff be       	out	0x3f, r15	; 63
     14a:	01 c4       	rjmp	.+2050   	; 0x94e <main+0x40>
     14c:	ff 7f       	andi	r31, 0xFF	; 255
     14e:	3f 00       	.word	0x003f	; ????
     150:	00 00       	nop
     152:	00 00       	nop

00000154 <ProductString>:
     154:	20 03 42 00 72 00 65 00 77 00 4d 00 6f 00 6e 00      .B.r.e.w.M.o.n.
				ReportSize     -= 2;
				ReportData     += 2;
				break;
     164:	69 00 74 00 6f 00 72 00 20 00 55 00 53 00 42 00     i.t.o.r. .U.S.B.
			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
				ReportSize     -= 1;
     174:	00 00                                               ..

00000176 <ManufacturerString>:
				ReportData     += 1;
     176:	22 03 44 00 69 00 67 00 69 00 74 00 61 00 6c 00     ".D.i.g.i.t.a.l.
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     186:	20 00 48 00 6f 00 6d 00 65 00 62 00 72 00 65 00      .H.o.m.e.b.r.e.
     196:	77 00 00 00                                         w...

0000019a <LanguageString>:
     19a:	04 03 09 04                                         ....

0000019e <ConfigurationDescriptor>:
     19e:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
     1ae:	00 00 09 21 11 01 00 01 22 20 00 07 05 81 03 08     ...!...." ......
     1be:	00 05                                               ..

000001c0 <DeviceDescriptor>:
     1c0:	12 01 10 01 00 00 00 08 d0 16 aa 07 00 00 01 02     ................
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d0:	00 01                                               ..

000001d2 <GenericReport>:
     1d2:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
				break;
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e2:	08 81 02 09 03 15 00 25 ff 75 08 95 08 91 02 c0     .......%.u......

000001f2 <__ctors_end>:
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1f2:	11 24       	eor	r1, r1
     1f4:	1f be       	out	0x3f, r1	; 63
     1f6:	cf ef       	ldi	r28, 0xFF	; 255
     1f8:	da e0       	ldi	r29, 0x0A	; 10
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     1fa:	de bf       	out	0x3e, r29	; 62
     1fc:	cd bf       	out	0x3d, r28	; 61

000001fe <__do_copy_data>:
				break;
     1fe:	11 e0       	ldi	r17, 0x01	; 1
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     200:	a0 e0       	ldi	r26, 0x00	; 0
     202:	b1 e0       	ldi	r27, 0x01	; 1
     204:	e2 e5       	ldi	r30, 0x52	; 82
     206:	f8 e2       	ldi	r31, 0x28	; 40
     208:	02 c0       	rjmp	.+4      	; 0x20e <__do_copy_data+0x10>
     20a:	05 90       	lpm	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	a0 31       	cpi	r26, 0x10	; 16
     210:	b1 07       	cpc	r27, r17
     212:	d9 f7       	brne	.-10     	; 0x20a <__do_copy_data+0xc>

00000214 <__do_clear_bss>:
     214:	21 e0       	ldi	r18, 0x01	; 1
     216:	a0 e1       	ldi	r26, 0x10	; 16
     218:	b1 e0       	ldi	r27, 0x01	; 1
     21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
     21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
     21e:	ac 36       	cpi	r26, 0x6C	; 108
     220:	b2 07       	cpc	r27, r18
     222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
     224:	74 d3       	rcall	.+1768   	; 0x90e <main>
     226:	0c 94 27 14 	jmp	0x284e	; 0x284e <_exit>

0000022a <__bad_interrupt>:
     22a:	ea ce       	rjmp	.-556    	; 0x0 <__vectors>

0000022c <WaitForButtonRelease>:
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	ef e3       	ldi	r30, 0x3F	; 63
     230:	fc e9       	ldi	r31, 0x9C	; 156
     232:	31 97       	sbiw	r30, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <WaitForButtonRelease+0x6>
     236:	00 c0       	rjmp	.+0      	; 0x238 <WaitForButtonRelease+0xc>
     238:	00 00       	nop
     23a:	1f 9b       	sbis	0x03, 7	; 3
     23c:	03 c0       	rjmp	.+6      	; 0x244 <WaitForButtonRelease+0x18>
     23e:	84 31       	cpi	r24, 0x14	; 20
     240:	11 f4       	brne	.+4      	; 0x246 <WaitForButtonRelease+0x1a>
     242:	03 c0       	rjmp	.+6      	; 0x24a <WaitForButtonRelease+0x1e>
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	8f 5f       	subi	r24, 0xFF	; 255
     248:	f2 cf       	rjmp	.-28     	; 0x22e <WaitForButtonRelease+0x2>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     24a:	8f e3       	ldi	r24, 0x3F	; 63
     24c:	9c e9       	ldi	r25, 0x9C	; 156
     24e:	01 97       	sbiw	r24, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <WaitForButtonRelease+0x22>
     252:	00 c0       	rjmp	.+0      	; 0x254 <WaitForButtonRelease+0x28>
     254:	00 00       	nop
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     256:	08 95       	ret

00000258 <SetupHardware>:
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	80 e8       	ldi	r24, 0x80	; 128
     25c:	0f b6       	in	r0, 0x3f	; 63
     25e:	f8 94       	cli
     260:	80 93 61 00 	sts	0x0061, r24
     264:	90 93 61 00 	sts	0x0061, r25
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     268:	0f be       	out	0x3f, r0	; 63
				break;
     26a:	85 bf       	out	0x35, r24	; 53
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     26c:	85 bf       	out	0x35, r24	; 53
     26e:	84 b7       	in	r24, 0x34	; 52
     270:	87 7f       	andi	r24, 0xF7	; 247
     272:	84 bf       	out	0x34, r24	; 52
     274:	88 e1       	ldi	r24, 0x18	; 24
     276:	0f b6       	in	r0, 0x3f	; 63
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     278:	f8 94       	cli
     27a:	80 93 60 00 	sts	0x0060, r24
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     27e:	10 92 60 00 	sts	0x0060, r1
     282:	0f be       	out	0x3f, r0	; 63
     284:	25 9a       	sbi	0x04, 5	; 4
     286:	24 9a       	sbi	0x04, 4	; 4
				break;
     288:	85 9a       	sbi	0x10, 5	; 16
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     28a:	84 9a       	sbi	0x10, 4	; 16
     28c:	80 9a       	sbi	0x10, 0	; 16
     28e:	27 98       	cbi	0x04, 7	; 4
     290:	81 98       	cbi	0x10, 1	; 16
     292:	54 9a       	sbi	0x0a, 4	; 10
     294:	50 9a       	sbi	0x0a, 0	; 10
     296:	51 9a       	sbi	0x0a, 1	; 10
				break;
     298:	8d 9a       	sbi	0x11, 5	; 17
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     29a:	8f 9a       	sbi	0x11, 7	; 17
     29c:	88 9a       	sbi	0x11, 0	; 17
     29e:	8c 9a       	sbi	0x11, 4	; 17
     2a0:	2f ef       	ldi	r18, 0xFF	; 255
     2a2:	87 e8       	ldi	r24, 0x87	; 135
				break;
     2a4:	93 e1       	ldi	r25, 0x13	; 19
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2a6:	21 50       	subi	r18, 0x01	; 1
     2a8:	80 40       	sbci	r24, 0x00	; 0
     2aa:	90 40       	sbci	r25, 0x00	; 0
     2ac:	e1 f7       	brne	.-8      	; 0x2a6 <SetupHardware+0x4e>
     2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <SetupHardware+0x58>
     2b0:	00 00       	nop
     2b2:	26 e0       	ldi	r18, 0x06	; 6
				break;
     2b4:	40 e3       	ldi	r20, 0x30	; 48
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2b6:	50 e0       	ldi	r21, 0x00	; 0
     2b8:	61 e3       	ldi	r22, 0x31	; 49
     2ba:	70 e0       	ldi	r23, 0x00	; 0
     2bc:	8f e2       	ldi	r24, 0x2F	; 47
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	35 d6       	rcall	.+3178   	; 0xf2c <ow_set_bus>
     2c2:	9a d7       	rcall	.+3892   	; 0x11f8 <LC32_Init>
				break;
     2c4:	ea e7       	ldi	r30, 0x7A	; 122
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	80 81       	ld	r24, Z
     2ca:	84 60       	ori	r24, 0x04	; 4
				break;
     2cc:	80 83       	st	Z, r24
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2ce:	80 81       	ld	r24, Z
     2d0:	82 60       	ori	r24, 0x02	; 2
     2d2:	80 83       	st	Z, r24

				if (ParserData->UsingReportIDs)
     2d4:	80 81       	ld	r24, Z
     2d6:	81 60       	ori	r24, 0x01	; 1
     2d8:	80 83       	st	Z, r24
     2da:	ac e7       	ldi	r26, 0x7C	; 124
     2dc:	b0 e0       	ldi	r27, 0x00	; 0
     2de:	8c 91       	ld	r24, X
     2e0:	80 64       	ori	r24, 0x40	; 64
     2e2:	8c 93       	st	X, r24
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2e4:	8c 91       	ld	r24, X
     2e6:	80 62       	ori	r24, 0x20	; 32
     2e8:	8c 93       	st	X, r24
     2ea:	8c 91       	ld	r24, X
     2ec:	81 60       	ori	r24, 0x01	; 1
     2ee:	8c 93       	st	X, r24
     2f0:	80 81       	ld	r24, Z
     2f2:	80 68       	ori	r24, 0x80	; 128
     2f4:	80 83       	st	Z, r24
     2f6:	80 81       	ld	r24, Z
     2f8:	80 64       	ori	r24, 0x40	; 64
     2fa:	80 83       	st	Z, r24
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     2fc:	08 95       	ret

000002fe <SetupTimerInterrupts>:
     2fe:	85 b5       	in	r24, 0x25	; 37
     300:	81 60       	ori	r24, 0x01	; 1
     302:	85 bd       	out	0x25, r24	; 37
     304:	85 b5       	in	r24, 0x25	; 37
     306:	84 60       	ori	r24, 0x04	; 4
     308:	85 bd       	out	0x25, r24	; 37
     30a:	e1 e8       	ldi	r30, 0x81	; 129
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	80 81       	ld	r24, Z
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     310:	81 60       	ori	r24, 0x01	; 1
     312:	80 83       	st	Z, r24
     314:	80 81       	ld	r24, Z
     316:	84 60       	ori	r24, 0x04	; 4
     318:	80 83       	st	Z, r24
     31a:	ef e6       	ldi	r30, 0x6F	; 111
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	80 81       	ld	r24, Z
     320:	82 60       	ori	r24, 0x02	; 2
     322:	80 83       	st	Z, r24
     324:	80 81       	ld	r24, Z
     326:	84 60       	ori	r24, 0x04	; 4
     328:	80 83       	st	Z, r24
     32a:	e8 e6       	ldi	r30, 0x68	; 104
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	80 81       	ld	r24, Z
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     330:	81 60       	ori	r24, 0x01	; 1
     332:	80 83       	st	Z, r24
     334:	eb e6       	ldi	r30, 0x6B	; 107
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	80 81       	ld	r24, Z
     33a:	80 68       	ori	r24, 0x80	; 128
     33c:	80 83       	st	Z, r24
     33e:	ee e6       	ldi	r30, 0x6E	; 110
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	80 81       	ld	r24, Z
     344:	84 60       	ori	r24, 0x04	; 4
     346:	80 83       	st	Z, r24
     348:	78 94       	sei
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	80 93 37 01 	sts	0x0137, r24
     350:	08 95       	ret

00000352 <__vector_9>:
     352:	1f 92       	push	r1
     354:	0f 92       	push	r0
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	0f 92       	push	r0
     35a:	11 24       	eor	r1, r1
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     35c:	2f 93       	push	r18
     35e:	8f 93       	push	r24
     360:	9f 93       	push	r25
     362:	1f 99       	sbic	0x03, 7	; 3
					}
				}

				ParserData->UsingReportIDs = true;
     364:	05 c0       	rjmp	.+10     	; 0x370 <__vector_9+0x1e>
     366:	10 92 55 01 	sts	0x0155, r1
     36a:	10 92 54 01 	sts	0x0154, r1
     36e:	20 c0       	rjmp	.+64     	; 0x3b0 <__vector_9+0x5e>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     370:	80 91 54 01 	lds	r24, 0x0154
     374:	90 91 55 01 	lds	r25, 0x0155
     378:	83 32       	cpi	r24, 0x23	; 35
     37a:	21 e0       	ldi	r18, 0x01	; 1
     37c:	92 07       	cpc	r25, r18
     37e:	20 f0       	brcs	.+8      	; 0x388 <__vector_9+0x36>
				break;
     380:	81 e0       	ldi	r24, 0x01	; 1
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     382:	80 93 19 01 	sts	0x0119, r24
     386:	0d c0       	rjmp	.+26     	; 0x3a2 <__vector_9+0x50>
     388:	89 2b       	or	r24, r25
     38a:	91 f0       	breq	.+36     	; 0x3b0 <__vector_9+0x5e>
     38c:	80 91 3a 01 	lds	r24, 0x013A
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     390:	88 23       	and	r24, r24
     392:	21 f0       	breq	.+8      	; 0x39c <__vector_9+0x4a>
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	80 93 3d 01 	sts	0x013D, r24
     39a:	03 c0       	rjmp	.+6      	; 0x3a2 <__vector_9+0x50>
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	80 93 27 01 	sts	0x0127, r24
     3a2:	80 91 68 00 	lds	r24, 0x0068
     3a6:	8e 7f       	andi	r24, 0xFE	; 254
				break;
     3a8:	80 93 68 00 	sts	0x0068, r24
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3ac:	10 92 2a 01 	sts	0x012A, r1
     3b0:	9f 91       	pop	r25
     3b2:	8f 91       	pop	r24
     3b4:	2f 91       	pop	r18
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3b6:	0f 90       	pop	r0
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	0f 90       	pop	r0
     3bc:	1f 90       	pop	r1
     3be:	18 95       	reti

000003c0 <__vector_22>:
     3c0:	1f 92       	push	r1
     3c2:	0f 92       	push	r0
     3c4:	0f b6       	in	r0, 0x3f	; 63
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3c6:	0f 92       	push	r0
     3c8:	11 24       	eor	r1, r1
     3ca:	2f 93       	push	r18

					while (CurrCollectionPath->Parent != NULL)
     3cc:	8f 93       	push	r24
     3ce:	9f 93       	push	r25
     3d0:	1f 99       	sbic	0x03, 7	; 3
     3d2:	0a c0       	rjmp	.+20     	; 0x3e8 <__vector_22+0x28>
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3d4:	80 91 54 01 	lds	r24, 0x0154
     3d8:	90 91 55 01 	lds	r25, 0x0155
     3dc:	01 96       	adiw	r24, 0x01	; 1
     3de:	90 93 55 01 	sts	0x0155, r25
     3e2:	80 93 54 01 	sts	0x0154, r24
     3e6:	04 c0       	rjmp	.+8      	; 0x3f0 <__vector_22+0x30>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3e8:	10 92 55 01 	sts	0x0155, r1
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3ec:	10 92 54 01 	sts	0x0154, r1
     3f0:	80 91 2a 01 	lds	r24, 0x012A
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	98 0f       	add	r25, r24
     3f8:	90 93 2a 01 	sts	0x012A, r25
     3fc:	83 30       	cpi	r24, 0x03	; 3
     3fe:	29 f4       	brne	.+10     	; 0x40a <__vector_22+0x4a>
				}

				CurrCollectionPath->Type       = ReportItemData;
     400:	80 91 68 00 	lds	r24, 0x0068
     404:	81 60       	ori	r24, 0x01	; 1
     406:	80 93 68 00 	sts	0x0068, r24
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     40a:	80 91 54 01 	lds	r24, 0x0154
     40e:	90 91 55 01 	lds	r25, 0x0155
     412:	83 32       	cpi	r24, 0x23	; 35
     414:	91 40       	sbci	r25, 0x01	; 1
     416:	20 f0       	brcs	.+8      	; 0x420 <__vector_22+0x60>

				if (UsageListSize)
     418:	85 b1       	in	r24, 0x05	; 5
     41a:	90 e2       	ldi	r25, 0x20	; 32
     41c:	89 27       	eor	r24, r25
     41e:	85 b9       	out	0x05, r24	; 5
     420:	9f 91       	pop	r25
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     422:	8f 91       	pop	r24
     424:	2f 91       	pop	r18
     426:	0f 90       	pop	r0
     428:	0f be       	out	0x3f, r0	; 63
     42a:	0f 90       	pop	r0
     42c:	1f 90       	pop	r1
     42e:	18 95       	reti

00000430 <StartRecording>:
     430:	cf 93       	push	r28
     432:	c8 2f       	mov	r28, r24
     434:	10 92 27 01 	sts	0x0127, r1

					for (uint8_t i = 0; i < UsageListSize; i++)
     438:	10 92 3f 01 	sts	0x013F, r1
					  UsageList[i] = UsageList[i + 1];
     43c:	61 e0       	ldi	r22, 0x01	; 1
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     442:	0e 94 15 14 	call	0x282a	; 0x282a <__eeupd_byte_m32u4>
     446:	80 91 25 01 	lds	r24, 0x0125
     44a:	90 91 26 01 	lds	r25, 0x0126
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     44e:	c1 11       	cpse	r28, r1
     450:	02 c0       	rjmp	.+4      	; 0x456 <StartRecording+0x26>
     452:	00 97       	sbiw	r24, 0x00	; 0
     454:	71 f4       	brne	.+28     	; 0x472 <StartRecording+0x42>
     456:	40 e0       	ldi	r20, 0x00	; 0
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     458:	50 e0       	ldi	r21, 0x00	; 0
     45a:	6f ef       	ldi	r22, 0xFF	; 255
     45c:	7f ef       	ldi	r23, 0xFF	; 255
     45e:	ed d6       	rcall	.+3546   	; 0x123a <LC32_WriteSample>
     460:	80 91 25 01 	lds	r24, 0x0125
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     464:	90 91 26 01 	lds	r25, 0x0126
     468:	04 96       	adiw	r24, 0x04	; 4
     46a:	90 93 26 01 	sts	0x0126, r25
     46e:	80 93 25 01 	sts	0x0125, r24
     472:	21 e0       	ldi	r18, 0x01	; 1
     474:	20 93 41 01 	sts	0x0141, r18
     478:	20 93 57 01 	sts	0x0157, r18
     47c:	80 91 84 00 	lds	r24, 0x0084
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     480:	90 91 85 00 	lds	r25, 0x0085
     484:	87 5f       	subi	r24, 0xF7	; 247
     486:	92 4c       	sbci	r25, 0xC2	; 194
     488:	90 93 89 00 	sts	0x0089, r25
     48c:	80 93 88 00 	sts	0x0088, r24
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     490:	20 93 3a 01 	sts	0x013A, r18
     494:	10 92 20 01 	sts	0x0120, r1
     498:	10 92 1f 01 	sts	0x011F, r1
     49c:	10 92 2e 01 	sts	0x012E, r1
     4a0:	10 92 2d 01 	sts	0x012D, r1
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4a4:	cf 91       	pop	r28
     4a6:	08 95       	ret

000004a8 <StopRecording>:
     4a8:	10 92 3d 01 	sts	0x013D, r1
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 15 14 	call	0x282a	; 0x282a <__eeupd_byte_m32u4>
     4b6:	10 92 3a 01 	sts	0x013A, r1
     4ba:	2d 98       	cbi	0x05, 5	; 5
     4bc:	08 95       	ret

000004be <ClearExternalMemory>:
     4be:	10 92 19 01 	sts	0x0119, r1
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4c2:	f2 df       	rcall	.-28     	; 0x4a8 <StopRecording>
     4c4:	2d 9a       	sbi	0x05, 5	; 5
     4c6:	99 d6       	rcall	.+3378   	; 0x11fa <LC32_Clear>
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	86 e0       	ldi	r24, 0x06	; 6
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 15 14 	call	0x282a	; 0x282a <__eeupd_byte_m32u4>
     4d2:	10 92 21 01 	sts	0x0121, r1
     4d6:	10 92 26 01 	sts	0x0126, r1
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4da:	10 92 25 01 	sts	0x0125, r1
     4de:	10 92 2e 01 	sts	0x012E, r1
     4e2:	10 92 2d 01 	sts	0x012D, r1
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4e6:	2d 98       	cbi	0x05, 5	; 5
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	80 93 36 01 	sts	0x0136, r24
     4ee:	08 95       	ret

000004f0 <GetNextEmptyAddress>:
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	c0 e0       	ldi	r28, 0x00	; 0
     4f6:	d0 e0       	ldi	r29, 0x00	; 0
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     4f8:	ce 01       	movw	r24, r28
     4fa:	c9 d6       	rcall	.+3474   	; 0x128e <LC32_ReadSample>
					NewReportItem.CollectionPath = CurrCollectionPath;
     4fc:	6f 3f       	cpi	r22, 0xFF	; 255
     4fe:	7f 4f       	sbci	r23, 0xFF	; 255
     500:	11 f4       	brne	.+4      	; 0x506 <GetNextEmptyAddress+0x16>
     502:	01 96       	adiw	r24, 0x01	; 1
     504:	39 f0       	breq	.+14     	; 0x514 <GetNextEmptyAddress+0x24>
     506:	24 96       	adiw	r28, 0x04	; 4
     508:	c1 15       	cp	r28, r1
     50a:	80 e1       	ldi	r24, 0x10	; 16
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     50c:	d8 07       	cpc	r29, r24
     50e:	a1 f7       	brne	.-24     	; 0x4f8 <GetNextEmptyAddress+0x8>
     510:	c0 e0       	ldi	r28, 0x00	; 0
     512:	d0 e0       	ldi	r29, 0x00	; 0

					if (UsageListSize)
     514:	ce 01       	movw	r24, r28
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	08 95       	ret

0000051c <LoadSettings>:
     51c:	0f 93       	push	r16
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	1f 92       	push	r1
     526:	cd b7       	in	r28, 0x3d	; 61
     528:	de b7       	in	r29, 0x3e	; 62
     52a:	86 e0       	ldi	r24, 0x06	; 6
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	0e 94 0d 14 	call	0x281a	; 0x281a <__eerd_byte_m32u4>
     532:	8f 3f       	cpi	r24, 0xFF	; 255

						for (uint8_t i = 0; i < UsageListSize; i++)
     534:	f1 f4       	brne	.+60     	; 0x572 <LoadSettings+0x56>
						  UsageList[i] = UsageList[i + 1];
     536:	60 e0       	ldi	r22, 0x00	; 0
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	0e 94 15 14 	call	0x282a	; 0x282a <__eeupd_byte_m32u4>

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     540:	60 e0       	ldi	r22, 0x00	; 0
     542:	86 e0       	ldi	r24, 0x06	; 6
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	0e 94 15 14 	call	0x282a	; 0x282a <__eeupd_byte_m32u4>
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     54a:	64 e1       	ldi	r22, 0x14	; 20
     54c:	88 e0       	ldi	r24, 0x08	; 8
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	0e 94 15 14 	call	0x282a	; 0x282a <__eeupd_byte_m32u4>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     554:	62 e3       	ldi	r22, 0x32	; 50
     556:	8a e0       	ldi	r24, 0x0A	; 10
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 15 14 	call	0x282a	; 0x282a <__eeupd_byte_m32u4>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	8c e0       	ldi	r24, 0x0C	; 12
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 15 14 	call	0x282a	; 0x282a <__eeupd_byte_m32u4>
     568:	60 e2       	ldi	r22, 0x20	; 32
     56a:	8e e0       	ldi	r24, 0x0E	; 14
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0e 94 15 14 	call	0x282a	; 0x282a <__eeupd_byte_m32u4>
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     572:	be df       	rcall	.-132    	; 0x4f0 <GetNextEmptyAddress>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     574:	90 93 26 01 	sts	0x0126, r25
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     578:	80 93 25 01 	sts	0x0125, r24
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     57c:	86 e0       	ldi	r24, 0x06	; 6
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	0e 94 0d 14 	call	0x281a	; 0x281a <__eerd_byte_m32u4>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     584:	80 93 21 01 	sts	0x0121, r24

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     588:	88 e0       	ldi	r24, 0x08	; 8
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 0d 14 	call	0x281a	; 0x281a <__eerd_byte_m32u4>
     590:	80 93 43 01 	sts	0x0143, r24
     594:	8a e0       	ldi	r24, 0x0A	; 10
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 0d 14 	call	0x281a	; 0x281a <__eerd_byte_m32u4>
     59c:	80 93 32 01 	sts	0x0132, r24

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5a0:	8e e0       	ldi	r24, 0x0E	; 14
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	0e 94 0d 14 	call	0x281a	; 0x281a <__eerd_byte_m32u4>
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	18 2f       	mov	r17, r24
     5ac:	00 27       	eor	r16, r16
     5ae:	10 93 1d 01 	sts	0x011D, r17

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b2:	00 93 1c 01 	sts	0x011C, r16
     5b6:	8c e0       	ldi	r24, 0x0C	; 12
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 0d 14 	call	0x281a	; 0x281a <__eerd_byte_m32u4>
     5be:	08 0f       	add	r16, r24
     5c0:	11 1d       	adc	r17, r1
     5c2:	10 93 1d 01 	sts	0x011D, r17
     5c6:	00 93 1c 01 	sts	0x011C, r16
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 0d 14 	call	0x281a	; 0x281a <__eerd_byte_m32u4>
     5d2:	81 30       	cpi	r24, 0x01	; 1
     5d4:	51 f4       	brne	.+20     	; 0x5ea <LoadSettings+0xce>
     5d6:	1f 99       	sbic	0x03, 7	; 3
     5d8:	06 c0       	rjmp	.+12     	; 0x5e6 <LoadSettings+0xca>
     5da:	89 83       	std	Y+1, r24	; 0x01
     5dc:	27 de       	rcall	.-946    	; 0x22c <WaitForButtonRelease>
     5de:	89 81       	ldd	r24, Y+1	; 0x01
     5e0:	80 93 3f 01 	sts	0x013F, r24
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <LoadSettings+0xce>
     5e6:	80 93 27 01 	sts	0x0127, r24

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5ea:	0f 90       	pop	r0
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	1f 91       	pop	r17
					  return HID_PARSE_InsufficientReportItems;
     5f2:	0f 91       	pop	r16
     5f4:	08 95       	ret

000005f6 <__vector_21>:

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     5f6:	1f 92       	push	r1
     5f8:	0f 92       	push	r0
     5fa:	0f b6       	in	r0, 0x3f	; 63
     5fc:	0f 92       	push	r0
     5fe:	11 24       	eor	r1, r1
     600:	8f 93       	push	r24
     602:	9f 93       	push	r25
     604:	80 91 1e 01 	lds	r24, 0x011E
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	98 0f       	add	r25, r24
     60c:	90 93 1e 01 	sts	0x011E, r25
     610:	84 31       	cpi	r24, 0x14	; 20
     612:	41 f4       	brne	.+16     	; 0x624 <__vector_21+0x2e>
     614:	2d 98       	cbi	0x05, 5	; 5
     616:	10 92 1e 01 	sts	0x011E, r1
     61a:	80 91 6e 00 	lds	r24, 0x006E
     61e:	8d 7f       	andi	r24, 0xFD	; 253
     620:	80 93 6e 00 	sts	0x006E, r24
     624:	9f 91       	pop	r25
     626:	8f 91       	pop	r24
     628:	0f 90       	pop	r0
     62a:	0f be       	out	0x3f, r0	; 63
     62c:	0f 90       	pop	r0
     62e:	1f 90       	pop	r1
     630:	18 95       	reti

00000632 <__vector_17>:
     632:	1f 92       	push	r1
     634:	0f 92       	push	r0
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	0f 92       	push	r0
     63a:	11 24       	eor	r1, r1
     63c:	8f 93       	push	r24
     63e:	9f 93       	push	r25
     640:	80 91 88 00 	lds	r24, 0x0088
     644:	90 91 89 00 	lds	r25, 0x0089
     648:	87 5f       	subi	r24, 0xF7	; 247
     64a:	92 4c       	sbci	r25, 0xC2	; 194
     64c:	90 93 89 00 	sts	0x0089, r25
     650:	80 93 88 00 	sts	0x0088, r24
     654:	80 91 3a 01 	lds	r24, 0x013A
     658:	88 23       	and	r24, r24
     65a:	19 f0       	breq	.+6      	; 0x662 <__vector_17+0x30>
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	80 93 41 01 	sts	0x0141, r24
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	80 93 57 01 	sts	0x0157, r24
     668:	9f 91       	pop	r25
     66a:	8f 91       	pop	r24
     66c:	0f 90       	pop	r0
     66e:	0f be       	out	0x3f, r0	; 63
     670:	0f 90       	pop	r0
     672:	1f 90       	pop	r1
     674:	18 95       	reti

00000676 <SendSample>:
     676:	10 92 2f 01 	sts	0x012F, r1
     67a:	87 e0       	ldi	r24, 0x07	; 7
					  ParserData->TotalReportItems++;
     67c:	80 93 22 01 	sts	0x0122, r24
     680:	80 91 30 01 	lds	r24, 0x0130
     684:	90 91 31 01 	lds	r25, 0x0131
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     688:	90 93 56 01 	sts	0x0156, r25
     68c:	80 93 35 01 	sts	0x0135, r24
     690:	80 91 38 01 	lds	r24, 0x0138
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     694:	90 91 39 01 	lds	r25, 0x0139
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     698:	90 93 3e 01 	sts	0x013E, r25
     69c:	80 93 28 01 	sts	0x0128, r24
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6a0:	80 91 42 01 	lds	r24, 0x0142
     6a4:	80 93 1b 01 	sts	0x011B, r24
		}
	}

	if (!(ParserData->TotalReportItems))
     6a8:	80 91 34 01 	lds	r24, 0x0134
     6ac:	80 93 3c 01 	sts	0x013C, r24
	  return HID_PARSE_NoUnfilteredReportItems;
     6b0:	81 e0       	ldi	r24, 0x01	; 1

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6b2:	80 93 36 01 	sts	0x0136, r24

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6b6:	10 92 39 01 	sts	0x0139, r1

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6ba:	10 92 38 01 	sts	0x0138, r1
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6be:	08 95       	ret

000006c0 <CompactMemory>:
     6c0:	2f 92       	push	r2
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6c2:	3f 92       	push	r3
     6c4:	4f 92       	push	r4
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6c6:	5f 92       	push	r5
     6c8:	6f 92       	push	r6
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6ca:	7f 92       	push	r7

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6cc:	8f 92       	push	r8
     6ce:	9f 92       	push	r9
     6d0:	af 92       	push	r10
     6d2:	bf 92       	push	r11
     6d4:	cf 92       	push	r12
     6d6:	df 92       	push	r13
     6d8:	ef 92       	push	r14
     6da:	ff 92       	push	r15
     6dc:	0f 93       	push	r16
     6de:	1f 93       	push	r17
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
     6e8:	a0 97       	sbiw	r28, 0x20	; 32
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	de bf       	out	0x3e, r29	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	cd bf       	out	0x3d, r28	; 61
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	98 e0       	ldi	r25, 0x08	; 8
     6f8:	90 93 26 01 	sts	0x0126, r25
     6fc:	80 93 25 01 	sts	0x0125, r24
{	
	// next recording posision will be half way through memory contents
	_nextMemoryPosition = 2048;
	
	// update the memory compacts counter	
	_compactionCount++;	
     700:	60 91 21 01 	lds	r22, 0x0121
     704:	6f 5f       	subi	r22, 0xFF	; 255
     706:	60 93 21 01 	sts	0x0121, r22
	eeprom_update_byte((uint8_t*)COMPACTION_COUNT, _compactionCount);
     70a:	86 e0       	ldi	r24, 0x06	; 6
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 15 14 	call	0x282a	; 0x282a <__eeupd_byte_m32u4>
     712:	41 2c       	mov	r4, r1
     714:	51 2c       	mov	r5, r1
     716:	6e 01       	movw	r12, r28
     718:	21 e2       	ldi	r18, 0x21	; 33
     71a:	c2 0e       	add	r12, r18
     71c:	d1 1c       	adc	r13, r1
     71e:	8e 01       	movw	r16, r28
     720:	0f 5f       	subi	r16, 0xFF	; 255
     722:	1f 4f       	sbci	r17, 0xFF	; 255
	return;
}

// take every pair of adjacent samples, write them into the first half of the memory, clear the second half of memory
void CompactMemory(void)
{	
     724:	72 01       	movw	r14, r4
     726:	ee 0c       	add	r14, r14
     728:	ff 1c       	adc	r15, r15
		// 8 samples (32 bytes) will go into output page
		Sample outputSamples[8];
		for (uint8_t sampleIndex = 0; sampleIndex < 8; sampleIndex++)
		{
			// read 2 samples (8 bytes)
			Sample sample1 = LC32_ReadSample((64 * pageIndex) + (8 * sampleIndex));
     72a:	c7 01       	movw	r24, r14
     72c:	b0 d5       	rcall	.+2912   	; 0x128e <LC32_ReadSample>
     72e:	4b 01       	movw	r8, r22
     730:	5c 01       	movw	r10, r24
     732:	c7 01       	movw	r24, r14
			Sample sample2 = LC32_ReadSample((64 * pageIndex) + (8 * sampleIndex) + 4);
     734:	04 96       	adiw	r24, 0x04	; 4
     736:	ab d5       	rcall	.+2902   	; 0x128e <LC32_ReadSample>
     738:	fc 01       	movw	r30, r24
     73a:	81 14       	cp	r8, r1
     73c:	91 04       	cpc	r9, r1
			
			if((sample1.temperature == 0x0000 && sample1.bubbles == 0xFFFF) || (sample2.temperature == 0x0000 && sample2.bubbles == 0xFFFF))
     73e:	21 f4       	brne	.+8      	; 0x748 <CompactMemory+0x88>
     740:	2f ef       	ldi	r18, 0xFF	; 255
     742:	a2 16       	cp	r10, r18
     744:	b2 06       	cpc	r11, r18
     746:	21 f0       	breq	.+8      	; 0x750 <CompactMemory+0x90>
     748:	67 2b       	or	r22, r23
     74a:	41 f4       	brne	.+16     	; 0x75c <CompactMemory+0x9c>
     74c:	31 96       	adiw	r30, 0x01	; 1
     74e:	31 f4       	brne	.+12     	; 0x75c <CompactMemory+0x9c>
     750:	f8 01       	movw	r30, r16
     752:	11 82       	std	Z+1, r1	; 0x01
			{
				// keep stop/start marker
				outputSamples[sampleIndex].temperature = 0x0000;
     754:	10 82       	st	Z, r1
     756:	8f ef       	ldi	r24, 0xFF	; 255
     758:	9f ef       	ldi	r25, 0xFF	; 255
				outputSamples[sampleIndex].bubbles = 0xFFFF;
     75a:	05 c0       	rjmp	.+10     	; 0x766 <CompactMemory+0xa6>
     75c:	f8 01       	movw	r30, r16
     75e:	91 82       	std	Z+1, r9	; 0x01
			}
			else
			{
				// compact into one sample (first temp, sum bubbles)
				// we don't average the temp since it's not so easy with raw DS18B20 data
				outputSamples[sampleIndex].temperature = sample1.temperature;
     760:	80 82       	st	Z, r8
     762:	8a 0d       	add	r24, r10
     764:	9b 1d       	adc	r25, r11
				outputSamples[sampleIndex].bubbles = sample1.bubbles + sample2.bubbles;
     766:	93 83       	std	Z+3, r25	; 0x03
     768:	82 83       	std	Z+2, r24	; 0x02
     76a:	f8 e0       	ldi	r31, 0x08	; 8
     76c:	ef 0e       	add	r14, r31
     76e:	f1 1c       	adc	r15, r1
     770:	0c 5f       	subi	r16, 0xFC	; 252
     772:	1f 4f       	sbci	r17, 0xFF	; 255
     774:	0c 15       	cp	r16, r12
     776:	1d 05       	cpc	r17, r13
	// and avoid unnecessary EEPROM wear
	for(uint8_t pageIndex = 0; pageIndex < 64; pageIndex++)
	{
		// 8 samples (32 bytes) will go into output page
		Sample outputSamples[8];
		for (uint8_t sampleIndex = 0; sampleIndex < 8; sampleIndex++)
     778:	c1 f6       	brne	.-80     	; 0x72a <CompactMemory+0x6a>
     77a:	be 01       	movw	r22, r28
     77c:	6f 5f       	subi	r22, 0xFF	; 255
				outputSamples[sampleIndex].bubbles = sample1.bubbles + sample2.bubbles;
			}
		}
		
		// write whole page (32 bytes) of output data
		LC32_WritePage((32 * pageIndex), outputSamples);
     77e:	7f 4f       	sbci	r23, 0xFF	; 255
     780:	c2 01       	movw	r24, r4
     782:	b4 d5       	rcall	.+2920   	; 0x12ec <LC32_WritePage>
     784:	20 e2       	ldi	r18, 0x20	; 32
     786:	42 0e       	add	r4, r18
     788:	51 1c       	adc	r5, r1
     78a:	41 14       	cp	r4, r1
     78c:	88 e0       	ldi	r24, 0x08	; 8
     78e:	58 06       	cpc	r5, r24
	eeprom_update_byte((uint8_t*)COMPACTION_COUNT, _compactionCount);
	
	// move the data around. (write 64 pages with 8 samples each)
	// by writing a whole page at a time we improve performance 
	// and avoid unnecessary EEPROM wear
	for(uint8_t pageIndex = 0; pageIndex < 64; pageIndex++)
     790:	31 f6       	brne	.-116    	; 0x71e <CompactMemory+0x5e>
     792:	fe 01       	movw	r30, r28
     794:	31 96       	adiw	r30, 0x01	; 1
     796:	8f ef       	ldi	r24, 0xFF	; 255
     798:	9f ef       	ldi	r25, 0xFF	; 255
     79a:	91 83       	std	Z+1, r25	; 0x01
	
	// clear the second half of the memory space now that it is no longer needed
	Sample blankSamples[8];
	for(uint8_t i = 0; i < 8; i++)
	{
		blankSamples[i].temperature = 0xFFFF;
     79c:	80 83       	st	Z, r24
     79e:	93 83       	std	Z+3, r25	; 0x03
     7a0:	82 83       	std	Z+2, r24	; 0x02
     7a2:	34 96       	adiw	r30, 0x04	; 4
		blankSamples[i].bubbles = 0xFFFF;
     7a4:	ec 15       	cp	r30, r12
     7a6:	fd 05       	cpc	r31, r13
     7a8:	c1 f7       	brne	.-16     	; 0x79a <CompactMemory+0xda>
		LC32_WritePage((32 * pageIndex), outputSamples);
	}
	
	// clear the second half of the memory space now that it is no longer needed
	Sample blankSamples[8];
	for(uint8_t i = 0; i < 8; i++)
     7aa:	00 e0       	ldi	r16, 0x00	; 0
     7ac:	18 e0       	ldi	r17, 0x08	; 8
     7ae:	be 01       	movw	r22, r28
     7b0:	6f 5f       	subi	r22, 0xFF	; 255
     7b2:	7f 4f       	sbci	r23, 0xFF	; 255
		blankSamples[i].temperature = 0xFFFF;
		blankSamples[i].bubbles = 0xFFFF;
	}
	for(uint8_t i = 64; i < 128; i++)
	{
		LC32_WritePage((32 * i), blankSamples);
     7b4:	c8 01       	movw	r24, r16
     7b6:	9a d5       	rcall	.+2868   	; 0x12ec <LC32_WritePage>
     7b8:	00 5e       	subi	r16, 0xE0	; 224
     7ba:	1f 4f       	sbci	r17, 0xFF	; 255
     7bc:	01 15       	cp	r16, r1
     7be:	90 e1       	ldi	r25, 0x10	; 16
     7c0:	19 07       	cpc	r17, r25
     7c2:	a9 f7       	brne	.-22     	; 0x7ae <CompactMemory+0xee>
	for(uint8_t i = 0; i < 8; i++)
	{
		blankSamples[i].temperature = 0xFFFF;
		blankSamples[i].bubbles = 0xFFFF;
	}
	for(uint8_t i = 64; i < 128; i++)
     7c4:	a0 96       	adiw	r28, 0x20	; 32
     7c6:	0f b6       	in	r0, 0x3f	; 63
     7c8:	f8 94       	cli
     7ca:	de bf       	out	0x3e, r29	; 62
	{
		LC32_WritePage((32 * i), blankSamples);
	}
}
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	cd bf       	out	0x3d, r28	; 61
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	ff 90       	pop	r15
     7da:	ef 90       	pop	r14
     7dc:	df 90       	pop	r13
     7de:	cf 90       	pop	r12
     7e0:	bf 90       	pop	r11
     7e2:	af 90       	pop	r10
     7e4:	9f 90       	pop	r9
     7e6:	8f 90       	pop	r8
     7e8:	7f 90       	pop	r7
     7ea:	6f 90       	pop	r6
     7ec:	5f 90       	pop	r5
     7ee:	4f 90       	pop	r4
     7f0:	3f 90       	pop	r3
     7f2:	2f 90       	pop	r2
     7f4:	08 95       	ret

000007f6 <RecordSample>:
     7f6:	8f 92       	push	r8
     7f8:	9f 92       	push	r9
     7fa:	af 92       	push	r10
     7fc:	bf 92       	push	r11
	_measureTempFlag = 1;
}

// store current values into next available EEPROM location
void RecordSample(void)
{	
     7fe:	cf 92       	push	r12
     800:	df 92       	push	r13
     802:	ef 92       	push	r14
     804:	ff 92       	push	r15
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
	// flash the recording led, turn it off later
	output_high(RECORD_LED_PORT, RECORD_LED_PIN);
     80a:	2d 9a       	sbi	0x05, 5	; 5
	TIMSK0 |= (1 << OCIE0A);
     80c:	80 91 6e 00 	lds	r24, 0x006E
     810:	82 60       	ori	r24, 0x02	; 2
     812:	80 93 6e 00 	sts	0x006E, r24
	
	_recordSampleFlag = 0;
     816:	10 92 41 01 	sts	0x0141, r1
	
	// handle uploading data
	_secondsCounter++;
     81a:	80 91 40 01 	lds	r24, 0x0140
     81e:	8f 5f       	subi	r24, 0xFF	; 255
	if(_secondsCounter == UPLOAD_INTERVAL) {
     820:	8e 31       	cpi	r24, 0x1E	; 30
     822:	19 f0       	breq	.+6      	; 0x82a <RecordSample+0x34>
	TIMSK0 |= (1 << OCIE0A);
	
	_recordSampleFlag = 0;
	
	// handle uploading data
	_secondsCounter++;
     824:	80 93 40 01 	sts	0x0140, r24
     828:	02 c0       	rjmp	.+4      	; 0x82e <RecordSample+0x38>
	if(_secondsCounter == UPLOAD_INTERVAL) {
		_secondsCounter = 0;
     82a:	10 92 40 01 	sts	0x0140, r1
	//uint8_t tempHighByte = _rawTemperature / 256;
	//uint8_t tempMsb = tempHighByte % 8;
	//uint8_t tempLsb = _rawTemperature % 256;
	//uint16_t temp16 = (tempMsb * 256) + tempLsb;
	//if(temp16 < (27 * 16))
	if(_secondsCounter % 2)
     82e:	80 91 40 01 	lds	r24, 0x0140
     832:	80 ff       	sbrs	r24, 0
     834:	02 c0       	rjmp	.+4      	; 0x83a <RecordSample+0x44>
		PowerSwitch_HeaterOn();
     836:	ce d5       	rcall	.+2972   	; 0x13d4 <PowerSwitch_HeaterOn>
     838:	01 c0       	rjmp	.+2      	; 0x83c <RecordSample+0x46>
     83a:	e3 d5       	rcall	.+3014   	; 0x1402 <PowerSwitch_HeaterOff>
	else
		PowerSwitch_HeaterOff();
     83c:	c0 91 2d 01 	lds	r28, 0x012D
	
	// only store when divisor counter = (2 ^ compactions) - 1	
	if(_divisorCounter < pow(2, _compactionCount) - 1)
     840:	d0 91 2e 01 	lds	r29, 0x012E
     844:	60 91 21 01 	lds	r22, 0x0121
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	0e 94 0e 11 	call	0x221c	; 0x221c <__floatunsisf>
     852:	9b 01       	movw	r18, r22
     854:	ac 01       	movw	r20, r24
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	90 e4       	ldi	r25, 0x40	; 64
     85e:	0e 94 c0 11 	call	0x2380	; 0x2380 <pow>
     862:	4b 01       	movw	r8, r22
     864:	5c 01       	movw	r10, r24
     866:	be 01       	movw	r22, r28
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 0e 11 	call	0x221c	; 0x221c <__floatunsisf>
     870:	6b 01       	movw	r12, r22
     872:	7c 01       	movw	r14, r24
     874:	20 e0       	ldi	r18, 0x00	; 0
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	40 e8       	ldi	r20, 0x80	; 128
     87a:	5f e3       	ldi	r21, 0x3F	; 63
     87c:	c5 01       	movw	r24, r10
     87e:	b4 01       	movw	r22, r8
     880:	0e 94 a5 10 	call	0x214a	; 0x214a <__subsf3>
     884:	9b 01       	movw	r18, r22
     886:	ac 01       	movw	r20, r24
     888:	c7 01       	movw	r24, r14
     88a:	b6 01       	movw	r22, r12
     88c:	0e 94 0a 11 	call	0x2214	; 0x2214 <__cmpsf2>
     890:	87 ff       	sbrs	r24, 7
     892:	06 c0       	rjmp	.+12     	; 0x8a0 <RecordSample+0xaa>
     894:	21 96       	adiw	r28, 0x01	; 1
     896:	d0 93 2e 01 	sts	0x012E, r29
	{
		_divisorCounter++;
     89a:	c0 93 2d 01 	sts	0x012D, r28
     89e:	2c c0       	rjmp	.+88     	; 0x8f8 <RecordSample+0x102>
     8a0:	10 92 2e 01 	sts	0x012E, r1
		return;
	}
	_divisorCounter = 0;
     8a4:	10 92 2d 01 	sts	0x012D, r1
     8a8:	40 91 30 01 	lds	r20, 0x0130
	
	// write new sample to eeprom
	Sample sample = {_rawTemperature, _recordBubbleCount};
     8ac:	50 91 31 01 	lds	r21, 0x0131
     8b0:	60 91 1f 01 	lds	r22, 0x011F
     8b4:	70 91 20 01 	lds	r23, 0x0120
     8b8:	80 91 25 01 	lds	r24, 0x0125
	LC32_WriteSample(_nextMemoryPosition, sample);
     8bc:	90 91 26 01 	lds	r25, 0x0126
     8c0:	bc d4       	rcall	.+2424   	; 0x123a <LC32_WriteSample>
     8c2:	80 91 25 01 	lds	r24, 0x0125
     8c6:	90 91 26 01 	lds	r25, 0x0126
	_nextMemoryPosition += 4;
     8ca:	04 96       	adiw	r24, 0x04	; 4
     8cc:	90 93 26 01 	sts	0x0126, r25
     8d0:	80 93 25 01 	sts	0x0125, r24
     8d4:	10 92 20 01 	sts	0x0120, r1
     8d8:	10 92 1f 01 	sts	0x011F, r1
	
	// reset the bubble counter
	_recordBubbleCount = 0;
     8dc:	81 15       	cp	r24, r1
     8de:	90 41       	sbci	r25, 0x10	; 16
     8e0:	59 f4       	brne	.+22     	; 0x8f8 <RecordSample+0x102>
	
	if(_nextMemoryPosition == 4096)
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	ff 90       	pop	r15
		CompactMemory();
}
     8e8:	ef 90       	pop	r14
     8ea:	df 90       	pop	r13
     8ec:	cf 90       	pop	r12
     8ee:	bf 90       	pop	r11
     8f0:	af 90       	pop	r10
     8f2:	9f 90       	pop	r9
     8f4:	8f 90       	pop	r8
     8f6:	e4 ce       	rjmp	.-568    	; 0x6c0 <CompactMemory>
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
	
	// reset the bubble counter
	_recordBubbleCount = 0;
	
	if(_nextMemoryPosition == 4096)
		CompactMemory();
     8fc:	ff 90       	pop	r15
     8fe:	ef 90       	pop	r14
}
     900:	df 90       	pop	r13
     902:	cf 90       	pop	r12
     904:	bf 90       	pop	r11
     906:	af 90       	pop	r10
     908:	9f 90       	pop	r9
     90a:	8f 90       	pop	r8
     90c:	08 95       	ret

0000090e <main>:
     90e:	2d 9a       	sbi	0x05, 5	; 5
     910:	2c 9a       	sbi	0x05, 4	; 5
     912:	a2 dc       	rcall	.-1724   	; 0x258 <SetupHardware>
     914:	24 d5       	rcall	.+2632   	; 0x135e <PowerSwitch_Setup>
{
	output_high(RECORD_LED_PORT, RECORD_LED_PIN);
	output_high(BUBBLE_LED_PORT, BUBBLE_LED_PIN);
	SetupHardware();
	
	PowerSwitch_Setup();
     916:	2f ef       	ldi	r18, 0xFF	; 255
     918:	83 ec       	ldi	r24, 0xC3	; 195
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     91a:	99 e0       	ldi	r25, 0x09	; 9
     91c:	21 50       	subi	r18, 0x01	; 1
     91e:	80 40       	sbci	r24, 0x00	; 0
     920:	90 40       	sbci	r25, 0x00	; 0
     922:	e1 f7       	brne	.-8      	; 0x91c <main+0xe>
     924:	00 c0       	rjmp	.+0      	; 0x926 <main+0x18>
     926:	00 00       	nop
     928:	f9 dd       	rcall	.-1038   	; 0x51c <LoadSettings>
     92a:	85 d6       	rcall	.+3338   	; 0x1636 <USB_Init>
	
	_delay_ms(200); // make sure the lights flash for a while even if everything else initialises fast
	LoadSettings();
     92c:	e8 dc       	rcall	.-1584   	; 0x2fe <SetupTimerInterrupts>
     92e:	2d 98       	cbi	0x05, 5	; 5
	//uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
	//uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
	USB_Init();
     930:	2c 98       	cbi	0x05, 4	; 5
     932:	80 e0       	ldi	r24, 0x00	; 0
	
	//output_high(BUBBLE_LED_PORT, BUBBLE_LED_PIN);
	//FillMemoryWithDebugData(); // this is to test the memory splitting algorithm
	//output_low(BUBBLE_LED_PORT, BUBBLE_LED_PIN);
	
	SetupTimerInterrupts();
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <HID_Device_USBTask>
	output_low(RECORD_LED_PORT, RECORD_LED_PIN);
	output_low(BUBBLE_LED_PORT, BUBBLE_LED_PIN);
     93a:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <USB_USBTask>

	for (;;)
	{
		HID_Device_USBTask(&Generic_HID_Interface);
     93e:	80 91 41 01 	lds	r24, 0x0141
     942:	88 23       	and	r24, r24
		USB_USBTask();
     944:	11 f0       	breq	.+4      	; 0x94a <main+0x3c>
     946:	57 df       	rcall	.-338    	; 0x7f6 <RecordSample>
		
		if(_recordSampleFlag)
     948:	f4 cf       	rjmp	.-24     	; 0x932 <main+0x24>
     94a:	80 91 2f 01 	lds	r24, 0x012F
     94e:	88 23       	and	r24, r24
		{
			RecordSample(); // write to eeprom
     950:	11 f0       	breq	.+4      	; 0x956 <main+0x48>
     952:	91 de       	rcall	.-734    	; 0x676 <SendSample>
     954:	ee cf       	rjmp	.-36     	; 0x932 <main+0x24>
		}
		else if(_sendSampleFlag)
     956:	80 91 27 01 	lds	r24, 0x0127
     95a:	88 23       	and	r24, r24
     95c:	11 f0       	breq	.+4      	; 0x962 <main+0x54>
		{
			SendSample(); // write to usb
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	05 c0       	rjmp	.+10     	; 0x96c <main+0x5e>
     962:	80 91 3f 01 	lds	r24, 0x013F
		}
		else if(_startRecordingFlag)
     966:	88 23       	and	r24, r24
     968:	19 f0       	breq	.+6      	; 0x970 <main+0x62>
     96a:	80 e0       	ldi	r24, 0x00	; 0
		{
			// start a new recording
			StartRecording(1);
     96c:	61 dd       	rcall	.-1342   	; 0x430 <StartRecording>
     96e:	e1 cf       	rjmp	.-62     	; 0x932 <main+0x24>
		}
		else if(_resumeRecordingFlag)
     970:	80 91 3d 01 	lds	r24, 0x013D
     974:	88 23       	and	r24, r24
     976:	11 f0       	breq	.+4      	; 0x97c <main+0x6e>
		{
			// resume recording
			StartRecording(0);
     978:	97 dd       	rcall	.-1234   	; 0x4a8 <StopRecording>
     97a:	db cf       	rjmp	.-74     	; 0x932 <main+0x24>
     97c:	80 91 57 01 	lds	r24, 0x0157
		}
		else if(_stopRecordingFlag)
     980:	88 23       	and	r24, r24
     982:	61 f0       	breq	.+24     	; 0x99c <main+0x8e>
     984:	7e d3       	rcall	.+1788   	; 0x1082 <DS18X20_read_raw_single>
     986:	90 93 31 01 	sts	0x0131, r25
		{
			StopRecording();
     98a:	80 93 30 01 	sts	0x0130, r24
		}
		else if(_measureTempFlag)
     98e:	60 e0       	ldi	r22, 0x00	; 0
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	58 d3       	rcall	.+1712   	; 0x1046 <DS18X20_start_meas>
		{
			_rawTemperature = DS18X20_read_raw_single();
     996:	10 92 57 01 	sts	0x0157, r1
     99a:	cb cf       	rjmp	.-106    	; 0x932 <main+0x24>
     99c:	80 91 19 01 	lds	r24, 0x0119
     9a0:	88 23       	and	r24, r24
			DS18X20_start_meas(DS18X20_POWER_EXTERN, NULL); // start next temperature conversion
     9a2:	39 f2       	breq	.-114    	; 0x932 <main+0x24>
     9a4:	8c dd       	rcall	.-1256   	; 0x4be <ClearExternalMemory>
     9a6:	c5 cf       	rjmp	.-118    	; 0x932 <main+0x24>

000009a8 <__vector_18>:
     9a8:	1f 92       	push	r1
     9aa:	0f 92       	push	r0
			_measureTempFlag = 0;
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	0f 92       	push	r0
     9b0:	11 24       	eor	r1, r1
		}
		else if(_clearMemoryFlag)
     9b2:	2f 93       	push	r18
     9b4:	3f 93       	push	r19
     9b6:	8f 93       	push	r24
     9b8:	9f 93       	push	r25
		{
			ClearExternalMemory();
     9ba:	80 91 8a 00 	lds	r24, 0x008A
     9be:	90 91 8b 00 	lds	r25, 0x008B
}

// This interrupt occurs 25 times per second 15625
ISR(TIMER1_COMPB_vect)
{
	OCR1B += 138; // 138 = 25 times per second 276 = 12.5 times
     9c2:	86 57       	subi	r24, 0x76	; 118
     9c4:	9f 4f       	sbci	r25, 0xFF	; 255
     9c6:	90 93 8b 00 	sts	0x008B, r25
     9ca:	80 93 8a 00 	sts	0x008A, r24
	_adcValue = ADCH; // store ADC value
     9ce:	80 91 79 00 	lds	r24, 0x0079
     9d2:	80 93 34 01 	sts	0x0134, r24
	ADCSRA |= (1 << ADSC); // initiate next ADC
     9d6:	80 91 7a 00 	lds	r24, 0x007A
     9da:	80 64       	ori	r24, 0x40	; 64
     9dc:	80 93 7a 00 	sts	0x007A, r24
	// Bubble Logic - A bubble has occurred when:
	// 1. bubble delay has passed since last bubble occurrence
	// 2. ADC sample below minThreshold has been detected, then
	// 3. ADC sample above maxThreshold has been detected, then
	// 4. ADC sample below minThreshold has been detected again
	if(_readyForBubble)
     9e0:	80 91 37 01 	lds	r24, 0x0137
     9e4:	88 23       	and	r24, r24
     9e6:	09 f4       	brne	.+2      	; 0x9ea <__vector_18+0x42>
     9e8:	5d c0       	rjmp	.+186    	; 0xaa4 <__vector_18+0xfc>
	{
		// wait for first low reading after the delay has elapsed
		if(_bubbleLow1Detected == 0 && _adcValue < _adcLowThreshold)
     9ea:	80 91 23 01 	lds	r24, 0x0123
     9ee:	81 11       	cpse	r24, r1
     9f0:	09 c0       	rjmp	.+18     	; 0xa04 <__vector_18+0x5c>
     9f2:	90 91 34 01 	lds	r25, 0x0134
     9f6:	80 91 43 01 	lds	r24, 0x0143
     9fa:	98 17       	cp	r25, r24
     9fc:	18 f4       	brcc	.+6      	; 0xa04 <__vector_18+0x5c>
		{
			_bubbleLow1Detected = 1;
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	80 93 23 01 	sts	0x0123, r24
		}
		
		// wait for first high reading after first low reading
		if(_bubbleLow1Detected && _bubbleHighDetected == 0 && _adcValue > _adcHighThreshold)
     a04:	80 91 23 01 	lds	r24, 0x0123
     a08:	88 23       	and	r24, r24
     a0a:	09 f4       	brne	.+2      	; 0xa0e <__vector_18+0x66>
     a0c:	4b c0       	rjmp	.+150    	; 0xaa4 <__vector_18+0xfc>
     a0e:	80 91 24 01 	lds	r24, 0x0124
     a12:	81 11       	cpse	r24, r1
     a14:	09 c0       	rjmp	.+18     	; 0xa28 <__vector_18+0x80>
     a16:	90 91 34 01 	lds	r25, 0x0134
     a1a:	80 91 32 01 	lds	r24, 0x0132
     a1e:	89 17       	cp	r24, r25
     a20:	18 f4       	brcc	.+6      	; 0xa28 <__vector_18+0x80>
		{
			_bubbleHighDetected = 1;
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	80 93 24 01 	sts	0x0124, r24
		}
		
		// wait for next low reading after the high reading
		if(_bubbleLow1Detected && _bubbleHighDetected && _bubbleLow2Detected == 0 && _adcValue < _adcLowThreshold)
     a28:	80 91 24 01 	lds	r24, 0x0124
     a2c:	88 23       	and	r24, r24
     a2e:	d1 f1       	breq	.+116    	; 0xaa4 <__vector_18+0xfc>
     a30:	80 91 2c 01 	lds	r24, 0x012C
     a34:	88 23       	and	r24, r24
     a36:	f1 f1       	breq	.+124    	; 0xab4 <__vector_18+0x10c>
		{
			_bubbleLow2Detected = 1;
		}
		
		// check if bubble occurred
		if(_bubbleLow1Detected && _bubbleHighDetected && _bubbleLow2Detected)
     a38:	80 91 2c 01 	lds	r24, 0x012C
     a3c:	88 23       	and	r24, r24
     a3e:	91 f1       	breq	.+100    	; 0xaa4 <__vector_18+0xfc>
		{
			_recordBubbleCount++; // increment the bubble count
     a40:	80 91 1f 01 	lds	r24, 0x011F
     a44:	90 91 20 01 	lds	r25, 0x0120
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	90 93 20 01 	sts	0x0120, r25
     a4e:	80 93 1f 01 	sts	0x011F, r24
			_usbBubbleCount++; // increment the bubble count
     a52:	80 91 38 01 	lds	r24, 0x0138
     a56:	90 91 39 01 	lds	r25, 0x0139
     a5a:	01 96       	adiw	r24, 0x01	; 1
     a5c:	90 93 39 01 	sts	0x0139, r25
     a60:	80 93 38 01 	sts	0x0138, r24
			_bubbleLow1Detected = 0;
     a64:	10 92 23 01 	sts	0x0123, r1
			_bubbleHighDetected = 0;
     a68:	10 92 24 01 	sts	0x0124, r1
			_bubbleLow2Detected = 0;
     a6c:	10 92 2c 01 	sts	0x012C, r1
			_readyForBubble = 0;
     a70:	10 92 37 01 	sts	0x0137, r1
			
			// turn on bubble LED and update bubble status flag
			output_high(BUBBLE_LED_PORT, BUBBLE_LED_PIN);
     a74:	2c 9a       	sbi	0x05, 4	; 5
			_bubbleOccurring = 1;  // 1 means bubble is occurring
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	80 93 42 01 	sts	0x0142, r24
			
			// enable oc1c interrupt which will re-enable bubble sensing later
			// set up the timer compare register
			OCR1C = TCNT1 + _bubbleDelay;
     a7c:	80 91 84 00 	lds	r24, 0x0084
     a80:	90 91 85 00 	lds	r25, 0x0085
     a84:	20 91 1c 01 	lds	r18, 0x011C
     a88:	30 91 1d 01 	lds	r19, 0x011D
     a8c:	82 0f       	add	r24, r18
     a8e:	93 1f       	adc	r25, r19
     a90:	90 93 8d 00 	sts	0x008D, r25
     a94:	80 93 8c 00 	sts	0x008C, r24
			// clear the interrupt that would send us straight to the TIMER1_COMPC_vect
			TIFR1 |= (1 << OCF1C);
     a98:	b3 9a       	sbi	0x16, 3	; 22
			// enable the interrupt
			TIMSK1 |= (1 << OCIE1C);
     a9a:	80 91 6f 00 	lds	r24, 0x006F
     a9e:	88 60       	ori	r24, 0x08	; 8
     aa0:	80 93 6f 00 	sts	0x006F, r24
		}
	}
	if(_fastStreaming)
     aa4:	80 91 18 01 	lds	r24, 0x0118
     aa8:	88 23       	and	r24, r24
     aaa:	79 f0       	breq	.+30     	; 0xaca <__vector_18+0x122>
	{
		_sendSampleFlag = 1;
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	80 93 2f 01 	sts	0x012F, r24
     ab2:	0b c0       	rjmp	.+22     	; 0xaca <__vector_18+0x122>
		{
			_bubbleHighDetected = 1;
		}
		
		// wait for next low reading after the high reading
		if(_bubbleLow1Detected && _bubbleHighDetected && _bubbleLow2Detected == 0 && _adcValue < _adcLowThreshold)
     ab4:	90 91 34 01 	lds	r25, 0x0134
     ab8:	80 91 43 01 	lds	r24, 0x0143
     abc:	98 17       	cp	r25, r24
     abe:	08 f0       	brcs	.+2      	; 0xac2 <__vector_18+0x11a>
     ac0:	bb cf       	rjmp	.-138    	; 0xa38 <__vector_18+0x90>
		{
			_bubbleLow2Detected = 1;
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	80 93 2c 01 	sts	0x012C, r24
     ac8:	b7 cf       	rjmp	.-146    	; 0xa38 <__vector_18+0x90>
	}
	if(_fastStreaming)
	{
		_sendSampleFlag = 1;
	}
}
     aca:	9f 91       	pop	r25
     acc:	8f 91       	pop	r24
     ace:	3f 91       	pop	r19
     ad0:	2f 91       	pop	r18
     ad2:	0f 90       	pop	r0
     ad4:	0f be       	out	0x3f, r0	; 63
     ad6:	0f 90       	pop	r0
     ad8:	1f 90       	pop	r1
     ada:	18 95       	reti

00000adc <__vector_19>:

// This interrupt occurs "bubbledelay" after a bubble
ISR(TIMER1_COMPC_vect)
{	
     adc:	1f 92       	push	r1
     ade:	0f 92       	push	r0
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	0f 92       	push	r0
     ae4:	11 24       	eor	r1, r1
     ae6:	8f 93       	push	r24
     ae8:	ef 93       	push	r30
     aea:	ff 93       	push	r31
	// turn off bubble LED
	output_low(BUBBLE_LED_PORT, BUBBLE_LED_PIN);
     aec:	2c 98       	cbi	0x05, 4	; 5
	
	// 0 means bubble is finished
	_bubbleOccurring = 0;
     aee:	10 92 42 01 	sts	0x0142, r1
	
	// allow sensing of next bubble
	_readyForBubble = 1;
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	80 93 37 01 	sts	0x0137, r24

	// disable oc1c interrupt
	TIMSK1 &= ~(1 << OCIE1C);
     af8:	ef e6       	ldi	r30, 0x6F	; 111
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	80 81       	ld	r24, Z
     afe:	87 7f       	andi	r24, 0xF7	; 247
     b00:	80 83       	st	Z, r24
}
     b02:	ff 91       	pop	r31
     b04:	ef 91       	pop	r30
     b06:	8f 91       	pop	r24
     b08:	0f 90       	pop	r0
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	0f 90       	pop	r0
     b0e:	1f 90       	pop	r1
     b10:	18 95       	reti

00000b12 <EVENT_USB_Device_Connect>:

// Event handler for the library USB Connection event.
void EVENT_USB_Device_Connect(void)
{
     b12:	08 95       	ret

00000b14 <EVENT_USB_Device_Disconnect>:
}

// Event handler for the library USB Disconnection event.
void EVENT_USB_Device_Disconnect(void)
{
	_fastStreaming = 0;
     b14:	10 92 18 01 	sts	0x0118, r1
     b18:	08 95       	ret

00000b1a <EVENT_USB_Device_ConfigurationChanged>:

// Event handler for the library USB Configuration Changed event.
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;
	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	91 e0       	ldi	r25, 0x01	; 1
     b1e:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     b22:	e2 ee       	ldi	r30, 0xE2	; 226
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	80 81       	ld	r24, Z
     b28:	84 60       	ori	r24, 0x04	; 4
     b2a:	80 83       	st	Z, r24
     b2c:	08 95       	ret

00000b2e <EVENT_USB_Device_ControlRequest>:
}

// Event handler for the library USB Control Request reception event.
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Generic_HID_Interface);
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <HID_Device_ProcessControlRequest>

00000b36 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     b36:	80 91 0e 01 	lds	r24, 0x010E
     b3a:	90 91 0f 01 	lds	r25, 0x010F
     b3e:	00 97       	sbiw	r24, 0x00	; 0
     b40:	29 f0       	breq	.+10     	; 0xb4c <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     b42:	01 97       	sbiw	r24, 0x01	; 1
     b44:	90 93 0f 01 	sts	0x010F, r25
     b48:	80 93 0e 01 	sts	0x010E, r24
     b4c:	08 95       	ret

00000b4e <CALLBACK_HID_Device_CreateHIDReport>:
	HID_Device_MillisecondElapsed(&Generic_HID_Interface);
}

// if _dataReady is set, sends _usbArg* values and clears _dataReady flag
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo, uint8_t* const ReportID, const uint8_t ReportType, void* ReportData, uint16_t* const ReportSize)
{
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
     b52:	f9 01       	movw	r30, r18
	uint8_t* Data = (uint8_t*)ReportData;
	if(_dataReady)
     b54:	80 91 36 01 	lds	r24, 0x0136
     b58:	88 23       	and	r24, r24
     b5a:	09 f1       	breq	.+66     	; 0xb9e <CALLBACK_HID_Device_CreateHIDReport+0x50>
	{
		*ReportSize = GENERIC_REPORT_SIZE;
     b5c:	88 e0       	ldi	r24, 0x08	; 8
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	d8 01       	movw	r26, r16
     b62:	8d 93       	st	X+, r24
     b64:	9c 93       	st	X, r25
		Data[0] = _usbArg0;
     b66:	80 91 22 01 	lds	r24, 0x0122
     b6a:	80 83       	st	Z, r24
		Data[1] = _usbArg1;
     b6c:	80 91 56 01 	lds	r24, 0x0156
     b70:	81 83       	std	Z+1, r24	; 0x01
		Data[2] = _usbArg2;
     b72:	80 91 35 01 	lds	r24, 0x0135
     b76:	82 83       	std	Z+2, r24	; 0x02
		Data[3] = _usbArg3;
     b78:	80 91 3e 01 	lds	r24, 0x013E
     b7c:	83 83       	std	Z+3, r24	; 0x03
		Data[4] = _usbArg4;
     b7e:	80 91 28 01 	lds	r24, 0x0128
     b82:	84 83       	std	Z+4, r24	; 0x04
		Data[5] = _usbArg5;
     b84:	80 91 1b 01 	lds	r24, 0x011B
     b88:	85 83       	std	Z+5, r24	; 0x05
		Data[6] = _usbArg6;
     b8a:	80 91 3c 01 	lds	r24, 0x013C
     b8e:	86 83       	std	Z+6, r24	; 0x06
		Data[7] = _usbArg7;
     b90:	80 91 1a 01 	lds	r24, 0x011A
     b94:	87 83       	std	Z+7, r24	; 0x07
		_dataReady = 0;
     b96:	10 92 36 01 	sts	0x0136, r1
		return true;
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	01 c0       	rjmp	.+2      	; 0xba0 <CALLBACK_HID_Device_CreateHIDReport+0x52>
	}
	return false;
     b9e:	80 e0       	ldi	r24, 0x00	; 0
}
     ba0:	1f 91       	pop	r17
     ba2:	0f 91       	pop	r16
     ba4:	08 95       	ret

00000ba6 <CALLBACK_HID_Device_ProcessHIDReport>:

// Stores _arg* values and starts appropriate action
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo, const uint8_t ReportID, const uint8_t ReportType, const void* ReportData, const uint16_t ReportSize)
{
     ba6:	cf 93       	push	r28
     ba8:	f9 01       	movw	r30, r18
	// store report data
	uint8_t* Data = (uint8_t*)ReportData;
	_usbArg0 = Data[0];
     baa:	80 81       	ld	r24, Z
     bac:	80 93 22 01 	sts	0x0122, r24
	_usbArg1 = Data[1];
     bb0:	61 81       	ldd	r22, Z+1	; 0x01
     bb2:	60 93 56 01 	sts	0x0156, r22
	_usbArg2 = Data[2];
     bb6:	92 81       	ldd	r25, Z+2	; 0x02
     bb8:	90 93 35 01 	sts	0x0135, r25
	_usbArg3 = Data[3];
     bbc:	93 81       	ldd	r25, Z+3	; 0x03
     bbe:	90 93 3e 01 	sts	0x013E, r25
	_usbArg4 = Data[4];
     bc2:	94 81       	ldd	r25, Z+4	; 0x04
     bc4:	90 93 28 01 	sts	0x0128, r25
	_usbArg5 = Data[5];
     bc8:	95 81       	ldd	r25, Z+5	; 0x05
     bca:	90 93 1b 01 	sts	0x011B, r25
	_usbArg6 = Data[6];
     bce:	96 81       	ldd	r25, Z+6	; 0x06
     bd0:	90 93 3c 01 	sts	0x013C, r25
	_usbArg7 = Data[7];
     bd4:	97 81       	ldd	r25, Z+7	; 0x07
     bd6:	90 93 1a 01 	sts	0x011A, r25
	
	// process instruction
	switch(_usbArg0)
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	fc 01       	movw	r30, r24
     bde:	31 97       	sbiw	r30, 0x01	; 1
     be0:	e9 30       	cpi	r30, 0x09	; 9
     be2:	f1 05       	cpc	r31, r1
     be4:	08 f0       	brcs	.+2      	; 0xbe8 <CALLBACK_HID_Device_ProcessHIDReport+0x42>
     be6:	af c0       	rjmp	.+350    	; 0xd46 <CALLBACK_HID_Device_ProcessHIDReport+0x1a0>
     be8:	ea 5a       	subi	r30, 0xAA	; 170
     bea:	ff 4f       	sbci	r31, 0xFF	; 255
     bec:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__tablejump2__>
	{
		case START_FAST_STREAMING :
		{
			_fastStreaming = 1;
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	80 93 18 01 	sts	0x0118, r24
     bf6:	a5 c0       	rjmp	.+330    	; 0xd42 <CALLBACK_HID_Device_ProcessHIDReport+0x19c>
			_dataReady = 1; // echo back the command
			break;
		}
		case STOP_FAST_STREAMING :
		{
			_fastStreaming = 0;
     bf8:	10 92 18 01 	sts	0x0118, r1
     bfc:	a1 c0       	rjmp	.+322    	; 0xd40 <CALLBACK_HID_Device_ProcessHIDReport+0x19a>
			_dataReady = 1; // echo back the command
			break;
		}
		case CLEAR_MEMORY :
		{
			_clearMemoryFlag = 1;
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	80 93 19 01 	sts	0x0119, r24
     c04:	9e c0       	rjmp	.+316    	; 0xd42 <CALLBACK_HID_Device_ProcessHIDReport+0x19c>
			break;
		}
		case READ_MEMORY :
		{
			// flash the record led, turn it off later
			output_high(RECORD_LED_PORT, RECORD_LED_PIN);
     c06:	2d 9a       	sbi	0x05, 5	; 5
			TIMSK0 |= (1 << OCIE0A);
     c08:	80 91 6e 00 	lds	r24, 0x006E
     c0c:	82 60       	ori	r24, 0x02	; 2
     c0e:	80 93 6e 00 	sts	0x006E, r24
			uint16_t addressWord = (_usbArg1 * 256) + _usbArg2;
     c12:	80 91 56 01 	lds	r24, 0x0156
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	98 2f       	mov	r25, r24
     c1a:	88 27       	eor	r24, r24
     c1c:	20 91 35 01 	lds	r18, 0x0135
			Sample sample1 = LC32_ReadSample(addressWord);
     c20:	82 0f       	add	r24, r18
     c22:	91 1d       	adc	r25, r1
     c24:	34 d3       	rcall	.+1640   	; 0x128e <LC32_ReadSample>
     c26:	70 93 3e 01 	sts	0x013E, r23
			_usbArg3 = sample1.temperature / 256;
     c2a:	60 93 28 01 	sts	0x0128, r22
			_usbArg4 = sample1.temperature % 256;
     c2e:	90 93 1b 01 	sts	0x011B, r25
			_usbArg5 = sample1.bubbles / 256;
     c32:	80 93 3c 01 	sts	0x013C, r24
			_usbArg6 = sample1.bubbles % 256;
     c36:	84 c0       	rjmp	.+264    	; 0xd40 <CALLBACK_HID_Device_ProcessHIDReport+0x19a>
     c38:	c0 91 18 01 	lds	r28, 0x0118
			_dataReady = 1; // send back response
			break;
		}
		case SET_CONFIG :
		{
			uint8_t previouslyStreaming = _fastStreaming;
     c3c:	10 92 18 01 	sts	0x0118, r1
			_fastStreaming = 0; // stop fast streaming
     c40:	8a e0       	ldi	r24, 0x0A	; 10
			eeprom_update_byte((uint8_t*)ADC_HIGH_VALUE, _usbArg1);
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 15 14 	call	0x282a	; 0x282a <__eeupd_byte_m32u4>
     c48:	80 91 56 01 	lds	r24, 0x0156
			_adcHighThreshold = _usbArg1;
     c4c:	80 93 32 01 	sts	0x0132, r24
     c50:	60 91 35 01 	lds	r22, 0x0135
			eeprom_update_byte((uint8_t*)ADC_LOW_VALUE, _usbArg2);
     c54:	88 e0       	ldi	r24, 0x08	; 8
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 15 14 	call	0x282a	; 0x282a <__eeupd_byte_m32u4>
     c5c:	80 91 35 01 	lds	r24, 0x0135
			_adcLowThreshold = _usbArg2;
     c60:	80 93 43 01 	sts	0x0143, r24
     c64:	60 91 3e 01 	lds	r22, 0x013E
			eeprom_update_byte((uint8_t*)BUBBLE_DELAY_HIGH, _usbArg3);
     c68:	8e e0       	ldi	r24, 0x0E	; 14
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	0e 94 15 14 	call	0x282a	; 0x282a <__eeupd_byte_m32u4>
     c70:	80 91 3e 01 	lds	r24, 0x013E
			_bubbleDelay = _usbArg3;
     c74:	10 92 1c 01 	sts	0x011C, r1
			_bubbleDelay *= 256;
     c78:	80 93 1d 01 	sts	0x011D, r24
     c7c:	60 91 28 01 	lds	r22, 0x0128
			eeprom_update_byte((uint8_t*)BUBBLE_DELAY_LOW, _usbArg4);
     c80:	8c e0       	ldi	r24, 0x0C	; 12
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	0e 94 15 14 	call	0x282a	; 0x282a <__eeupd_byte_m32u4>
     c88:	20 91 28 01 	lds	r18, 0x0128
			_bubbleDelay += _usbArg4;
     c8c:	80 91 1c 01 	lds	r24, 0x011C
     c90:	90 91 1d 01 	lds	r25, 0x011D
     c94:	82 0f       	add	r24, r18
     c96:	91 1d       	adc	r25, r1
     c98:	90 93 1d 01 	sts	0x011D, r25
     c9c:	80 93 1c 01 	sts	0x011C, r24
     ca0:	81 e0       	ldi	r24, 0x01	; 1
			_dataReady = 1; // send back response
     ca2:	80 93 36 01 	sts	0x0136, r24
     ca6:	c0 93 18 01 	sts	0x0118, r28
			_fastStreaming = previouslyStreaming; // resume fast streaming if we were doing that
     caa:	4d c0       	rjmp	.+154    	; 0xd46 <CALLBACK_HID_Device_ProcessHIDReport+0x1a0>
			break;
     cac:	10 92 18 01 	sts	0x0118, r1
		}
		case GET_CONFIG :
		{
			_fastStreaming = 0; // stop fast streaming
     cb0:	80 91 32 01 	lds	r24, 0x0132
			_usbArg1 = _adcHighThreshold;
     cb4:	80 93 56 01 	sts	0x0156, r24
     cb8:	80 91 43 01 	lds	r24, 0x0143
			_usbArg2 = _adcLowThreshold;
     cbc:	80 93 35 01 	sts	0x0135, r24
     cc0:	80 91 1c 01 	lds	r24, 0x011C
			_usbArg3 = (uint8_t)(_bubbleDelay / 256);
     cc4:	90 91 1d 01 	lds	r25, 0x011D
     cc8:	90 93 3e 01 	sts	0x013E, r25
     ccc:	80 93 28 01 	sts	0x0128, r24
			_usbArg4 = (uint8_t)(_bubbleDelay % 256);
     cd0:	80 91 21 01 	lds	r24, 0x0121
			_usbArg5 = _compactionCount;
     cd4:	80 93 1b 01 	sts	0x011B, r24
     cd8:	80 91 25 01 	lds	r24, 0x0125
			_usbArg6 = (uint8_t)(_nextMemoryPosition / 256);
     cdc:	90 91 26 01 	lds	r25, 0x0126
     ce0:	90 93 3c 01 	sts	0x013C, r25
     ce4:	2b c0       	rjmp	.+86     	; 0xd3c <CALLBACK_HID_Device_ProcessHIDReport+0x196>
     ce6:	91 e0       	ldi	r25, 0x01	; 1
			_dataReady = 1; // send back response
			break;
		}
		case GET_VERSION :
		{
			_usbArg1 = VERSION_MAJOR;
     ce8:	90 93 56 01 	sts	0x0156, r25
     cec:	84 e0       	ldi	r24, 0x04	; 4
			_usbArg2 = VERSION_MINOR;
     cee:	80 93 35 01 	sts	0x0135, r24
     cf2:	83 e6       	ldi	r24, 0x63	; 99
			_usbArg3 = 99;
     cf4:	80 93 3e 01 	sts	0x013E, r24
     cf8:	80 93 28 01 	sts	0x0128, r24
			_usbArg4 = 99;
     cfc:	80 93 1b 01 	sts	0x011B, r24
			_usbArg5 = 99;
     d00:	80 93 3c 01 	sts	0x013C, r24
			_usbArg6 = 99;
     d04:	80 93 1a 01 	sts	0x011A, r24
			_usbArg7 = 99;
     d08:	90 93 36 01 	sts	0x0136, r25
			_dataReady = 1; // send back response
     d0c:	1c c0       	rjmp	.+56     	; 0xd46 <CALLBACK_HID_Device_ProcessHIDReport+0x1a0>
			break;
     d0e:	80 91 21 01 	lds	r24, 0x0121
		}
		case DEBUG_VARIABLES :
		{
			_usbArg1 = _compactionCount;
     d12:	80 93 56 01 	sts	0x0156, r24
     d16:	80 91 2d 01 	lds	r24, 0x012D
			_usbArg2 = _divisorCounter / 256;
     d1a:	90 91 2e 01 	lds	r25, 0x012E
     d1e:	90 93 35 01 	sts	0x0135, r25
     d22:	80 93 3e 01 	sts	0x013E, r24
			_usbArg3 = _divisorCounter % 256;
     d26:	80 91 25 01 	lds	r24, 0x0125
			_usbArg4 = _nextMemoryPosition / 256;
     d2a:	90 91 26 01 	lds	r25, 0x0126
     d2e:	90 93 28 01 	sts	0x0128, r25
     d32:	80 93 1b 01 	sts	0x011B, r24
			_usbArg5 = _nextMemoryPosition % 256;
     d36:	83 e6       	ldi	r24, 0x63	; 99
			_usbArg6 = 99;
     d38:	80 93 3c 01 	sts	0x013C, r24
     d3c:	80 93 1a 01 	sts	0x011A, r24
			_usbArg7 = 99;
     d40:	81 e0       	ldi	r24, 0x01	; 1
			_dataReady = 1; // send back response
     d42:	80 93 36 01 	sts	0x0136, r24
     d46:	cf 91       	pop	r28
			break;
		}
	}
}
     d48:	08 95       	ret

00000d4a <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     d4a:	29 2f       	mov	r18, r25
     d4c:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     d4e:	23 30       	cpi	r18, 0x03	; 3
     d50:	31 05       	cpc	r19, r1
     d52:	b9 f0       	breq	.+46     	; 0xd82 <CALLBACK_USB_GetDescriptor+0x38>
     d54:	5c f4       	brge	.+22     	; 0xd6c <CALLBACK_USB_GetDescriptor+0x22>
     d56:	21 30       	cpi	r18, 0x01	; 1
     d58:	31 05       	cpc	r19, r1
     d5a:	69 f1       	breq	.+90     	; 0xdb6 <CALLBACK_USB_GetDescriptor+0x6c>
     d5c:	22 30       	cpi	r18, 0x02	; 2
     d5e:	31 05       	cpc	r19, r1
     d60:	79 f5       	brne	.+94     	; 0xdc0 <CALLBACK_USB_GetDescriptor+0x76>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     d62:	82 e2       	ldi	r24, 0x22	; 34
     d64:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     d66:	2e e9       	ldi	r18, 0x9E	; 158
     d68:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     d6a:	2e c0       	rjmp	.+92     	; 0xdc8 <CALLBACK_USB_GetDescriptor+0x7e>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     d6c:	21 32       	cpi	r18, 0x21	; 33
     d6e:	31 05       	cpc	r19, r1
     d70:	e9 f0       	breq	.+58     	; 0xdac <CALLBACK_USB_GetDescriptor+0x62>
     d72:	22 32       	cpi	r18, 0x22	; 34
     d74:	31 05       	cpc	r19, r1
     d76:	21 f5       	brne	.+72     	; 0xdc0 <CALLBACK_USB_GetDescriptor+0x76>
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
     d78:	80 e2       	ldi	r24, 0x20	; 32
     d7a:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
     d7c:	22 ed       	ldi	r18, 0xD2	; 210
     d7e:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(GenericReport);
			break;
     d80:	23 c0       	rjmp	.+70     	; 0xdc8 <CALLBACK_USB_GetDescriptor+0x7e>
     d82:	99 27       	eor	r25, r25
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     d84:	81 30       	cpi	r24, 0x01	; 1
     d86:	91 05       	cpc	r25, r1
     d88:	41 f0       	breq	.+16     	; 0xd9a <CALLBACK_USB_GetDescriptor+0x50>
     d8a:	82 30       	cpi	r24, 0x02	; 2
     d8c:	91 05       	cpc	r25, r1
     d8e:	41 f0       	breq	.+16     	; 0xda0 <CALLBACK_USB_GetDescriptor+0x56>
     d90:	89 2b       	or	r24, r25
     d92:	b1 f4       	brne	.+44     	; 0xdc0 <CALLBACK_USB_GetDescriptor+0x76>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     d94:	ea e9       	ldi	r30, 0x9A	; 154
     d96:	f1 e0       	ldi	r31, 0x01	; 1
     d98:	05 c0       	rjmp	.+10     	; 0xda4 <CALLBACK_USB_GetDescriptor+0x5a>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     d9a:	e6 e7       	ldi	r30, 0x76	; 118
     d9c:	f1 e0       	ldi	r31, 0x01	; 1
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <CALLBACK_USB_GetDescriptor+0x5a>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     da0:	e4 e5       	ldi	r30, 0x54	; 84
     da2:	f1 e0       	ldi	r31, 0x01	; 1
     da4:	84 91       	lpm	r24, Z
     da6:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
     da8:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     daa:	0e c0       	rjmp	.+28     	; 0xdc8 <CALLBACK_USB_GetDescriptor+0x7e>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     dac:	89 e0       	ldi	r24, 0x09	; 9
     dae:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
     db0:	20 eb       	ldi	r18, 0xB0	; 176
     db2:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     db4:	09 c0       	rjmp	.+18     	; 0xdc8 <CALLBACK_USB_GetDescriptor+0x7e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     db6:	82 e1       	ldi	r24, 0x12	; 18
     db8:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     dba:	20 ec       	ldi	r18, 0xC0	; 192
     dbc:	31 e0       	ldi	r19, 0x01	; 1
     dbe:	04 c0       	rjmp	.+8      	; 0xdc8 <CALLBACK_USB_GetDescriptor+0x7e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	30 e0       	ldi	r19, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
     dc8:	fa 01       	movw	r30, r20
     dca:	31 83       	std	Z+1, r19	; 0x01
     dcc:	20 83       	st	Z, r18
	return Size;
}
     dce:	08 95       	ret

00000dd0 <ow_input_pin_state>:

#endif

uint8_t ow_input_pin_state()
{
	return OW_GET_IN();
     dd0:	e0 91 5b 01 	lds	r30, 0x015B
     dd4:	f0 91 5c 01 	lds	r31, 0x015C
     dd8:	90 81       	ld	r25, Z
     dda:	80 91 5a 01 	lds	r24, 0x015A
}
     dde:	89 23       	and	r24, r25
     de0:	08 95       	ret

00000de2 <ow_parasite_enable>:

void ow_parasite_enable(void)
{
	OW_OUT_HIGH();
     de2:	e0 91 58 01 	lds	r30, 0x0158
     de6:	f0 91 59 01 	lds	r31, 0x0159
     dea:	80 81       	ld	r24, Z
     dec:	90 91 5a 01 	lds	r25, 0x015A
     df0:	89 2b       	or	r24, r25
     df2:	80 83       	st	Z, r24
	OW_DIR_OUT();
     df4:	e0 91 5d 01 	lds	r30, 0x015D
     df8:	f0 91 5e 01 	lds	r31, 0x015E
     dfc:	80 81       	ld	r24, Z
     dfe:	90 91 5a 01 	lds	r25, 0x015A
     e02:	89 2b       	or	r24, r25
     e04:	80 83       	st	Z, r24
     e06:	08 95       	ret

00000e08 <ow_bit_io_intern>:
   cycles than the constant ones so the delays had to be shortened 
   to achive a 15uS overall delay 
   Setting/clearing a bit in I/O Register needs 1 cyle in OW_ONE_BUS
   but around 14 cyles in configureable bus (us-Delay is 4 cyles per uS) */
static uint8_t ow_bit_io_intern( uint8_t b, uint8_t with_parasite_enable )
{
     e08:	1f 93       	push	r17
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	1f 92       	push	r1
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     e14:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e16:	f8 94       	cli
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_LOW();
#endif
		OW_DIR_OUT();    // drive bus low
     e18:	e0 91 5d 01 	lds	r30, 0x015D
     e1c:	f0 91 5e 01 	lds	r31, 0x015E
     e20:	90 81       	ld	r25, Z
     e22:	20 91 5a 01 	lds	r18, 0x015A
     e26:	92 2b       	or	r25, r18
     e28:	90 83       	st	Z, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e2a:	9a e0       	ldi	r25, 0x0A	; 10
     e2c:	9a 95       	dec	r25
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <ow_bit_io_intern+0x24>
     e30:	00 c0       	rjmp	.+0      	; 0xe32 <ow_bit_io_intern+0x2a>
		_delay_us(2);    // T_INT > 1usec accoding to timing-diagramm
		if ( b ) {
     e32:	88 23       	and	r24, r24
     e34:	51 f0       	breq	.+20     	; 0xe4a <ow_bit_io_intern+0x42>
			OW_DIR_IN(); // to write "1" release bus, resistor pulls high
     e36:	e0 91 5d 01 	lds	r30, 0x015D
     e3a:	f0 91 5e 01 	lds	r31, 0x015E
     e3e:	20 81       	ld	r18, Z
     e40:	90 91 5a 01 	lds	r25, 0x015A
     e44:	90 95       	com	r25
     e46:	92 23       	and	r25, r18
     e48:	90 83       	st	Z, r25
     e4a:	e5 e4       	ldi	r30, 0x45	; 69
     e4c:	ea 95       	dec	r30
     e4e:	f1 f7       	brne	.-4      	; 0xe4c <ow_bit_io_intern+0x44>
     e50:	00 00       	nop
		// edge that initiated the read time slot. Therefore, the master must 
		// release the bus and then sample the bus state within 15ussec from 
		// the start of the slot."
		_delay_us(15-2-OW_CONF_DELAYOFFSET);
		
		if( OW_GET_IN() == 0 ) {
     e52:	e0 91 5b 01 	lds	r30, 0x015B
     e56:	f0 91 5c 01 	lds	r31, 0x015C
     e5a:	90 81       	ld	r25, Z
     e5c:	20 91 5a 01 	lds	r18, 0x015A
     e60:	92 23       	and	r25, r18
     e62:	09 f4       	brne	.+2      	; 0xe66 <ow_bit_io_intern+0x5e>
			b = 0;  // sample at end of read-timeslot
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	f5 ee       	ldi	r31, 0xE5	; 229
     e68:	fa 95       	dec	r31
     e6a:	f1 f7       	brne	.-4      	; 0xe68 <ow_bit_io_intern+0x60>
     e6c:	00 00       	nop
	
		_delay_us(60-15-2+OW_CONF_DELAYOFFSET);
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
#endif
		OW_DIR_IN();
     e6e:	e0 91 5d 01 	lds	r30, 0x015D
     e72:	f0 91 5e 01 	lds	r31, 0x015E
     e76:	20 81       	ld	r18, Z
     e78:	90 91 5a 01 	lds	r25, 0x015A
     e7c:	90 95       	com	r25
     e7e:	92 23       	and	r25, r18
     e80:	90 83       	st	Z, r25
	
		if ( with_parasite_enable ) {
     e82:	66 23       	and	r22, r22
     e84:	19 f0       	breq	.+6      	; 0xe8c <ow_bit_io_intern+0x84>
			ow_parasite_enable();
     e86:	89 83       	std	Y+1, r24	; 0x01
     e88:	ac df       	rcall	.-168    	; 0xde2 <ow_parasite_enable>
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	1f bf       	out	0x3f, r17	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e8e:	9a e6       	ldi	r25, 0x6A	; 106
     e90:	9a 95       	dec	r25
     e92:	f1 f7       	brne	.-4      	; 0xe90 <ow_bit_io_intern+0x88>
     e94:	00 c0       	rjmp	.+0      	; 0xe96 <ow_bit_io_intern+0x8e>
     e96:	0f 90       	pop	r0
	} /* ATOMIC_BLOCK */

	_delay_us(OW_RECOVERY_TIME); // may be increased for longer wires

	return b;
}
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	08 95       	ret

00000ea0 <ow_reset>:
     ea0:	e0 91 58 01 	lds	r30, 0x0158

uint8_t ow_reset(void)
{
	uint8_t err;
	
	OW_OUT_LOW();
     ea4:	f0 91 59 01 	lds	r31, 0x0159
     ea8:	90 81       	ld	r25, Z
     eaa:	80 91 5a 01 	lds	r24, 0x015A
     eae:	80 95       	com	r24
     eb0:	89 23       	and	r24, r25
     eb2:	80 83       	st	Z, r24
	OW_DIR_OUT();            // pull OW-Pin low for 480us
     eb4:	e0 91 5d 01 	lds	r30, 0x015D
     eb8:	f0 91 5e 01 	lds	r31, 0x015E
     ebc:	80 81       	ld	r24, Z
     ebe:	90 91 5a 01 	lds	r25, 0x015A
     ec2:	89 2b       	or	r24, r25
     ec4:	80 83       	st	Z, r24
     ec6:	8f e7       	ldi	r24, 0x7F	; 127
     ec8:	97 e0       	ldi	r25, 0x07	; 7
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	f1 f7       	brne	.-4      	; 0xeca <ow_reset+0x2a>
     ece:	00 c0       	rjmp	.+0      	; 0xed0 <ow_reset+0x30>
     ed0:	00 00       	nop
	_delay_us(480);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     ed2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ed4:	f8 94       	cli
		// set Pin as input - wait for clients to pull low
		OW_DIR_IN(); // input
     ed6:	e0 91 5d 01 	lds	r30, 0x015D
     eda:	f0 91 5e 01 	lds	r31, 0x015E
     ede:	20 81       	ld	r18, Z
     ee0:	80 91 5a 01 	lds	r24, 0x015A
     ee4:	80 95       	com	r24
     ee6:	82 23       	and	r24, r18
     ee8:	80 83       	st	Z, r24
     eea:	ef ef       	ldi	r30, 0xFF	; 255
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	31 97       	sbiw	r30, 0x01	; 1
     ef0:	f1 f7       	brne	.-4      	; 0xeee <ow_reset+0x4e>
     ef2:	00 c0       	rjmp	.+0      	; 0xef4 <ow_reset+0x54>
     ef4:	00 00       	nop
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
#endif
	
		_delay_us(64);       // was 66
		err = OW_GET_IN();   // no presence detect
     ef6:	e0 91 5b 01 	lds	r30, 0x015B
     efa:	f0 91 5c 01 	lds	r31, 0x015C
     efe:	20 81       	ld	r18, Z
     f00:	80 91 5a 01 	lds	r24, 0x015A
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f04:	9f bf       	out	0x3f, r25	; 63
     f06:	ef e7       	ldi	r30, 0x7F	; 127
     f08:	f6 e0       	ldi	r31, 0x06	; 6
     f0a:	31 97       	sbiw	r30, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <ow_reset+0x6a>
     f0e:	00 c0       	rjmp	.+0      	; 0xf10 <ow_reset+0x70>
     f10:	00 00       	nop
	}
	
	// after a delay the clients should release the line
	// and input-pin gets back to high by pull-up-resistor
	_delay_us(480 - 64);       // was 480-66
	if( OW_GET_IN() == 0 ) {
     f12:	e0 91 5b 01 	lds	r30, 0x015B
     f16:	f0 91 5c 01 	lds	r31, 0x015C
     f1a:	90 81       	ld	r25, Z
     f1c:	30 91 5a 01 	lds	r19, 0x015A
     f20:	93 23       	and	r25, r19
     f22:	11 f0       	breq	.+4      	; 0xf28 <ow_reset+0x88>
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
#endif
	
		_delay_us(64);       // was 66
		err = OW_GET_IN();   // no presence detect
     f24:	82 23       	and	r24, r18
     f26:	08 95       	ret
	
	// after a delay the clients should release the line
	// and input-pin gets back to high by pull-up-resistor
	_delay_us(480 - 64);       // was 480-66
	if( OW_GET_IN() == 0 ) {
		err = 1;             // short circuit, expected low but got high
     f28:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return err;
}
     f2a:	08 95       	ret

00000f2c <ow_set_bus>:
void ow_set_bus(volatile uint8_t* in,
	volatile uint8_t* out,
	volatile uint8_t* ddr,
	uint8_t pin)
{
	OW_DDR=ddr;
     f2c:	50 93 5e 01 	sts	0x015E, r21
     f30:	40 93 5d 01 	sts	0x015D, r20
	OW_OUT=out;
     f34:	70 93 59 01 	sts	0x0159, r23
     f38:	60 93 58 01 	sts	0x0158, r22
	OW_IN=in;
     f3c:	90 93 5c 01 	sts	0x015C, r25
     f40:	80 93 5b 01 	sts	0x015B, r24
	OW_PIN_MASK = (1 << pin);
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	01 c0       	rjmp	.+2      	; 0xf4a <ow_set_bus+0x1e>
     f48:	88 0f       	add	r24, r24
     f4a:	2a 95       	dec	r18
     f4c:	ea f7       	brpl	.-6      	; 0xf48 <ow_set_bus+0x1c>
     f4e:	80 93 5a 01 	sts	0x015A, r24
	ow_reset();
     f52:	a6 cf       	rjmp	.-180    	; 0xea0 <ow_reset>

00000f54 <ow_bit_io>:
     f54:	60 e0       	ldi	r22, 0x00	; 0
	return b;
}

uint8_t ow_bit_io( uint8_t b )
{
	return ow_bit_io_intern( b & 1, 0 );
     f56:	81 70       	andi	r24, 0x01	; 1
     f58:	57 cf       	rjmp	.-338    	; 0xe08 <ow_bit_io_intern>

00000f5a <ow_byte_wr>:
     f5a:	cf 93       	push	r28
}

uint8_t ow_byte_wr( uint8_t b )
{
     f5c:	df 93       	push	r29
     f5e:	c8 2f       	mov	r28, r24
     f60:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t i = 8, j;
	
	do {
		j = ow_bit_io( b & 1 );
     f62:	8c 2f       	mov	r24, r28
     f64:	81 70       	andi	r24, 0x01	; 1
     f66:	f6 df       	rcall	.-20     	; 0xf54 <ow_bit_io>
     f68:	c6 95       	lsr	r28
		b >>= 1;
     f6a:	81 11       	cpse	r24, r1
		if( j ) {
     f6c:	c0 68       	ori	r28, 0x80	; 128
			b |= 0x80;
     f6e:	d1 50       	subi	r29, 0x01	; 1
     f70:	c1 f7       	brne	.-16     	; 0xf62 <ow_byte_wr+0x8>
		}
	} while( --i );
     f72:	8c 2f       	mov	r24, r28
	
	return b;
}
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	08 95       	ret

00000f7a <ow_byte_wr_with_parasite_enable>:
     f7a:	cf 93       	push	r28

uint8_t ow_byte_wr_with_parasite_enable( uint8_t b )
{
     f7c:	df 93       	push	r29
     f7e:	c8 2f       	mov	r28, r24
	uint8_t i = 8, j;
     f80:	d8 e0       	ldi	r29, 0x08	; 8
     f82:	8c 2f       	mov	r24, r28
     f84:	81 70       	andi	r24, 0x01	; 1
	
	do {
		if ( i != 1 ) {
     f86:	d1 30       	cpi	r29, 0x01	; 1
     f88:	11 f0       	breq	.+4      	; 0xf8e <ow_byte_wr_with_parasite_enable+0x14>
			j = ow_bit_io_intern( b & 1, 0 );
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	01 c0       	rjmp	.+2      	; 0xf90 <ow_byte_wr_with_parasite_enable+0x16>
		} else {
			j = ow_bit_io_intern( b & 1, 1 );
     f8e:	61 e0       	ldi	r22, 0x01	; 1
     f90:	3b df       	rcall	.-394    	; 0xe08 <ow_bit_io_intern>
     f92:	c6 95       	lsr	r28
		}
		b >>= 1;
     f94:	81 11       	cpse	r24, r1
		if( j ) {
     f96:	c0 68       	ori	r28, 0x80	; 128
			b |= 0x80;
     f98:	d1 50       	subi	r29, 0x01	; 1
		}
	} while( --i );
     f9a:	99 f7       	brne	.-26     	; 0xf82 <ow_byte_wr_with_parasite_enable+0x8>
     f9c:	8c 2f       	mov	r24, r28
	
	return b;
}
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	08 95       	ret

00000fa4 <ow_command_intern>:
     fa4:	ef 92       	push	r14
	return next_diff;                   // to continue search
}


static void ow_command_intern( uint8_t command, uint8_t *id, uint8_t with_parasite_enable )
{
     fa6:	ff 92       	push	r15
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	f8 2e       	mov	r15, r24
     fb2:	eb 01       	movw	r28, r22
     fb4:	e4 2e       	mov	r14, r20
	uint8_t i;

	ow_reset();
     fb6:	74 df       	rcall	.-280    	; 0xea0 <ow_reset>
     fb8:	20 97       	sbiw	r28, 0x00	; 0

	if( id ) {
     fba:	59 f0       	breq	.+22     	; 0xfd2 <ow_command_intern+0x2e>
     fbc:	85 e5       	ldi	r24, 0x55	; 85
		ow_byte_wr( OW_MATCH_ROM );     // to a single device
     fbe:	cd df       	rcall	.-102    	; 0xf5a <ow_byte_wr>
     fc0:	8e 01       	movw	r16, r28
     fc2:	08 5f       	subi	r16, 0xF8	; 248
     fc4:	1f 4f       	sbci	r17, 0xFF	; 255
     fc6:	89 91       	ld	r24, Y+
     fc8:	c8 df       	rcall	.-112    	; 0xf5a <ow_byte_wr>
		i = OW_ROMCODE_SIZE;
		do {
			ow_byte_wr( *id );
     fca:	c0 17       	cp	r28, r16
     fcc:	d1 07       	cpc	r29, r17
     fce:	d9 f7       	brne	.-10     	; 0xfc6 <ow_command_intern+0x22>
			id++;
		} while( --i );
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <ow_command_intern+0x32>
     fd2:	8c ec       	ldi	r24, 0xCC	; 204
     fd4:	c2 df       	rcall	.-124    	; 0xf5a <ow_byte_wr>
     fd6:	8f 2d       	mov	r24, r15
	} 
	else {
		ow_byte_wr( OW_SKIP_ROM );      // to all devices
     fd8:	ee 20       	and	r14, r14
     fda:	39 f0       	breq	.+14     	; 0xfea <ow_command_intern+0x46>
     fdc:	df 91       	pop	r29
	}
	
	if ( with_parasite_enable  ) {
		ow_byte_wr_with_parasite_enable( command );
     fde:	cf 91       	pop	r28
	} 
	else {
		ow_byte_wr( OW_SKIP_ROM );      // to all devices
	}
	
	if ( with_parasite_enable  ) {
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
		ow_byte_wr_with_parasite_enable( command );
	} else {
		ow_byte_wr( command );
	}
}
     fe4:	ff 90       	pop	r15
     fe6:	ef 90       	pop	r14
     fe8:	c8 cf       	rjmp	.-112    	; 0xf7a <ow_byte_wr_with_parasite_enable>
     fea:	df 91       	pop	r29
     fec:	cf 91       	pop	r28
     fee:	1f 91       	pop	r17
	else {
		ow_byte_wr( OW_SKIP_ROM );      // to all devices
	}
	
	if ( with_parasite_enable  ) {
		ow_byte_wr_with_parasite_enable( command );
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
	} else {
		ow_byte_wr( command );
	}
}
     ff4:	ef 90       	pop	r14
     ff6:	b1 cf       	rjmp	.-158    	; 0xf5a <ow_byte_wr>

00000ff8 <ow_byte_rd>:
     ff8:	8f ef       	ldi	r24, 0xFF	; 255
     ffa:	af cf       	rjmp	.-162    	; 0xf5a <ow_byte_wr>

00000ffc <ow_command>:
     ffc:	40 e0       	ldi	r20, 0x00	; 0
     ffe:	d2 cf       	rjmp	.-92     	; 0xfa4 <ow_command_intern>

00001000 <ow_command_with_parasite_enable>:
	}
	
	if ( with_parasite_enable  ) {
		ow_byte_wr_with_parasite_enable( command );
	} else {
		ow_byte_wr( command );
    1000:	41 e0       	ldi	r20, 0x01	; 1
    1002:	d0 cf       	rjmp	.-96     	; 0xfa4 <ow_command_intern>

00001004 <read_scratchpad.constprop.0>:
uint8_t DS18X20_conversion_in_progress(void)
{
	return ow_bit_io( 1 ) ? DS18X20_CONVERSION_DONE : DS18X20_CONVERTING;
}

static uint8_t read_scratchpad( uint8_t id[], uint8_t sp[], uint8_t n )
    1004:	ff 92       	push	r15
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	06 2f       	mov	r16, r22
    1010:	f7 2e       	mov	r15, r23
{
	uint8_t i;
	uint8_t ret;

	ow_command( DS18X20_READ, id );
    1012:	bc 01       	movw	r22, r24
    1014:	8e eb       	ldi	r24, 0xBE	; 190
    1016:	f2 df       	rcall	.-28     	; 0xffc <ow_command>
    1018:	c0 2f       	mov	r28, r16
    101a:	df 2d       	mov	r29, r15
    101c:	19 e0       	ldi	r17, 0x09	; 9
    101e:	ec df       	rcall	.-40     	; 0xff8 <ow_byte_rd>
	for ( i = 0; i < n; i++ ) {
		sp[i] = ow_byte_rd();
    1020:	89 93       	st	Y+, r24
    1022:	11 50       	subi	r17, 0x01	; 1
    1024:	e1 f7       	brne	.-8      	; 0x101e <read_scratchpad.constprop.0+0x1a>
    1026:	69 e0       	ldi	r22, 0x09	; 9
{
	uint8_t i;
	uint8_t ret;

	ow_command( DS18X20_READ, id );
	for ( i = 0; i < n; i++ ) {
    1028:	70 e0       	ldi	r23, 0x00	; 0
		sp[i] = ow_byte_rd();
	}
	if ( crc8( &sp[0], DS18X20_SP_SIZE ) ) {
    102a:	80 2f       	mov	r24, r16
    102c:	9f 2d       	mov	r25, r15
    102e:	4e d0       	rcall	.+156    	; 0x10cc <crc8>
    1030:	88 23       	and	r24, r24
    1032:	11 f0       	breq	.+4      	; 0x1038 <read_scratchpad.constprop.0+0x34>
    1034:	83 e0       	ldi	r24, 0x03	; 3
    1036:	01 c0       	rjmp	.+2      	; 0x103a <read_scratchpad.constprop.0+0x36>
    1038:	80 e0       	ldi	r24, 0x00	; 0
		ret = DS18X20_ERROR_CRC;
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
	} else {
		ret = DS18X20_OK;
    103e:	1f 91       	pop	r17
	}

	return ret;
}
    1040:	0f 91       	pop	r16
    1042:	ff 90       	pop	r15
    1044:	08 95       	ret

00001046 <DS18X20_start_meas>:
    1046:	1f 93       	push	r17
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
}

/* start measurement (CONVERT_T) for all sensors if input id==NULL 
   or for single sensor where id is the rom-code */
uint8_t DS18X20_start_meas( uint8_t with_power_extern, uint8_t id[])
{
    104c:	00 d0       	rcall	.+0      	; 0x104e <DS18X20_start_meas+0x8>
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	18 2f       	mov	r17, r24
	uint8_t ret;

	ow_reset();
    1054:	69 83       	std	Y+1, r22	; 0x01
    1056:	7a 83       	std	Y+2, r23	; 0x02
    1058:	23 df       	rcall	.-442    	; 0xea0 <ow_reset>
    105a:	ba de       	rcall	.-652    	; 0xdd0 <ow_input_pin_state>
	if( ow_input_pin_state() ) { // only send if bus is "idle" = high
    105c:	69 81       	ldd	r22, Y+1	; 0x01
    105e:	7a 81       	ldd	r23, Y+2	; 0x02
    1060:	88 23       	and	r24, r24
    1062:	41 f0       	breq	.+16     	; 0x1074 <DS18X20_start_meas+0x2e>
    1064:	84 e4       	ldi	r24, 0x44	; 68
    1066:	11 30       	cpi	r17, 0x01	; 1
		if ( with_power_extern != DS18X20_POWER_EXTERN ) {
			ow_command_with_parasite_enable( DS18X20_CONVERT_T, id );
    1068:	11 f0       	breq	.+4      	; 0x106e <DS18X20_start_meas+0x28>
{
	uint8_t ret;

	ow_reset();
	if( ow_input_pin_state() ) { // only send if bus is "idle" = high
		if ( with_power_extern != DS18X20_POWER_EXTERN ) {
    106a:	ca df       	rcall	.-108    	; 0x1000 <ow_command_with_parasite_enable>
    106c:	01 c0       	rjmp	.+2      	; 0x1070 <DS18X20_start_meas+0x2a>
			ow_command_with_parasite_enable( DS18X20_CONVERT_T, id );
    106e:	c6 df       	rcall	.-116    	; 0xffc <ow_command>
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	01 c0       	rjmp	.+2      	; 0x1076 <DS18X20_start_meas+0x30>
			/* not longer needed: ow_parasite_enable(); */
		} else {
			ow_command( DS18X20_CONVERT_T, id );
    1074:	82 e0       	ldi	r24, 0x02	; 2
    1076:	0f 90       	pop	r0
		}
		ret = DS18X20_OK;
    1078:	0f 90       	pop	r0
    107a:	df 91       	pop	r29
	} 
	else { 
		// DS18X20_start_meas: Short Circuit!
		ret = DS18X20_START_FAIL;
    107c:	cf 91       	pop	r28
	}

	return ret;
}
    107e:	1f 91       	pop	r17
    1080:	08 95       	ret

00001082 <DS18X20_read_raw_single>:
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
	return ret;
}

// just give me the data, let me do the math in c# land.
uint16_t DS18X20_read_raw_single()
{
    108a:	29 97       	sbiw	r28, 0x09	; 9
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
	uint8_t sp[DS18X20_SP_SIZE];
	
	// fill the scratchpad with glorious raw data
	if (read_scratchpad( NULL, sp, DS18X20_SP_SIZE ) != DS18X20_OK ) 
    1096:	be 01       	movw	r22, r28
    1098:	6f 5f       	subi	r22, 0xFF	; 255
    109a:	7f 4f       	sbci	r23, 0xFF	; 255
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	b1 df       	rcall	.-158    	; 0x1004 <read_scratchpad.constprop.0>
    10a2:	81 11       	cpse	r24, r1
    10a4:	08 c0       	rjmp	.+16     	; 0x10b6 <DS18X20_read_raw_single+0x34>
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
	{
		return 0;		
	}
		
	uint16_t rawTemp = (sp[1] * 256) + sp[0];
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	98 2f       	mov	r25, r24
    10ac:	88 27       	eor	r24, r24
    10ae:	29 81       	ldd	r18, Y+1	; 0x01
    10b0:	82 0f       	add	r24, r18
    10b2:	91 1d       	adc	r25, r1
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <DS18X20_read_raw_single+0x38>
	return rawTemp;
    10b6:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t sp[DS18X20_SP_SIZE];
	
	// fill the scratchpad with glorious raw data
	if (read_scratchpad( NULL, sp, DS18X20_SP_SIZE ) != DS18X20_OK ) 
	{
		return 0;		
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	29 96       	adiw	r28, 0x09	; 9
	}
		
	uint16_t rawTemp = (sp[1] * 256) + sp[0];
	return rawTemp;
}
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	08 95       	ret

000010cc <crc8>:

#define CRC8INIT    0x00
#define CRC8POLY    0x18              //0X18 = X^8+X^5+X^4+X^0

uint8_t crc8( uint8_t *data, uint16_t number_of_bytes_in_data )
{
    10cc:	fc 01       	movw	r30, r24
    10ce:	68 0f       	add	r22, r24
    10d0:	79 1f       	adc	r23, r25
	uint16_t loop_count;
	uint8_t  bit_counter;
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;
    10d2:	80 e0       	ldi	r24, 0x00	; 0
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ b) & 0x01;
	
			if ( feedback_bit == 0x01 ) {
				crc = crc ^ CRC8POLY;
    10d4:	48 e1       	ldi	r20, 0x18	; 24
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
    10d6:	e6 17       	cp	r30, r22
    10d8:	f7 07       	cpc	r31, r23
    10da:	81 f0       	breq	.+32     	; 0x10fc <crc8+0x30>
	{
		b = data[loop_count];
    10dc:	21 91       	ld	r18, Z+
    10de:	98 e0       	ldi	r25, 0x08	; 8
		
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ b) & 0x01;
    10e0:	32 2f       	mov	r19, r18
    10e2:	38 27       	eor	r19, r24
	
			if ( feedback_bit == 0x01 ) {
    10e4:	53 2f       	mov	r21, r19
    10e6:	51 70       	andi	r21, 0x01	; 1
    10e8:	30 fd       	sbrc	r19, 0
				crc = crc ^ CRC8POLY;
    10ea:	84 27       	eor	r24, r20
			}
			crc = (crc >> 1) & 0x7F;
    10ec:	86 95       	lsr	r24
			if ( feedback_bit == 0x01 ) {
    10ee:	51 30       	cpi	r21, 0x01	; 1
    10f0:	09 f4       	brne	.+2      	; 0x10f4 <crc8+0x28>
				crc = crc | 0x80;
    10f2:	80 68       	ori	r24, 0x80	; 128
			}
		
			b = b >> 1;
    10f4:	26 95       	lsr	r18
    10f6:	91 50       	subi	r25, 0x01	; 1
			bit_counter--;
		
		} while (bit_counter > 0);
    10f8:	99 f7       	brne	.-26     	; 0x10e0 <crc8+0x14>
    10fa:	ed cf       	rjmp	.-38     	; 0x10d6 <crc8+0xa>
	}
	
	return crc;
}
    10fc:	08 95       	ret

000010fe <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    10fe:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    1102:	88 e4       	ldi	r24, 0x48	; 72
    1104:	80 93 b8 00 	sts	0x00B8, r24
    1108:	08 95       	ret

0000110a <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    110a:	94 ea       	ldi	r25, 0xA4	; 164
    110c:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)))	{}
    1110:	90 91 bc 00 	lds	r25, 0x00BC
    1114:	97 ff       	sbrs	r25, 7
    1116:	fc cf       	rjmp	.-8      	; 0x1110 <i2c_start+0x6>
	
	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1118:	90 91 b9 00 	lds	r25, 0x00B9
    111c:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    111e:	98 30       	cpi	r25, 0x08	; 8
    1120:	21 f0       	breq	.+8      	; 0x112a <i2c_start+0x20>
    1122:	90 31       	cpi	r25, 0x10	; 16
    1124:	11 f0       	breq	.+4      	; 0x112a <i2c_start+0x20>
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	08 95       	ret

	// send device address
	TWDR = address;
    112a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    112e:	84 e8       	ldi	r24, 0x84	; 132
    1130:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1134:	80 91 bc 00 	lds	r24, 0x00BC
    1138:	87 ff       	sbrs	r24, 7
    113a:	fc cf       	rjmp	.-8      	; 0x1134 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    113c:	80 91 b9 00 	lds	r24, 0x00B9
    1140:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    1142:	88 31       	cpi	r24, 0x18	; 24
    1144:	11 f0       	breq	.+4      	; 0x114a <i2c_start+0x40>
    1146:	80 34       	cpi	r24, 0x40	; 64
    1148:	71 f7       	brne	.-36     	; 0x1126 <i2c_start+0x1c>

	return 0;
    114a:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    114c:	08 95       	ret

0000114e <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    114e:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1150:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1152:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1154:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1158:	90 91 bc 00 	lds	r25, 0x00BC
    115c:	97 ff       	sbrs	r25, 7
    115e:	fc cf       	rjmp	.-8      	; 0x1158 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1160:	90 91 b9 00 	lds	r25, 0x00B9
    1164:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    1166:	98 30       	cpi	r25, 0x08	; 8
    1168:	11 f0       	breq	.+4      	; 0x116e <i2c_start_wait+0x20>
    116a:	90 31       	cpi	r25, 0x10	; 16
    116c:	99 f7       	brne	.-26     	; 0x1154 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    116e:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1172:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1176:	90 91 bc 00 	lds	r25, 0x00BC
    117a:	97 ff       	sbrs	r25, 7
    117c:	fc cf       	rjmp	.-8      	; 0x1176 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    117e:	90 91 b9 00 	lds	r25, 0x00B9
    1182:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    1184:	90 32       	cpi	r25, 0x20	; 32
    1186:	11 f0       	breq	.+4      	; 0x118c <i2c_start_wait+0x3e>
    1188:	98 35       	cpi	r25, 0x58	; 88
    118a:	39 f4       	brne	.+14     	; 0x119a <i2c_start_wait+0x4c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    118c:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    1190:	90 91 bc 00 	lds	r25, 0x00BC
    1194:	94 fd       	sbrc	r25, 4
    1196:	fc cf       	rjmp	.-8      	; 0x1190 <i2c_start_wait+0x42>
    1198:	dd cf       	rjmp	.-70     	; 0x1154 <i2c_start_wait+0x6>
    119a:	08 95       	ret

0000119c <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    119c:	b6 cf       	rjmp	.-148    	; 0x110a <i2c_start>

0000119e <i2c_stop>:
    119e:	84 e9       	ldi	r24, 0x94	; 148
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    11a0:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    11a4:	80 91 bc 00 	lds	r24, 0x00BC
    11a8:	84 fd       	sbrc	r24, 4
    11aa:	fc cf       	rjmp	.-8      	; 0x11a4 <i2c_stop+0x6>

}/* i2c_stop */
    11ac:	08 95       	ret

000011ae <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    11ae:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    11b2:	84 e8       	ldi	r24, 0x84	; 132
    11b4:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    11b8:	80 91 bc 00 	lds	r24, 0x00BC
    11bc:	87 ff       	sbrs	r24, 7
    11be:	fc cf       	rjmp	.-8      	; 0x11b8 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    11c0:	90 91 b9 00 	lds	r25, 0x00B9
    11c4:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	98 32       	cpi	r25, 0x28	; 40
    11ca:	09 f4       	brne	.+2      	; 0x11ce <i2c_write+0x20>
    11cc:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    11ce:	08 95       	ret

000011d0 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    11d0:	84 ec       	ldi	r24, 0xC4	; 196
    11d2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    11d6:	80 91 bc 00 	lds	r24, 0x00BC
    11da:	87 ff       	sbrs	r24, 7
    11dc:	fc cf       	rjmp	.-8      	; 0x11d6 <i2c_readAck+0x6>

    return TWDR;
    11de:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    11e2:	08 95       	ret

000011e4 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    11e4:	84 e8       	ldi	r24, 0x84	; 132
    11e6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    11ea:	80 91 bc 00 	lds	r24, 0x00BC
    11ee:	87 ff       	sbrs	r24, 7
    11f0:	fc cf       	rjmp	.-8      	; 0x11ea <i2c_readNak+0x6>
	
    return TWDR;
    11f2:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    11f6:	08 95       	ret

000011f8 <LC32_Init>:
#include "memory.h"
#include "i2cmaster.h"

void LC32_Init(void)
{
	i2c_init();
    11f8:	82 cf       	rjmp	.-252    	; 0x10fe <i2c_init>

000011fa <LC32_Clear>:
    11fa:	1f 93       	push	r17
}

void LC32_Clear(void)
{	
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	c0 e0       	ldi	r28, 0x00	; 0
    1202:	d0 e0       	ldi	r29, 0x00	; 0
	// break up the address into bytes
	for (uint16_t i = 0; i < 128; i++)
	{		
		// set device address and write mode
		i2c_start_wait(LC32_ADDRESS + I2C_WRITE);
    1204:	80 ea       	ldi	r24, 0xA0	; 160
    1206:	a3 df       	rcall	.-186    	; 0x114e <i2c_start_wait>
    1208:	8d 2f       	mov	r24, r29
		// calculate address bytes
		uint8_t addressh = (uint8_t)((i * 32) / 256);
		uint8_t addressl = (uint8_t)((i * 32) % 256);
		
		// send address
		i2c_write(addressh);
    120a:	d1 df       	rcall	.-94     	; 0x11ae <i2c_write>
    120c:	8c 2f       	mov	r24, r28
    120e:	cf df       	rcall	.-98     	; 0x11ae <i2c_write>
		i2c_write(addressl);
    1210:	18 e0       	ldi	r17, 0x08	; 8
    1212:	8f ef       	ldi	r24, 0xFF	; 255
    1214:	cc df       	rcall	.-104    	; 0x11ae <i2c_write>
    1216:	8f ef       	ldi	r24, 0xFF	; 255
		
		// send data
		for(uint8_t j = 0; j < 8; j++)
		{
			i2c_write(0xFF);//th
    1218:	ca df       	rcall	.-108    	; 0x11ae <i2c_write>
    121a:	8f ef       	ldi	r24, 0xFF	; 255
    121c:	c8 df       	rcall	.-112    	; 0x11ae <i2c_write>
			i2c_write(0xFF);//tl
    121e:	8f ef       	ldi	r24, 0xFF	; 255
    1220:	c6 df       	rcall	.-116    	; 0x11ae <i2c_write>
    1222:	11 50       	subi	r17, 0x01	; 1
			i2c_write(0xFF);//bh
    1224:	b1 f7       	brne	.-20     	; 0x1212 <LC32_Clear+0x18>
    1226:	bb df       	rcall	.-138    	; 0x119e <i2c_stop>
    1228:	a0 96       	adiw	r28, 0x20	; 32
			i2c_write(0xFF);//bl
    122a:	c1 15       	cp	r28, r1
    122c:	80 e1       	ldi	r24, 0x10	; 16
    122e:	d8 07       	cpc	r29, r24
    1230:	49 f7       	brne	.-46     	; 0x1204 <LC32_Clear+0xa>
		// send address
		i2c_write(addressh);
		i2c_write(addressl);
		
		// send data
		for(uint8_t j = 0; j < 8; j++)
    1232:	df 91       	pop	r29
			i2c_write(0xFF);//bh
			i2c_write(0xFF);//bl
		}
		
		// set stop condition = release bus
		i2c_stop();
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	08 95       	ret

0000123a <LC32_WriteSample>:
}

void LC32_Clear(void)
{	
	// break up the address into bytes
	for (uint16_t i = 0; i < 128; i++)
    123a:	1f 93       	push	r17
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	00 d0       	rcall	.+0      	; 0x1242 <LC32_WriteSample+0x8>
		}
		
		// set stop condition = release bus
		i2c_stop();
	}
}
    1242:	00 d0       	rcall	.+0      	; 0x1244 <LC32_WriteSample+0xa>
    1244:	1f 92       	push	r1
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62

void LC32_WriteSample(uint16_t address, Sample sample)
{
    124a:	18 2f       	mov	r17, r24
	// set device address and write mode
	i2c_start_wait(LC32_ADDRESS + I2C_WRITE);
    124c:	80 ea       	ldi	r24, 0xA0	; 160
    124e:	4b 83       	std	Y+3, r20	; 0x03
    1250:	5a 83       	std	Y+2, r21	; 0x02
    1252:	6d 83       	std	Y+5, r22	; 0x05
    1254:	7c 83       	std	Y+4, r23	; 0x04
    1256:	99 83       	std	Y+1, r25	; 0x01
    1258:	7a df       	rcall	.-268    	; 0x114e <i2c_start_wait>
    125a:	99 81       	ldd	r25, Y+1	; 0x01
	// break up the address into bytes
	uint8_t addressh = address / 256;
	uint8_t addressl = address % 256;
	
	// send address
	i2c_write(addressh);
    125c:	89 2f       	mov	r24, r25
    125e:	a7 df       	rcall	.-178    	; 0x11ae <i2c_write>
    1260:	81 2f       	mov	r24, r17
    1262:	a5 df       	rcall	.-182    	; 0x11ae <i2c_write>
	i2c_write(addressl);
    1264:	5a 81       	ldd	r21, Y+2	; 0x02
    1266:	85 2f       	mov	r24, r21
    1268:	a2 df       	rcall	.-188    	; 0x11ae <i2c_write>
	
	// send data
	i2c_write(sample.temperature / 256);
    126a:	4b 81       	ldd	r20, Y+3	; 0x03
    126c:	84 2f       	mov	r24, r20
    126e:	9f df       	rcall	.-194    	; 0x11ae <i2c_write>
    1270:	7c 81       	ldd	r23, Y+4	; 0x04
	i2c_write(sample.temperature % 256);
    1272:	87 2f       	mov	r24, r23
    1274:	9c df       	rcall	.-200    	; 0x11ae <i2c_write>
    1276:	6d 81       	ldd	r22, Y+5	; 0x05
    1278:	86 2f       	mov	r24, r22
	i2c_write(sample.bubbles / 256);
    127a:	99 df       	rcall	.-206    	; 0x11ae <i2c_write>
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
	i2c_write(sample.bubbles % 256);
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
	
	// set stop condition = release bus
	i2c_stop();
}
    128a:	1f 91       	pop	r17
    128c:	88 cf       	rjmp	.-240    	; 0x119e <i2c_stop>

0000128e <LC32_ReadSample>:
    128e:	ef 92       	push	r14
    1290:	ff 92       	push	r15
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
	i2c_write(sample.temperature % 256);
	i2c_write(sample.bubbles / 256);
	i2c_write(sample.bubbles % 256);
	
	// set stop condition = release bus
	i2c_stop();
    129a:	1f 92       	push	r1
    129c:	cd b7       	in	r28, 0x3d	; 61

	return dataResponse;
}

Sample LC32_ReadSample(uint16_t address)
{
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	18 2f       	mov	r17, r24
	// set device address and write mode
	i2c_start_wait(LC32_ADDRESS + I2C_WRITE);
    12a2:	80 ea       	ldi	r24, 0xA0	; 160
    12a4:	99 83       	std	Y+1, r25	; 0x01
    12a6:	53 df       	rcall	.-346    	; 0x114e <i2c_start_wait>
    12a8:	99 81       	ldd	r25, Y+1	; 0x01
	// break up the address into bytes
	uint8_t addressh = address / 256;
	uint8_t addressl = address % 256;
	
	// send address
	i2c_write(addressh);
    12aa:	89 2f       	mov	r24, r25
    12ac:	80 df       	rcall	.-256    	; 0x11ae <i2c_write>
    12ae:	81 2f       	mov	r24, r17
    12b0:	7e df       	rcall	.-260    	; 0x11ae <i2c_write>
	i2c_write(addressl);
    12b2:	81 ea       	ldi	r24, 0xA1	; 161
    12b4:	73 df       	rcall	.-282    	; 0x119c <i2c_rep_start>
    12b6:	8c df       	rcall	.-232    	; 0x11d0 <i2c_readAck>
		
	// initiate read
	i2c_rep_start(LC32_ADDRESS + I2C_READ);	
    12b8:	08 2f       	mov	r16, r24
    12ba:	8a df       	rcall	.-236    	; 0x11d0 <i2c_readAck>
    12bc:	10 e0       	ldi	r17, 0x00	; 0
	
	// read data
	Sample sample;
	sample.temperature = i2c_readAck() * 256;
    12be:	10 2f       	mov	r17, r16
    12c0:	00 27       	eor	r16, r16
    12c2:	08 0f       	add	r16, r24
	sample.temperature += i2c_readAck();
    12c4:	11 1d       	adc	r17, r1
    12c6:	84 df       	rcall	.-248    	; 0x11d0 <i2c_readAck>
	// initiate read
	i2c_rep_start(LC32_ADDRESS + I2C_READ);	
	
	// read data
	Sample sample;
	sample.temperature = i2c_readAck() * 256;
    12c8:	e8 2e       	mov	r14, r24
    12ca:	8c df       	rcall	.-232    	; 0x11e4 <i2c_readNak>
    12cc:	f1 2c       	mov	r15, r1
	sample.temperature += i2c_readAck();
    12ce:	fe 2c       	mov	r15, r14
    12d0:	ee 24       	eor	r14, r14
	sample.bubbles = i2c_readAck() * 256;
    12d2:	e8 0e       	add	r14, r24
    12d4:	f1 1c       	adc	r15, r1
    12d6:	63 df       	rcall	.-314    	; 0x119e <i2c_stop>
	sample.bubbles += i2c_readNak();
    12d8:	b8 01       	movw	r22, r16
    12da:	c7 01       	movw	r24, r14
	
	// read data
	Sample sample;
	sample.temperature = i2c_readAck() * 256;
	sample.temperature += i2c_readAck();
	sample.bubbles = i2c_readAck() * 256;
    12dc:	0f 90       	pop	r0
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
	sample.bubbles += i2c_readNak();
    12e2:	1f 91       	pop	r17
    12e4:	0f 91       	pop	r16
	
	// set stop condition to release bus
	i2c_stop(); 
    12e6:	ff 90       	pop	r15
    12e8:	ef 90       	pop	r14
	
	return sample;
    12ea:	08 95       	ret

000012ec <LC32_WritePage>:
    12ec:	ef 92       	push	r14
}
    12ee:	ff 92       	push	r15
    12f0:	0f 93       	push	r16
    12f2:	1f 93       	push	r17
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <LC32_WritePage+0xe>
    12fa:	1f 92       	push	r1
    12fc:	cd b7       	in	r28, 0x3d	; 61

void LC32_WritePage(uint16_t address, Sample samples[])
{
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	18 2f       	mov	r17, r24
	// set device address and write mode
	i2c_start_wait(LC32_ADDRESS + I2C_WRITE);
    1302:	80 ea       	ldi	r24, 0xA0	; 160
    1304:	6a 83       	std	Y+2, r22	; 0x02
    1306:	7b 83       	std	Y+3, r23	; 0x03
    1308:	99 83       	std	Y+1, r25	; 0x01
    130a:	21 df       	rcall	.-446    	; 0x114e <i2c_start_wait>
    130c:	99 81       	ldd	r25, Y+1	; 0x01
	// break up the address into bytes
	uint8_t addressh = address / 256;
	uint8_t addressl = address % 256;
	
	// send address
	i2c_write(addressh);
    130e:	89 2f       	mov	r24, r25
    1310:	4e df       	rcall	.-356    	; 0x11ae <i2c_write>
    1312:	81 2f       	mov	r24, r17
    1314:	4c df       	rcall	.-360    	; 0x11ae <i2c_write>
	i2c_write(addressl);
    1316:	6a 81       	ldd	r22, Y+2	; 0x02
    1318:	e6 2e       	mov	r14, r22
    131a:	7b 81       	ldd	r23, Y+3	; 0x03
    131c:	f7 2e       	mov	r15, r23
    131e:	00 e0       	ldi	r16, 0x00	; 0
    1320:	10 e0       	ldi	r17, 0x00	; 0
    1322:	f7 01       	movw	r30, r14
		
	// send data
	for(int i = 0; i < 8; i++)
    1324:	81 81       	ldd	r24, Z+1	; 0x01
    1326:	43 df       	rcall	.-378    	; 0x11ae <i2c_write>
	{
		i2c_write(samples[i].temperature / 256);
    1328:	f7 01       	movw	r30, r14
    132a:	80 81       	ld	r24, Z
    132c:	40 df       	rcall	.-384    	; 0x11ae <i2c_write>
    132e:	f7 01       	movw	r30, r14
		i2c_write(samples[i].temperature % 256);
    1330:	83 81       	ldd	r24, Z+3	; 0x03
    1332:	3d df       	rcall	.-390    	; 0x11ae <i2c_write>
    1334:	f7 01       	movw	r30, r14
    1336:	82 81       	ldd	r24, Z+2	; 0x02
		i2c_write(samples[i].bubbles / 256);
    1338:	3a df       	rcall	.-396    	; 0x11ae <i2c_write>
    133a:	0f 5f       	subi	r16, 0xFF	; 255
    133c:	1f 4f       	sbci	r17, 0xFF	; 255
    133e:	f4 e0       	ldi	r31, 0x04	; 4
		i2c_write(samples[i].bubbles % 256);
    1340:	ef 0e       	add	r14, r31
    1342:	f1 1c       	adc	r15, r1
    1344:	08 30       	cpi	r16, 0x08	; 8
    1346:	11 05       	cpc	r17, r1
	// send address
	i2c_write(addressh);
	i2c_write(addressl);
		
	// send data
	for(int i = 0; i < 8; i++)
    1348:	61 f7       	brne	.-40     	; 0x1322 <LC32_WritePage+0x36>
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
		i2c_write(samples[i].bubbles % 256);
	}
		
	// set stop condition to release bus
	i2c_stop();
    1358:	ff 90       	pop	r15
    135a:	ef 90       	pop	r14
    135c:	20 cf       	rjmp	.-448    	; 0x119e <i2c_stop>

0000135e <PowerSwitch_Setup>:
#define COOLER_OFF_BYTE_2 0
#define COOLER_OFF_BYTE_3 0

void PowerSwitch_Setup(void) {
	// set the data pin as an output
	POWERSWITCH_DATA_DDR |= (1 << POWERSWITCH_DATA_PIN);
    135e:	26 9a       	sbi	0x04, 6	; 4
    1360:	08 95       	ret

00001362 <StartSequence>:
	
}

void StartSequence() {
	// start sequence with a 0
	POWERSWITCH_DATA_PORT |= (1 << POWERSWITCH_DATA_PIN);
    1362:	2e 9a       	sbi	0x05, 6	; 5
    1364:	8f ea       	ldi	r24, 0xAF	; 175
    1366:	94 e0       	ldi	r25, 0x04	; 4
    1368:	01 97       	sbiw	r24, 0x01	; 1
    136a:	f1 f7       	brne	.-4      	; 0x1368 <StartSequence+0x6>
    136c:	00 c0       	rjmp	.+0      	; 0x136e <StartSequence+0xc>
    136e:	00 00       	nop
	_delay_us(300);
	POWERSWITCH_DATA_PORT &= ~(1 <<POWERSWITCH_DATA_PIN);
    1370:	2e 98       	cbi	0x05, 6	; 5
    1372:	8f e0       	ldi	r24, 0x0F	; 15
    1374:	9e e0       	ldi	r25, 0x0E	; 14
    1376:	01 97       	sbiw	r24, 0x01	; 1
    1378:	f1 f7       	brne	.-4      	; 0x1376 <StartSequence+0x14>
    137a:	00 c0       	rjmp	.+0      	; 0x137c <StartSequence+0x1a>
    137c:	00 00       	nop
    137e:	08 95       	ret

00001380 <SendByte>:
	_delay_us(900);
}

void SendByte(uint8_t byte) {	
	// send byte MSB first
	for(int i = 7; i > -1; i--) {
    1380:	27 e0       	ldi	r18, 0x07	; 7
    1382:	30 e0       	ldi	r19, 0x00	; 0
		if(byte & (1 << i)) {
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	ac 01       	movw	r20, r24
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <SendByte+0x10>
    138c:	55 95       	asr	r21
    138e:	47 95       	ror	r20
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <SendByte+0xc>
			//send 1
			POWERSWITCH_DATA_PORT |= (1 << POWERSWITCH_DATA_PIN);
    1394:	2e 9a       	sbi	0x05, 6	; 5
}

void SendByte(uint8_t byte) {	
	// send byte MSB first
	for(int i = 7; i > -1; i--) {
		if(byte & (1 << i)) {
    1396:	40 ff       	sbrs	r20, 0
    1398:	0c c0       	rjmp	.+24     	; 0x13b2 <SendByte+0x32>
    139a:	ef e0       	ldi	r30, 0x0F	; 15
    139c:	fe e0       	ldi	r31, 0x0E	; 14
    139e:	31 97       	sbiw	r30, 0x01	; 1
    13a0:	f1 f7       	brne	.-4      	; 0x139e <SendByte+0x1e>
    13a2:	00 c0       	rjmp	.+0      	; 0x13a4 <SendByte+0x24>
    13a4:	00 00       	nop
			//send 1
			POWERSWITCH_DATA_PORT |= (1 << POWERSWITCH_DATA_PIN);
			_delay_us(900);
			POWERSWITCH_DATA_PORT &= ~(1 <<POWERSWITCH_DATA_PIN);
    13a6:	2e 98       	cbi	0x05, 6	; 5
    13a8:	ef ea       	ldi	r30, 0xAF	; 175
    13aa:	f4 e0       	ldi	r31, 0x04	; 4
    13ac:	31 97       	sbiw	r30, 0x01	; 1
    13ae:	f1 f7       	brne	.-4      	; 0x13ac <SendByte+0x2c>
    13b0:	0b c0       	rjmp	.+22     	; 0x13c8 <SendByte+0x48>
    13b2:	ef ea       	ldi	r30, 0xAF	; 175
    13b4:	f4 e0       	ldi	r31, 0x04	; 4
    13b6:	31 97       	sbiw	r30, 0x01	; 1
    13b8:	f1 f7       	brne	.-4      	; 0x13b6 <SendByte+0x36>
    13ba:	00 c0       	rjmp	.+0      	; 0x13bc <SendByte+0x3c>
    13bc:	00 00       	nop
		}
		else {
			// send 0
			POWERSWITCH_DATA_PORT |= (1 << POWERSWITCH_DATA_PIN);
			_delay_us(300);
			POWERSWITCH_DATA_PORT &= ~(1 <<POWERSWITCH_DATA_PIN);
    13be:	2e 98       	cbi	0x05, 6	; 5
    13c0:	ef e0       	ldi	r30, 0x0F	; 15
    13c2:	fe e0       	ldi	r31, 0x0E	; 14
    13c4:	31 97       	sbiw	r30, 0x01	; 1
    13c6:	f1 f7       	brne	.-4      	; 0x13c4 <SendByte+0x44>
    13c8:	00 c0       	rjmp	.+0      	; 0x13ca <SendByte+0x4a>
    13ca:	00 00       	nop
	_delay_us(900);
}

void SendByte(uint8_t byte) {	
	// send byte MSB first
	for(int i = 7; i > -1; i--) {
    13cc:	21 50       	subi	r18, 0x01	; 1
    13ce:	31 09       	sbc	r19, r1
    13d0:	d0 f6       	brcc	.-76     	; 0x1386 <SendByte+0x6>
			_delay_us(300);
			POWERSWITCH_DATA_PORT &= ~(1 <<POWERSWITCH_DATA_PIN);
			_delay_us(900);
		}
	}
    13d2:	08 95       	ret

000013d4 <PowerSwitch_HeaterOn>:

void PowerSwitch_ConnectCooler(void) {
	
}

void PowerSwitch_HeaterOn(void) {
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	c6 e0       	ldi	r28, 0x06	; 6
    13da:	d0 e0       	ldi	r29, 0x00	; 0
	// send sequence 6 times
	for(int i = 0; i < 6; i++) {
		StartSequence();
    13dc:	c2 df       	rcall	.-124    	; 0x1362 <StartSequence>
    13de:	86 ee       	ldi	r24, 0xE6	; 230
		SendByte(HEATER_ON_BYTE_1);
    13e0:	cf df       	rcall	.-98     	; 0x1380 <SendByte>
    13e2:	80 e7       	ldi	r24, 0x70	; 112
    13e4:	cd df       	rcall	.-102    	; 0x1380 <SendByte>
		SendByte(HEATER_ON_BYTE_2);
    13e6:	84 e1       	ldi	r24, 0x14	; 20
    13e8:	cb df       	rcall	.-106    	; 0x1380 <SendByte>
    13ea:	8f e3       	ldi	r24, 0x3F	; 63
		SendByte(HEATER_ON_BYTE_3);
    13ec:	9c e9       	ldi	r25, 0x9C	; 156
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	f1 f7       	brne	.-4      	; 0x13ee <PowerSwitch_HeaterOn+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13f2:	00 c0       	rjmp	.+0      	; 0x13f4 <PowerSwitch_HeaterOn+0x20>
    13f4:	00 00       	nop
    13f6:	21 97       	sbiw	r28, 0x01	; 1
    13f8:	20 97       	sbiw	r28, 0x00	; 0
    13fa:	81 f7       	brne	.-32     	; 0x13dc <PowerSwitch_HeaterOn+0x8>
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
	
}

void PowerSwitch_HeaterOn(void) {
	// send sequence 6 times
	for(int i = 0; i < 6; i++) {
    1400:	08 95       	ret

00001402 <PowerSwitch_HeaterOff>:
    1402:	cf 93       	push	r28
		SendByte(HEATER_ON_BYTE_1);
		SendByte(HEATER_ON_BYTE_2);
		SendByte(HEATER_ON_BYTE_3);
		_delay_ms(10);
	}
}
    1404:	df 93       	push	r29
    1406:	c6 e0       	ldi	r28, 0x06	; 6
    1408:	d0 e0       	ldi	r29, 0x00	; 0

void PowerSwitch_HeaterOff(void) {
	// send sequence 6 times
	for(int i = 0; i < 6; i++) {
		StartSequence();
    140a:	ab df       	rcall	.-170    	; 0x1362 <StartSequence>
    140c:	86 ee       	ldi	r24, 0xE6	; 230
		SendByte(HEATER_OFF_BYTE_1);
    140e:	b8 df       	rcall	.-144    	; 0x1380 <SendByte>
    1410:	80 e7       	ldi	r24, 0x70	; 112
    1412:	b6 df       	rcall	.-148    	; 0x1380 <SendByte>
		SendByte(HEATER_OFF_BYTE_2);
    1414:	84 e0       	ldi	r24, 0x04	; 4
    1416:	b4 df       	rcall	.-152    	; 0x1380 <SendByte>
    1418:	8f e3       	ldi	r24, 0x3F	; 63
		SendByte(HEATER_OFF_BYTE_3);
    141a:	9c e9       	ldi	r25, 0x9C	; 156
    141c:	01 97       	sbiw	r24, 0x01	; 1
    141e:	f1 f7       	brne	.-4      	; 0x141c <PowerSwitch_HeaterOff+0x1a>
    1420:	00 c0       	rjmp	.+0      	; 0x1422 <PowerSwitch_HeaterOff+0x20>
    1422:	00 00       	nop
    1424:	21 97       	sbiw	r28, 0x01	; 1
    1426:	20 97       	sbiw	r28, 0x00	; 0
    1428:	81 f7       	brne	.-32     	; 0x140a <PowerSwitch_HeaterOff+0x8>
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
	}
}

void PowerSwitch_HeaterOff(void) {
	// send sequence 6 times
	for(int i = 0; i < 6; i++) {
    142e:	08 95       	ret

00001430 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1430:	98 2f       	mov	r25, r24
    1432:	97 30       	cpi	r25, 0x07	; 7
    1434:	58 f5       	brcc	.+86     	; 0x148c <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1436:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    143a:	98 17       	cp	r25, r24
    143c:	39 f0       	breq	.+14     	; 0x144c <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    143e:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1442:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1446:	50 91 f0 00 	lds	r21, 0x00F0
    144a:	03 c0       	rjmp	.+6      	; 0x1452 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    144c:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    144e:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1450:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1452:	21 ff       	sbrs	r18, 1
    1454:	19 c0       	rjmp	.+50     	; 0x1488 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1456:	30 91 eb 00 	lds	r19, 0x00EB
    145a:	3e 7f       	andi	r19, 0xFE	; 254
    145c:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1460:	30 91 ed 00 	lds	r19, 0x00ED
    1464:	3d 7f       	andi	r19, 0xFD	; 253
    1466:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    146a:	30 91 eb 00 	lds	r19, 0x00EB
    146e:	31 60       	ori	r19, 0x01	; 1
    1470:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1474:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1478:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    147c:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1480:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1484:	27 ff       	sbrs	r18, 7
    1486:	07 c0       	rjmp	.+14     	; 0x1496 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1488:	9f 5f       	subi	r25, 0xFF	; 255
    148a:	d3 cf       	rjmp	.-90     	; 0x1432 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    148c:	8f 70       	andi	r24, 0x0F	; 15
    148e:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1496:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1498:	08 95       	ret

0000149a <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    149a:	0f 93       	push	r16
    149c:	1f 93       	push	r17
    149e:	cf 93       	push	r28
    14a0:	df 93       	push	r29
    14a2:	06 2f       	mov	r16, r22
    14a4:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
    14a6:	10 e0       	ldi	r17, 0x00	; 0
    14a8:	10 17       	cp	r17, r16
    14aa:	71 f1       	breq	.+92     	; 0x1508 <Endpoint_ConfigureEndpointTable+0x6e>
	{
		if (!(Table[i].Address))
    14ac:	98 81       	ld	r25, Y
    14ae:	99 23       	and	r25, r25
    14b0:	41 f1       	breq	.+80     	; 0x1502 <Endpoint_ConfigureEndpointTable+0x68>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    14b2:	2c 81       	ldd	r18, Y+4	; 0x04
    14b4:	e9 81       	ldd	r30, Y+1	; 0x01
    14b6:	fa 81       	ldd	r31, Y+2	; 0x02
    14b8:	7b 81       	ldd	r23, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    14ba:	89 2f       	mov	r24, r25
    14bc:	8f 70       	andi	r24, 0x0F	; 15
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    14be:	87 30       	cpi	r24, 0x07	; 7
    14c0:	10 f0       	brcs	.+4      	; 0x14c6 <Endpoint_ConfigureEndpointTable+0x2c>
		  return false;
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	22 c0       	rjmp	.+68     	; 0x150a <Endpoint_ConfigureEndpointTable+0x70>
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    14c6:	22 30       	cpi	r18, 0x02	; 2
    14c8:	10 f0       	brcs	.+4      	; 0x14ce <Endpoint_ConfigureEndpointTable+0x34>
    14ca:	56 e0       	ldi	r21, 0x06	; 6
    14cc:	01 c0       	rjmp	.+2      	; 0x14d0 <Endpoint_ConfigureEndpointTable+0x36>
    14ce:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    14d0:	28 e0       	ldi	r18, 0x08	; 8
    14d2:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    14d4:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    14d6:	2e 17       	cp	r18, r30
    14d8:	3f 07       	cpc	r19, r31
    14da:	20 f4       	brcc	.+8      	; 0x14e4 <Endpoint_ConfigureEndpointTable+0x4a>
				{
					MaskVal++;
    14dc:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    14de:	22 0f       	add	r18, r18
    14e0:	33 1f       	adc	r19, r19
    14e2:	f9 cf       	rjmp	.-14     	; 0x14d6 <Endpoint_ConfigureEndpointTable+0x3c>
				}

				return (MaskVal << EPSIZE0);
    14e4:	42 95       	swap	r20
    14e6:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    14e8:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    14ea:	69 2f       	mov	r22, r25
    14ec:	66 1f       	adc	r22, r22
    14ee:	66 27       	eor	r22, r22
    14f0:	66 1f       	adc	r22, r22
    14f2:	90 e4       	ldi	r25, 0x40	; 64
    14f4:	79 9f       	mul	r23, r25
    14f6:	90 01       	movw	r18, r0
    14f8:	11 24       	eor	r1, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    14fa:	62 2b       	or	r22, r18
    14fc:	99 df       	rcall	.-206    	; 0x1430 <Endpoint_ConfigureEndpoint_Prv>
    14fe:	88 23       	and	r24, r24
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1500:	01 f3       	breq	.-64     	; 0x14c2 <Endpoint_ConfigureEndpointTable+0x28>
    1502:	1f 5f       	subi	r17, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1504:	25 96       	adiw	r28, 0x05	; 5
    1506:	d0 cf       	rjmp	.-96     	; 0x14a8 <Endpoint_ConfigureEndpointTable+0xe>
    1508:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
    150a:	df 91       	pop	r29
}
    150c:	cf 91       	pop	r28
    150e:	1f 91       	pop	r17
    1510:	0f 91       	pop	r16
    1512:	08 95       	ret

00001514 <Endpoint_ClearStatusStage>:
    1514:	80 91 64 01 	lds	r24, 0x0164
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1518:	87 fd       	sbrc	r24, 7
    151a:	05 c0       	rjmp	.+10     	; 0x1526 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    151c:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1520:	80 ff       	sbrs	r24, 0
    1522:	0e c0       	rjmp	.+28     	; 0x1540 <Endpoint_ClearStatusStage+0x2c>
    1524:	12 c0       	rjmp	.+36     	; 0x154a <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1526:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    152a:	82 fd       	sbrc	r24, 2
    152c:	05 c0       	rjmp	.+10     	; 0x1538 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    152e:	80 91 63 01 	lds	r24, 0x0163
    1532:	81 11       	cpse	r24, r1
    1534:	f8 cf       	rjmp	.-16     	; 0x1526 <Endpoint_ClearStatusStage+0x12>
    1536:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1538:	80 91 e8 00 	lds	r24, 0x00E8
    153c:	8b 77       	andi	r24, 0x7B	; 123
    153e:	08 c0       	rjmp	.+16     	; 0x1550 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1540:	80 91 63 01 	lds	r24, 0x0163
    1544:	81 11       	cpse	r24, r1
    1546:	ea cf       	rjmp	.-44     	; 0x151c <Endpoint_ClearStatusStage+0x8>
    1548:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    154a:	80 91 e8 00 	lds	r24, 0x00E8
    154e:	8e 77       	andi	r24, 0x7E	; 126
    1550:	80 93 e8 00 	sts	0x00E8, r24
    1554:	08 95       	ret

00001556 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1556:	80 91 e4 00 	lds	r24, 0x00E4
    155a:	90 91 e5 00 	lds	r25, 0x00E5
    155e:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1560:	20 91 ec 00 	lds	r18, 0x00EC
    1564:	20 ff       	sbrs	r18, 0
    1566:	21 c0       	rjmp	.+66     	; 0x15aa <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1568:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    156c:	20 fd       	sbrc	r18, 0
    156e:	21 c0       	rjmp	.+66     	; 0x15b2 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1570:	20 91 63 01 	lds	r18, 0x0163

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1574:	22 23       	and	r18, r18
    1576:	89 f0       	breq	.+34     	; 0x159a <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1578:	25 30       	cpi	r18, 0x05	; 5
    157a:	89 f0       	breq	.+34     	; 0x159e <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    157c:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1580:	25 fd       	sbrc	r18, 5
    1582:	0f c0       	rjmp	.+30     	; 0x15a2 <Endpoint_WaitUntilReady+0x4c>
    1584:	20 91 e4 00 	lds	r18, 0x00E4
    1588:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    158c:	28 17       	cp	r18, r24
    158e:	39 07       	cpc	r19, r25
    1590:	39 f3       	breq	.-50     	; 0x1560 <Endpoint_WaitUntilReady+0xa>
    1592:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1594:	41 f0       	breq	.+16     	; 0x15a6 <Endpoint_WaitUntilReady+0x50>
    1596:	c9 01       	movw	r24, r18
    1598:	e3 cf       	rjmp	.-58     	; 0x1560 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    159a:	82 e0       	ldi	r24, 0x02	; 2
    159c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    159e:	83 e0       	ldi	r24, 0x03	; 3
    15a0:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    15a6:	84 e0       	ldi	r24, 0x04	; 4
    15a8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    15aa:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    15ae:	22 ff       	sbrs	r18, 2
    15b0:	df cf       	rjmp	.-66     	; 0x1570 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	08 95       	ret

000015b6 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    15b6:	0f 93       	push	r16
    15b8:	1f 93       	push	r17
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    15be:	46 d0       	rcall	.+140    	; 0x164c <USB_INT_DisableAllInterrupts>
    15c0:	4d d0       	rcall	.+154    	; 0x165c <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    15c2:	c8 ed       	ldi	r28, 0xD8	; 216
    15c4:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    15c6:	88 81       	ld	r24, Y
    15c8:	8f 77       	andi	r24, 0x7F	; 127
    15ca:	88 83       	st	Y, r24
    15cc:	88 81       	ld	r24, Y
    15ce:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    15d0:	88 83       	st	Y, r24
    15d2:	88 81       	ld	r24, Y
    15d4:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    15d6:	88 83       	st	Y, r24
    15d8:	19 bc       	out	0x29, r1	; 41
    15da:	10 92 63 01 	sts	0x0163, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    15de:	10 92 5f 01 	sts	0x015F, r1
	USB_Device_ConfigurationNumber  = 0;
    15e2:	10 92 61 01 	sts	0x0161, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    15e6:	10 92 60 01 	sts	0x0160, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    15ea:	00 ee       	ldi	r16, 0xE0	; 224
    15ec:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    15ee:	f8 01       	movw	r30, r16
    15f0:	80 81       	ld	r24, Z
    15f2:	8b 7f       	andi	r24, 0xFB	; 251
    15f4:	80 83       	st	Z, r24
    15f6:	88 81       	ld	r24, Y
    15f8:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    15fa:	88 83       	st	Y, r24
    15fc:	42 e0       	ldi	r20, 0x02	; 2
    15fe:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	16 df       	rcall	.-468    	; 0x1430 <Endpoint_ConfigureEndpoint_Prv>
    1604:	e1 ee       	ldi	r30, 0xE1	; 225
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    160a:	8e 7f       	andi	r24, 0xFE	; 254
    160c:	80 83       	st	Z, r24
    160e:	e2 ee       	ldi	r30, 0xE2	; 226
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1614:	81 60       	ori	r24, 0x01	; 1
    1616:	80 83       	st	Z, r24
    1618:	80 81       	ld	r24, Z
    161a:	88 60       	ori	r24, 0x08	; 8
    161c:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    161e:	f8 01       	movw	r30, r16
    1620:	80 81       	ld	r24, Z
    1622:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1624:	80 83       	st	Z, r24
    1626:	88 81       	ld	r24, Y
    1628:	80 61       	ori	r24, 0x10	; 16
    162a:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    162c:	df 91       	pop	r29
    162e:	cf 91       	pop	r28
    1630:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1632:	0f 91       	pop	r16
    1634:	08 95       	ret

00001636 <USB_Init>:
    1636:	e7 ed       	ldi	r30, 0xD7	; 215
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    163c:	81 60       	ori	r24, 0x01	; 1
    163e:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1640:	84 e0       	ldi	r24, 0x04	; 4
    1642:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	80 93 62 01 	sts	0x0162, r24

	USB_ResetInterface();
    164a:	b5 cf       	rjmp	.-150    	; 0x15b6 <USB_ResetInterface>

0000164c <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    164c:	e8 ed       	ldi	r30, 0xD8	; 216
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	8e 7f       	andi	r24, 0xFE	; 254
    1654:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1656:	10 92 e2 00 	sts	0x00E2, r1
    165a:	08 95       	ret

0000165c <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    165c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1660:	10 92 e1 00 	sts	0x00E1, r1
    1664:	08 95       	ret

00001666 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1666:	1f 92       	push	r1
    1668:	0f 92       	push	r0
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	0f 92       	push	r0
    166e:	11 24       	eor	r1, r1
    1670:	2f 93       	push	r18
    1672:	3f 93       	push	r19
    1674:	4f 93       	push	r20
    1676:	5f 93       	push	r21
    1678:	6f 93       	push	r22
    167a:	7f 93       	push	r23
    167c:	8f 93       	push	r24
    167e:	9f 93       	push	r25
    1680:	af 93       	push	r26
    1682:	bf 93       	push	r27
    1684:	ef 93       	push	r30
    1686:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1688:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    168c:	82 ff       	sbrs	r24, 2
    168e:	0a c0       	rjmp	.+20     	; 0x16a4 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1690:	80 91 e2 00 	lds	r24, 0x00E2
    1694:	82 ff       	sbrs	r24, 2
    1696:	06 c0       	rjmp	.+12     	; 0x16a4 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1698:	80 91 e1 00 	lds	r24, 0x00E1
    169c:	8b 7f       	andi	r24, 0xFB	; 251
    169e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    16a2:	49 da       	rcall	.-2926   	; 0xb36 <EVENT_USB_Device_StartOfFrame>
    16a4:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    16a8:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    16aa:	1d c0       	rjmp	.+58     	; 0x16e6 <__vector_10+0x80>
    16ac:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    16b0:	80 ff       	sbrs	r24, 0
    16b2:	19 c0       	rjmp	.+50     	; 0x16e6 <__vector_10+0x80>
    16b4:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    16b8:	8e 7f       	andi	r24, 0xFE	; 254
    16ba:	80 93 da 00 	sts	0x00DA, r24
    16be:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    16c2:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    16c4:	0c c0       	rjmp	.+24     	; 0x16de <__vector_10+0x78>
    16c6:	80 e1       	ldi	r24, 0x10	; 16

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    16c8:	89 bd       	out	0x29, r24	; 41
    16ca:	82 e1       	ldi	r24, 0x12	; 18
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    16cc:	89 bd       	out	0x29, r24	; 41
    16ce:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    16d0:	00 fe       	sbrs	r0, 0
    16d2:	fd cf       	rjmp	.-6      	; 0x16ce <__vector_10+0x68>
    16d4:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    16d6:	80 93 63 01 	sts	0x0163, r24
    16da:	1b da       	rcall	.-3018   	; 0xb12 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
    16dc:	04 c0       	rjmp	.+8      	; 0x16e6 <__vector_10+0x80>
    16de:	19 bc       	out	0x29, r1	; 41
    16e0:	10 92 63 01 	sts	0x0163, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    16e4:	17 da       	rcall	.-3026   	; 0xb14 <EVENT_USB_Device_Disconnect>
    16e6:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
    16ea:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    16ec:	18 c0       	rjmp	.+48     	; 0x171e <__vector_10+0xb8>
    16ee:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    16f2:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    16f4:	14 c0       	rjmp	.+40     	; 0x171e <__vector_10+0xb8>
    16f6:	80 91 e2 00 	lds	r24, 0x00E2
    16fa:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    16fc:	80 93 e2 00 	sts	0x00E2, r24
    1700:	80 91 e2 00 	lds	r24, 0x00E2
    1704:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1706:	80 93 e2 00 	sts	0x00E2, r24
    170a:	80 91 d8 00 	lds	r24, 0x00D8
    170e:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1710:	80 93 d8 00 	sts	0x00D8, r24
    1714:	19 bc       	out	0x29, r1	; 41
    1716:	85 e0       	ldi	r24, 0x05	; 5
    1718:	80 93 63 01 	sts	0x0163, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    171c:	f2 d2       	rcall	.+1508   	; 0x1d02 <USB_Event_Stub>
    171e:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
    1722:	84 ff       	sbrs	r24, 4
    1724:	2d c0       	rjmp	.+90     	; 0x1780 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1726:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    172a:	84 ff       	sbrs	r24, 4
    172c:	29 c0       	rjmp	.+82     	; 0x1780 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    172e:	80 e1       	ldi	r24, 0x10	; 16
    1730:	89 bd       	out	0x29, r24	; 41
    1732:	82 e1       	ldi	r24, 0x12	; 18
    1734:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1736:	09 b4       	in	r0, 0x29	; 41
    1738:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    173a:	fd cf       	rjmp	.-6      	; 0x1736 <__vector_10+0xd0>
    173c:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1740:	8f 7d       	andi	r24, 0xDF	; 223
    1742:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1746:	80 91 e1 00 	lds	r24, 0x00E1
    174a:	8f 7e       	andi	r24, 0xEF	; 239
    174c:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1750:	80 91 e2 00 	lds	r24, 0x00E2
    1754:	8f 7e       	andi	r24, 0xEF	; 239
    1756:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    175a:	80 91 e2 00 	lds	r24, 0x00E2
    175e:	81 60       	ori	r24, 0x01	; 1
    1760:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1764:	80 91 5f 01 	lds	r24, 0x015F
    1768:	81 11       	cpse	r24, r1
    176a:	04 c0       	rjmp	.+8      	; 0x1774 <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    176c:	80 91 e3 00 	lds	r24, 0x00E3
    1770:	87 ff       	sbrs	r24, 7
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <__vector_10+0x112>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1774:	84 e0       	ldi	r24, 0x04	; 4
    1776:	01 c0       	rjmp	.+2      	; 0x177a <__vector_10+0x114>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	80 93 63 01 	sts	0x0163, r24
    177e:	c1 d2       	rcall	.+1410   	; 0x1d02 <USB_Event_Stub>
    1780:	80 91 e1 00 	lds	r24, 0x00E1
    1784:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1786:	22 c0       	rjmp	.+68     	; 0x17cc <__vector_10+0x166>
    1788:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    178c:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    178e:	1e c0       	rjmp	.+60     	; 0x17cc <__vector_10+0x166>
    1790:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1794:	87 7f       	andi	r24, 0xF7	; 247
    1796:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    179a:	82 e0       	ldi	r24, 0x02	; 2
    179c:	80 93 63 01 	sts	0x0163, r24
    17a0:	10 92 5f 01 	sts	0x015F, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    17a4:	80 91 e1 00 	lds	r24, 0x00E1
    17a8:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
    17aa:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    17ae:	80 91 e2 00 	lds	r24, 0x00E2
    17b2:	8e 7f       	andi	r24, 0xFE	; 254
    17b4:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    17b8:	80 91 e2 00 	lds	r24, 0x00E2
    17bc:	80 61       	ori	r24, 0x10	; 16
    17be:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    17c2:	42 e0       	ldi	r20, 0x02	; 2
    17c4:	60 e0       	ldi	r22, 0x00	; 0
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	33 de       	rcall	.-922    	; 0x1430 <Endpoint_ConfigureEndpoint_Prv>
    17ca:	9b d2       	rcall	.+1334   	; 0x1d02 <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    17cc:	ff 91       	pop	r31
    17ce:	ef 91       	pop	r30
    17d0:	bf 91       	pop	r27
    17d2:	af 91       	pop	r26
    17d4:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    17d6:	8f 91       	pop	r24
    17d8:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    17da:	6f 91       	pop	r22
    17dc:	5f 91       	pop	r21
    17de:	4f 91       	pop	r20
    17e0:	3f 91       	pop	r19
    17e2:	2f 91       	pop	r18
    17e4:	0f 90       	pop	r0
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	0f 90       	pop	r0
    17ea:	1f 90       	pop	r1
    17ec:	18 95       	reti

000017ee <Endpoint_Write_Stream_LE>:

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    17ee:	cf 92       	push	r12
    17f0:	df 92       	push	r13
    17f2:	ef 92       	push	r14
    17f4:	ff 92       	push	r15
    17f6:	0f 93       	push	r16
    17f8:	1f 93       	push	r17
    17fa:	cf 93       	push	r28
    17fc:	df 93       	push	r29
    17fe:	7c 01       	movw	r14, r24
    1800:	8b 01       	movw	r16, r22
    1802:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1804:	a8 de       	rcall	.-688    	; 0x1556 <Endpoint_WaitUntilReady>
    1806:	81 11       	cpse	r24, r1
    1808:	31 c0       	rjmp	.+98     	; 0x186c <Endpoint_Write_Stream_LE+0x7e>
    180a:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    180c:	31 f0       	breq	.+12     	; 0x181a <Endpoint_Write_Stream_LE+0x2c>
    180e:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
    1810:	99 81       	ldd	r25, Y+1	; 0x01
    1812:	08 1b       	sub	r16, r24
    1814:	19 0b       	sbc	r17, r25
    1816:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1818:	f9 1e       	adc	r15, r25
    181a:	c1 2c       	mov	r12, r1
// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    181c:	d1 2c       	mov	r13, r1
    181e:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1820:	11 05       	cpc	r17, r1
    1822:	19 f1       	breq	.+70     	; 0x186a <Endpoint_Write_Stream_LE+0x7c>
    1824:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1828:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    182a:	14 c0       	rjmp	.+40     	; 0x1854 <Endpoint_Write_Stream_LE+0x66>
    182c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1830:	8e 77       	andi	r24, 0x7E	; 126
    1832:	80 93 e8 00 	sts	0x00E8, r24
    1836:	66 d2       	rcall	.+1228   	; 0x1d04 <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    1838:	20 97       	sbiw	r28, 0x00	; 0
    183a:	41 f0       	breq	.+16     	; 0x184c <Endpoint_Write_Stream_LE+0x5e>
			#endif

			if (BytesProcessed != NULL)
    183c:	88 81       	ld	r24, Y
    183e:	99 81       	ldd	r25, Y+1	; 0x01
			{
				*BytesProcessed += BytesInTransfer;
    1840:	8c 0d       	add	r24, r12
    1842:	9d 1d       	adc	r25, r13
    1844:	99 83       	std	Y+1, r25	; 0x01
    1846:	88 83       	st	Y, r24
    1848:	85 e0       	ldi	r24, 0x05	; 5
    184a:	10 c0       	rjmp	.+32     	; 0x186c <Endpoint_Write_Stream_LE+0x7e>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    184c:	84 de       	rcall	.-760    	; 0x1556 <Endpoint_WaitUntilReady>
    184e:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1850:	31 f3       	breq	.-52     	; 0x181e <Endpoint_Write_Stream_LE+0x30>
    1852:	0c c0       	rjmp	.+24     	; 0x186c <Endpoint_Write_Stream_LE+0x7e>
    1854:	f7 01       	movw	r30, r14
    1856:	81 91       	ld	r24, Z+
    1858:	7f 01       	movw	r14, r30
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    185a:	80 93 f1 00 	sts	0x00F1, r24
    185e:	01 50       	subi	r16, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1860:	11 09       	sbc	r17, r1
    1862:	ff ef       	ldi	r31, 0xFF	; 255
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1864:	cf 1a       	sub	r12, r31
    1866:	df 0a       	sbc	r13, r31
			BytesInTransfer++;
    1868:	da cf       	rjmp	.-76     	; 0x181e <Endpoint_Write_Stream_LE+0x30>
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    1870:	1f 91       	pop	r17
}
    1872:	0f 91       	pop	r16
    1874:	ff 90       	pop	r15
    1876:	ef 90       	pop	r14
    1878:	df 90       	pop	r13
    187a:	cf 90       	pop	r12
    187c:	08 95       	ret

0000187e <Endpoint_Write_Control_Stream_LE>:
    187e:	20 91 6a 01 	lds	r18, 0x016A
    1882:	30 91 6b 01 	lds	r19, 0x016B
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1886:	26 17       	cp	r18, r22
    1888:	37 07       	cpc	r19, r23
    188a:	48 f0       	brcs	.+18     	; 0x189e <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    188c:	61 15       	cp	r22, r1
    188e:	71 05       	cpc	r23, r1
    1890:	39 f4       	brne	.+14     	; 0x18a0 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1892:	20 91 e8 00 	lds	r18, 0x00E8
    1896:	2e 77       	andi	r18, 0x7E	; 126
    1898:	20 93 e8 00 	sts	0x00E8, r18
    189c:	01 c0       	rjmp	.+2      	; 0x18a0 <Endpoint_Write_Control_Stream_LE+0x22>
    189e:	b9 01       	movw	r22, r18
    18a0:	fc 01       	movw	r30, r24
    18a2:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    18a4:	61 15       	cp	r22, r1
    18a6:	71 05       	cpc	r23, r1
    18a8:	a9 f1       	breq	.+106    	; 0x1914 <Endpoint_Write_Control_Stream_LE+0x96>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18aa:	80 91 63 01 	lds	r24, 0x0163

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18ae:	88 23       	and	r24, r24
    18b0:	e9 f1       	breq	.+122    	; 0x192c <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18b2:	85 30       	cpi	r24, 0x05	; 5
    18b4:	e9 f1       	breq	.+122    	; 0x1930 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18b6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    18ba:	83 fd       	sbrc	r24, 3
    18bc:	35 c0       	rjmp	.+106    	; 0x1928 <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18be:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    18c2:	82 ff       	sbrs	r24, 2
    18c4:	06 c0       	rjmp	.+12     	; 0x18d2 <Endpoint_Write_Control_Stream_LE+0x54>
    18c6:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    18ca:	82 ff       	sbrs	r24, 2
    18cc:	26 c0       	rjmp	.+76     	; 0x191a <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    18d2:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    18d6:	80 ff       	sbrs	r24, 0
    18d8:	e5 cf       	rjmp	.-54     	; 0x18a4 <Endpoint_Write_Control_Stream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    18da:	20 91 f3 00 	lds	r18, 0x00F3
    18de:	80 91 f2 00 	lds	r24, 0x00F2
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    18e6:	61 15       	cp	r22, r1
    18e8:	71 05       	cpc	r23, r1
    18ea:	51 f0       	breq	.+20     	; 0x1900 <Endpoint_Write_Control_Stream_LE+0x82>
    18ec:	88 30       	cpi	r24, 0x08	; 8
    18ee:	91 05       	cpc	r25, r1
    18f0:	38 f4       	brcc	.+14     	; 0x1900 <Endpoint_Write_Control_Stream_LE+0x82>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    18f2:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18f4:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    18f8:	61 50       	subi	r22, 0x01	; 1
    18fa:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    18fc:	01 96       	adiw	r24, 0x01	; 1
    18fe:	f3 cf       	rjmp	.-26     	; 0x18e6 <Endpoint_Write_Control_Stream_LE+0x68>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1900:	21 e0       	ldi	r18, 0x01	; 1
    1902:	08 97       	sbiw	r24, 0x08	; 8
    1904:	09 f0       	breq	.+2      	; 0x1908 <Endpoint_Write_Control_Stream_LE+0x8a>
    1906:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1908:	80 91 e8 00 	lds	r24, 0x00E8
    190c:	8e 77       	andi	r24, 0x7E	; 126
    190e:	80 93 e8 00 	sts	0x00E8, r24
    1912:	c8 cf       	rjmp	.-112    	; 0x18a4 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1914:	21 11       	cpse	r18, r1
    1916:	c9 cf       	rjmp	.-110    	; 0x18aa <Endpoint_Write_Control_Stream_LE+0x2c>
    1918:	d6 cf       	rjmp	.-84     	; 0x18c6 <Endpoint_Write_Control_Stream_LE+0x48>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    191a:	80 91 63 01 	lds	r24, 0x0163

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    191e:	88 23       	and	r24, r24
    1920:	29 f0       	breq	.+10     	; 0x192c <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1922:	85 30       	cpi	r24, 0x05	; 5
    1924:	81 f6       	brne	.-96     	; 0x18c6 <Endpoint_Write_Control_Stream_LE+0x48>
    1926:	04 c0       	rjmp	.+8      	; 0x1930 <Endpoint_Write_Control_Stream_LE+0xb2>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    192c:	82 e0       	ldi	r24, 0x02	; 2
    192e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1930:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1932:	08 95       	ret

00001934 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    1934:	61 15       	cp	r22, r1
    1936:	71 05       	cpc	r23, r1
    1938:	29 f4       	brne	.+10     	; 0x1944 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    193a:	20 91 e8 00 	lds	r18, 0x00E8
    193e:	2b 77       	andi	r18, 0x7B	; 123
    1940:	20 93 e8 00 	sts	0x00E8, r18
	  Endpoint_ClearOUT();

	while (Length)
    1944:	61 15       	cp	r22, r1
    1946:	71 05       	cpc	r23, r1
    1948:	41 f1       	breq	.+80     	; 0x199a <Endpoint_Read_Control_Stream_LE+0x66>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    194a:	20 91 63 01 	lds	r18, 0x0163

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    194e:	22 23       	and	r18, r18
    1950:	69 f1       	breq	.+90     	; 0x19ac <Endpoint_Read_Control_Stream_LE+0x78>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1952:	25 30       	cpi	r18, 0x05	; 5
    1954:	69 f1       	breq	.+90     	; 0x19b0 <Endpoint_Read_Control_Stream_LE+0x7c>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1956:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    195a:	23 fd       	sbrc	r18, 3
    195c:	23 c0       	rjmp	.+70     	; 0x19a4 <Endpoint_Read_Control_Stream_LE+0x70>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    195e:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    1962:	22 ff       	sbrs	r18, 2
    1964:	f2 cf       	rjmp	.-28     	; 0x194a <Endpoint_Read_Control_Stream_LE+0x16>
    1966:	fc 01       	movw	r30, r24
    1968:	cf 01       	movw	r24, r30
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    196a:	40 91 f3 00 	lds	r20, 0x00F3
    196e:	20 91 f2 00 	lds	r18, 0x00F2
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	34 2b       	or	r19, r20
		{
			while (Length && Endpoint_BytesInEndpoint())
    1976:	23 2b       	or	r18, r19
    1978:	01 f3       	breq	.-64     	; 0x193a <Endpoint_Read_Control_Stream_LE+0x6>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    197a:	80 91 f1 00 	lds	r24, 0x00F1
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    197e:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1980:	cf 01       	movw	r24, r30
				Length--;
    1982:	61 50       	subi	r22, 0x01	; 1
    1984:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    1986:	61 15       	cp	r22, r1
    1988:	71 05       	cpc	r23, r1
    198a:	71 f7       	brne	.-36     	; 0x1968 <Endpoint_Read_Control_Stream_LE+0x34>
    198c:	d6 cf       	rjmp	.-84     	; 0x193a <Endpoint_Read_Control_Stream_LE+0x6>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    198e:	80 91 63 01 	lds	r24, 0x0163

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1992:	88 23       	and	r24, r24
    1994:	59 f0       	breq	.+22     	; 0x19ac <Endpoint_Read_Control_Stream_LE+0x78>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1996:	85 30       	cpi	r24, 0x05	; 5
    1998:	59 f0       	breq	.+22     	; 0x19b0 <Endpoint_Read_Control_Stream_LE+0x7c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    199a:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    199e:	80 ff       	sbrs	r24, 0
    19a0:	f6 cf       	rjmp	.-20     	; 0x198e <Endpoint_Read_Control_Stream_LE+0x5a>
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <Endpoint_Read_Control_Stream_LE+0x74>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    19ac:	82 e0       	ldi	r24, 0x02	; 2
    19ae:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    19b0:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    19b2:	08 95       	ret

000019b4 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    19b4:	20 91 6a 01 	lds	r18, 0x016A
    19b8:	30 91 6b 01 	lds	r19, 0x016B
    19bc:	26 17       	cp	r18, r22
    19be:	37 07       	cpc	r19, r23
    19c0:	48 f0       	brcs	.+18     	; 0x19d4 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    19c2:	61 15       	cp	r22, r1
    19c4:	71 05       	cpc	r23, r1
    19c6:	39 f4       	brne	.+14     	; 0x19d6 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19c8:	20 91 e8 00 	lds	r18, 0x00E8
    19cc:	2e 77       	andi	r18, 0x7E	; 126
    19ce:	20 93 e8 00 	sts	0x00E8, r18
    19d2:	01 c0       	rjmp	.+2      	; 0x19d6 <Endpoint_Write_Control_PStream_LE+0x22>
    19d4:	b9 01       	movw	r22, r18
    19d6:	fc 01       	movw	r30, r24
    19d8:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    19da:	61 15       	cp	r22, r1
    19dc:	71 05       	cpc	r23, r1
    19de:	c1 f1       	breq	.+112    	; 0x1a50 <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19e0:	80 91 63 01 	lds	r24, 0x0163

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19e4:	88 23       	and	r24, r24
    19e6:	09 f4       	brne	.+2      	; 0x19ea <Endpoint_Write_Control_PStream_LE+0x36>
    19e8:	3f c0       	rjmp	.+126    	; 0x1a68 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19ea:	85 30       	cpi	r24, 0x05	; 5
    19ec:	09 f4       	brne	.+2      	; 0x19f0 <Endpoint_Write_Control_PStream_LE+0x3c>
    19ee:	3e c0       	rjmp	.+124    	; 0x1a6c <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19f0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    19f4:	83 fd       	sbrc	r24, 3
    19f6:	36 c0       	rjmp	.+108    	; 0x1a64 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19f8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    19fc:	82 ff       	sbrs	r24, 2
    19fe:	06 c0       	rjmp	.+12     	; 0x1a0c <Endpoint_Write_Control_PStream_LE+0x58>
    1a00:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1a04:	82 ff       	sbrs	r24, 2
    1a06:	27 c0       	rjmp	.+78     	; 0x1a56 <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a0c:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    1a10:	80 ff       	sbrs	r24, 0
    1a12:	e3 cf       	rjmp	.-58     	; 0x19da <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1a14:	20 91 f3 00 	lds	r18, 0x00F3
    1a18:	80 91 f2 00 	lds	r24, 0x00F2
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1a20:	61 15       	cp	r22, r1
    1a22:	71 05       	cpc	r23, r1
    1a24:	59 f0       	breq	.+22     	; 0x1a3c <Endpoint_Write_Control_PStream_LE+0x88>
    1a26:	88 30       	cpi	r24, 0x08	; 8
    1a28:	91 05       	cpc	r25, r1
    1a2a:	40 f4       	brcc	.+16     	; 0x1a3c <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1a2c:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a2e:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1a32:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1a34:	61 50       	subi	r22, 0x01	; 1
    1a36:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1a38:	01 96       	adiw	r24, 0x01	; 1
    1a3a:	f2 cf       	rjmp	.-28     	; 0x1a20 <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1a3c:	21 e0       	ldi	r18, 0x01	; 1
    1a3e:	08 97       	sbiw	r24, 0x08	; 8
    1a40:	09 f0       	breq	.+2      	; 0x1a44 <Endpoint_Write_Control_PStream_LE+0x90>
    1a42:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a44:	80 91 e8 00 	lds	r24, 0x00E8
    1a48:	8e 77       	andi	r24, 0x7E	; 126
    1a4a:	80 93 e8 00 	sts	0x00E8, r24
    1a4e:	c5 cf       	rjmp	.-118    	; 0x19da <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1a50:	21 11       	cpse	r18, r1
    1a52:	c6 cf       	rjmp	.-116    	; 0x19e0 <Endpoint_Write_Control_PStream_LE+0x2c>
    1a54:	d5 cf       	rjmp	.-86     	; 0x1a00 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a56:	80 91 63 01 	lds	r24, 0x0163

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a5a:	88 23       	and	r24, r24
    1a5c:	29 f0       	breq	.+10     	; 0x1a68 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a5e:	85 30       	cpi	r24, 0x05	; 5
    1a60:	79 f6       	brne	.-98     	; 0x1a00 <Endpoint_Write_Control_PStream_LE+0x4c>
    1a62:	04 c0       	rjmp	.+8      	; 0x1a6c <Endpoint_Write_Control_PStream_LE+0xb8>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1a68:	82 e0       	ldi	r24, 0x02	; 2
    1a6a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a6c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1a6e:	08 95       	ret

00001a70 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1a70:	0f 93       	push	r16
    1a72:	1f 93       	push	r17
    1a74:	cf 93       	push	r28
    1a76:	df 93       	push	r29
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	aa 97       	sbiw	r28, 0x2a	; 42
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	f8 94       	cli
    1a82:	de bf       	out	0x3e, r29	; 62
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	cd bf       	out	0x3d, r28	; 61
    1a88:	e4 e6       	ldi	r30, 0x64	; 100
    1a8a:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1a8c:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1a90:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1a92:	21 e0       	ldi	r18, 0x01	; 1
    1a94:	ec 36       	cpi	r30, 0x6C	; 108
    1a96:	f2 07       	cpc	r31, r18
    1a98:	c9 f7       	brne	.-14     	; 0x1a8c <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1a9a:	49 d8       	rcall	.-3950   	; 0xb2e <EVENT_USB_Device_ControlRequest>
    1a9c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1aa0:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
    1aa2:	16 c1       	rjmp	.+556    	; 0x1cd0 <USB_Device_ProcessControlRequest+0x260>
    1aa4:	20 91 64 01 	lds	r18, 0x0164
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1aa8:	30 91 65 01 	lds	r19, 0x0165

		switch (USB_ControlRequest.bRequest)
    1aac:	83 2f       	mov	r24, r19
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	8a 30       	cpi	r24, 0x0A	; 10
    1ab2:	91 05       	cpc	r25, r1
    1ab4:	08 f0       	brcs	.+2      	; 0x1ab8 <USB_Device_ProcessControlRequest+0x48>
    1ab6:	0c c1       	rjmp	.+536    	; 0x1cd0 <USB_Device_ProcessControlRequest+0x260>
    1ab8:	fc 01       	movw	r30, r24
    1aba:	e1 5a       	subi	r30, 0xA1	; 161
    1abc:	ff 4f       	sbci	r31, 0xFF	; 255
    1abe:	3f c3       	rjmp	.+1662   	; 0x213e <__tablejump2__>
    1ac0:	20 38       	cpi	r18, 0x80	; 128
    1ac2:	81 f0       	breq	.+32     	; 0x1ae4 <USB_Device_ProcessControlRequest+0x74>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ac4:	22 38       	cpi	r18, 0x82	; 130
    1ac6:	09 f0       	breq	.+2      	; 0x1aca <USB_Device_ProcessControlRequest+0x5a>
    1ac8:	03 c1       	rjmp	.+518    	; 0x1cd0 <USB_Device_ProcessControlRequest+0x260>
    1aca:	80 91 68 01 	lds	r24, 0x0168
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ace:	8f 70       	andi	r24, 0x0F	; 15
    1ad0:	80 93 e9 00 	sts	0x00E9, r24
    1ad4:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1ad8:	85 fb       	bst	r24, 5
    1ada:	88 27       	eor	r24, r24
    1adc:	80 f9       	bld	r24, 0
    1ade:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ae2:	06 c0       	rjmp	.+12     	; 0x1af0 <USB_Device_ProcessControlRequest+0x80>
    1ae4:	80 91 60 01 	lds	r24, 0x0160
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1ae8:	90 91 61 01 	lds	r25, 0x0161
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1aec:	91 11       	cpse	r25, r1
    1aee:	82 60       	ori	r24, 0x02	; 2
    1af0:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1af4:	97 7f       	andi	r25, 0xF7	; 247
    1af6:	90 93 e8 00 	sts	0x00E8, r25
    1afa:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1afe:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
    1b02:	c2 c0       	rjmp	.+388    	; 0x1c88 <USB_Device_ProcessControlRequest+0x218>
    1b04:	82 2f       	mov	r24, r18
    1b06:	8d 7f       	andi	r24, 0xFD	; 253
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1b08:	09 f0       	breq	.+2      	; 0x1b0c <USB_Device_ProcessControlRequest+0x9c>
    1b0a:	e2 c0       	rjmp	.+452    	; 0x1cd0 <USB_Device_ProcessControlRequest+0x260>
    1b0c:	22 23       	and	r18, r18
    1b0e:	19 f0       	breq	.+6      	; 0x1b16 <USB_Device_ProcessControlRequest+0xa6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1b10:	22 30       	cpi	r18, 0x02	; 2
    1b12:	61 f0       	breq	.+24     	; 0x1b2c <USB_Device_ProcessControlRequest+0xbc>
    1b14:	dd c0       	rjmp	.+442    	; 0x1cd0 <USB_Device_ProcessControlRequest+0x260>
    1b16:	80 91 66 01 	lds	r24, 0x0166
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1b1a:	81 30       	cpi	r24, 0x01	; 1
    1b1c:	09 f0       	breq	.+2      	; 0x1b20 <USB_Device_ProcessControlRequest+0xb0>
    1b1e:	d8 c0       	rjmp	.+432    	; 0x1cd0 <USB_Device_ProcessControlRequest+0x260>
    1b20:	33 30       	cpi	r19, 0x03	; 3
    1b22:	09 f0       	breq	.+2      	; 0x1b26 <USB_Device_ProcessControlRequest+0xb6>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	80 93 61 01 	sts	0x0161, r24
    1b2a:	28 c0       	rjmp	.+80     	; 0x1b7c <USB_Device_ProcessControlRequest+0x10c>
    1b2c:	80 91 66 01 	lds	r24, 0x0166

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1b30:	81 11       	cpse	r24, r1
    1b32:	24 c0       	rjmp	.+72     	; 0x1b7c <USB_Device_ProcessControlRequest+0x10c>
    1b34:	20 91 68 01 	lds	r18, 0x0168
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1b38:	2f 70       	andi	r18, 0x0F	; 15
    1b3a:	09 f4       	brne	.+2      	; 0x1b3e <USB_Device_ProcessControlRequest+0xce>
    1b3c:	c9 c0       	rjmp	.+402    	; 0x1cd0 <USB_Device_ProcessControlRequest+0x260>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1b3e:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b42:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1b46:	80 ff       	sbrs	r24, 0
    1b48:	19 c0       	rjmp	.+50     	; 0x1b7c <USB_Device_ProcessControlRequest+0x10c>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1b4a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1b4e:	33 30       	cpi	r19, 0x03	; 3
    1b50:	11 f4       	brne	.+4      	; 0x1b56 <USB_Device_ProcessControlRequest+0xe6>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1b52:	80 62       	ori	r24, 0x20	; 32
    1b54:	11 c0       	rjmp	.+34     	; 0x1b78 <USB_Device_ProcessControlRequest+0x108>
    1b56:	80 61       	ori	r24, 0x10	; 16
    1b58:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1b60:	02 2e       	mov	r0, r18
    1b62:	01 c0       	rjmp	.+2      	; 0x1b66 <USB_Device_ProcessControlRequest+0xf6>
    1b64:	88 0f       	add	r24, r24
    1b66:	0a 94       	dec	r0
    1b68:	ea f7       	brpl	.-6      	; 0x1b64 <USB_Device_ProcessControlRequest+0xf4>
    1b6a:	80 93 ea 00 	sts	0x00EA, r24
    1b6e:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    1b72:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1b76:	88 60       	ori	r24, 0x08	; 8
    1b78:	80 93 eb 00 	sts	0x00EB, r24
    1b7c:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b80:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b84:	87 7f       	andi	r24, 0xF7	; 247
    1b86:	83 c0       	rjmp	.+262    	; 0x1c8e <USB_Device_ProcessControlRequest+0x21e>
    1b88:	21 11       	cpse	r18, r1
    1b8a:	a2 c0       	rjmp	.+324    	; 0x1cd0 <USB_Device_ProcessControlRequest+0x260>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1b8c:	10 91 66 01 	lds	r17, 0x0166
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    1b90:	1f 77       	andi	r17, 0x7F	; 127
    1b92:	0f b7       	in	r16, 0x3f	; 63
    1b94:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1b96:	80 91 e8 00 	lds	r24, 0x00E8
    1b9a:	87 7f       	andi	r24, 0xF7	; 247
    1b9c:	80 93 e8 00 	sts	0x00E8, r24
    1ba0:	b9 dc       	rcall	.-1678   	; 0x1514 <Endpoint_ClearStatusStage>
    1ba2:	80 91 e8 00 	lds	r24, 0x00E8
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1ba6:	80 ff       	sbrs	r24, 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ba8:	fc cf       	rjmp	.-8      	; 0x1ba2 <USB_Device_ProcessControlRequest+0x132>
    1baa:	80 91 e3 00 	lds	r24, 0x00E3

	while (!(Endpoint_IsINReady()));
    1bae:	80 78       	andi	r24, 0x80	; 128
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1bb0:	81 2b       	or	r24, r17
    1bb2:	80 93 e3 00 	sts	0x00E3, r24
    1bb6:	80 68       	ori	r24, 0x80	; 128

				UDADDR = Temp;
    1bb8:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    1bbc:	11 23       	and	r17, r17
    1bbe:	11 f0       	breq	.+4      	; 0x1bc4 <USB_Device_ProcessControlRequest+0x154>
    1bc0:	83 e0       	ldi	r24, 0x03	; 3

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1bc2:	01 c0       	rjmp	.+2      	; 0x1bc6 <USB_Device_ProcessControlRequest+0x156>
    1bc4:	82 e0       	ldi	r24, 0x02	; 2
    1bc6:	80 93 63 01 	sts	0x0163, r24
    1bca:	0f bf       	out	0x3f, r16	; 63
    1bcc:	81 c0       	rjmp	.+258    	; 0x1cd0 <USB_Device_ProcessControlRequest+0x260>
    1bce:	20 58       	subi	r18, 0x80	; 128
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1bd0:	22 30       	cpi	r18, 0x02	; 2
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
    1bd2:	08 f0       	brcs	.+2      	; 0x1bd6 <USB_Device_ProcessControlRequest+0x166>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1bd4:	7d c0       	rjmp	.+250    	; 0x1cd0 <USB_Device_ProcessControlRequest+0x260>
    1bd6:	80 91 66 01 	lds	r24, 0x0166
    1bda:	90 91 67 01 	lds	r25, 0x0167
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1bde:	8c 3d       	cpi	r24, 0xDC	; 220
    1be0:	23 e0       	ldi	r18, 0x03	; 3
    1be2:	92 07       	cpc	r25, r18
    1be4:	71 f5       	brne	.+92     	; 0x1c42 <USB_Device_ProcessControlRequest+0x1d2>
    1be6:	83 e0       	ldi	r24, 0x03	; 3
    1be8:	8a 83       	std	Y+2, r24	; 0x02
    1bea:	8a e2       	ldi	r24, 0x2A	; 42
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1bec:	89 83       	std	Y+1, r24	; 0x01
    1bee:	4f b7       	in	r20, 0x3f	; 63
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1bf0:	f8 94       	cli
    1bf2:	de 01       	movw	r26, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1bf4:	13 96       	adiw	r26, 0x03	; 3
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1bf8:	3e e0       	ldi	r19, 0x0E	; 14
    1bfa:	51 e2       	ldi	r21, 0x21	; 33
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1bfc:	e3 2f       	mov	r30, r19
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1c00:	50 93 57 00 	sts	0x0057, r21
    1c04:	e4 91       	lpm	r30, Z
    1c06:	20 ff       	sbrs	r18, 0
    1c08:	03 c0       	rjmp	.+6      	; 0x1c10 <USB_Device_ProcessControlRequest+0x1a0>
    1c0a:	e2 95       	swap	r30

					if (SerialCharNum & 0x01)
    1c0c:	ef 70       	andi	r30, 0x0F	; 15
    1c0e:	3f 5f       	subi	r19, 0xFF	; 255
					{
						SerialByte >>= 4;
    1c10:	ef 70       	andi	r30, 0x0F	; 15
    1c12:	8e 2f       	mov	r24, r30
						SigReadAddress++;
    1c14:	90 e0       	ldi	r25, 0x00	; 0
					}

					SerialByte &= 0x0F;
    1c16:	ea 30       	cpi	r30, 0x0A	; 10
    1c18:	10 f0       	brcs	.+4      	; 0x1c1e <USB_Device_ProcessControlRequest+0x1ae>
    1c1a:	c7 96       	adiw	r24, 0x37	; 55

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1c1c:	01 c0       	rjmp	.+2      	; 0x1c20 <USB_Device_ProcessControlRequest+0x1b0>
    1c1e:	c0 96       	adiw	r24, 0x30	; 48
    1c20:	8d 93       	st	X+, r24
    1c22:	9d 93       	st	X+, r25
    1c24:	2f 5f       	subi	r18, 0xFF	; 255
    1c26:	24 31       	cpi	r18, 0x14	; 20
    1c28:	49 f7       	brne	.-46     	; 0x1bfc <USB_Device_ProcessControlRequest+0x18c>
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1c2a:	4f bf       	out	0x3f, r20	; 63
    1c2c:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1c30:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1c32:	80 93 e8 00 	sts	0x00E8, r24
    1c36:	6a e2       	ldi	r22, 0x2A	; 42
    1c38:	70 e0       	ldi	r23, 0x00	; 0
    1c3a:	ce 01       	movw	r24, r28

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1c3c:	01 96       	adiw	r24, 0x01	; 1
    1c3e:	1f de       	rcall	.-962    	; 0x187e <Endpoint_Write_Control_Stream_LE>
    1c40:	12 c0       	rjmp	.+36     	; 0x1c66 <USB_Device_ProcessControlRequest+0x1f6>
    1c42:	ae 01       	movw	r20, r28
    1c44:	4f 5f       	subi	r20, 0xFF	; 255
    1c46:	5f 4f       	sbci	r21, 0xFF	; 255
    1c48:	60 91 68 01 	lds	r22, 0x0168
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1c4c:	7e d8       	rcall	.-3844   	; 0xd4a <CALLBACK_USB_GetDescriptor>
    1c4e:	00 97       	sbiw	r24, 0x00	; 0
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <USB_Device_ProcessControlRequest+0x1e4>
    1c52:	3e c0       	rjmp	.+124    	; 0x1cd0 <USB_Device_ProcessControlRequest+0x260>
    1c54:	20 91 e8 00 	lds	r18, 0x00E8
    1c58:	27 7f       	andi	r18, 0xF7	; 247
    1c5a:	20 93 e8 00 	sts	0x00E8, r18
    1c5e:	bc 01       	movw	r22, r24
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	9a 81       	ldd	r25, Y+2	; 0x02
    1c64:	a7 de       	rcall	.-690    	; 0x19b4 <Endpoint_Write_Control_PStream_LE>
    1c66:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1c6a:	8b 77       	andi	r24, 0x7B	; 123
    1c6c:	80 93 e8 00 	sts	0x00E8, r24
    1c70:	2f c0       	rjmp	.+94     	; 0x1cd0 <USB_Device_ProcessControlRequest+0x260>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1c72:	20 38       	cpi	r18, 0x80	; 128
    1c74:	69 f5       	brne	.+90     	; 0x1cd0 <USB_Device_ProcessControlRequest+0x260>
    1c76:	80 91 e8 00 	lds	r24, 0x00E8
    1c7a:	87 7f       	andi	r24, 0xF7	; 247
    1c7c:	80 93 e8 00 	sts	0x00E8, r24
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1c80:	80 91 5f 01 	lds	r24, 0x015F
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1c84:	80 93 f1 00 	sts	0x00F1, r24
    1c88:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1c8c:	8e 77       	andi	r24, 0x7E	; 126
    1c8e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1c92:	40 dc       	rcall	.-1920   	; 0x1514 <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c94:	1d c0       	rjmp	.+58     	; 0x1cd0 <USB_Device_ProcessControlRequest+0x260>
    1c96:	21 11       	cpse	r18, r1
    1c98:	1b c0       	rjmp	.+54     	; 0x1cd0 <USB_Device_ProcessControlRequest+0x260>
    1c9a:	90 91 66 01 	lds	r25, 0x0166
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1c9e:	92 30       	cpi	r25, 0x02	; 2
    1ca0:	b8 f4       	brcc	.+46     	; 0x1cd0 <USB_Device_ProcessControlRequest+0x260>
    1ca2:	80 91 e8 00 	lds	r24, 0x00E8
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1ca6:	87 7f       	andi	r24, 0xF7	; 247
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1ca8:	80 93 e8 00 	sts	0x00E8, r24
    1cac:	90 93 5f 01 	sts	0x015F, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1cb0:	31 dc       	rcall	.-1950   	; 0x1514 <Endpoint_ClearStatusStage>
    1cb2:	80 91 5f 01 	lds	r24, 0x015F
    1cb6:	81 11       	cpse	r24, r1
    1cb8:	04 c0       	rjmp	.+8      	; 0x1cc2 <USB_Device_ProcessControlRequest+0x252>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1cba:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
    1cbe:	87 ff       	sbrs	r24, 7
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <USB_Device_ProcessControlRequest+0x256>

	if (USB_Device_ConfigurationNumber)
    1cc2:	84 e0       	ldi	r24, 0x04	; 4
    1cc4:	01 c0       	rjmp	.+2      	; 0x1cc8 <USB_Device_ProcessControlRequest+0x258>
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	80 93 63 01 	sts	0x0163, r24
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1ccc:	0e 94 8d 05 	call	0xb1a	; 0xb1a <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1cd0:	80 91 e8 00 	lds	r24, 0x00E8
    1cd4:	83 ff       	sbrs	r24, 3
    1cd6:	0a c0       	rjmp	.+20     	; 0x1cec <USB_Device_ProcessControlRequest+0x27c>
    1cd8:	80 91 eb 00 	lds	r24, 0x00EB

	EVENT_USB_Device_ConfigurationChanged();
    1cdc:	80 62       	ori	r24, 0x20	; 32
    1cde:	80 93 eb 00 	sts	0x00EB, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1ce2:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1ce6:	87 7f       	andi	r24, 0xF7	; 247
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1ce8:	80 93 e8 00 	sts	0x00E8, r24
    1cec:	aa 96       	adiw	r28, 0x2a	; 42
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	f8 94       	cli
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1cf2:	de bf       	out	0x3e, r29	; 62
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	cd bf       	out	0x3d, r28	; 61
    1cf8:	df 91       	pop	r29
    1cfa:	cf 91       	pop	r28
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    1cfc:	1f 91       	pop	r17
    1cfe:	0f 91       	pop	r16
    1d00:	08 95       	ret

00001d02 <USB_Event_Stub>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

// cppcheck-suppress unusedFunction
void USB_Event_Stub(void)
{
    1d02:	08 95       	ret

00001d04 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1d04:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    1d06:	80 91 63 01 	lds	r24, 0x0163
    1d0a:	88 23       	and	r24, r24
    1d0c:	a9 f0       	breq	.+42     	; 0x1d38 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1d0e:	80 91 e9 00 	lds	r24, 0x00E9
    1d12:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1d14:	90 91 ec 00 	lds	r25, 0x00EC
    1d18:	90 ff       	sbrs	r25, 0
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <USB_USBTask+0x1c>
    1d1c:	90 e8       	ldi	r25, 0x80	; 128
    1d1e:	01 c0       	rjmp	.+2      	; 0x1d22 <USB_USBTask+0x1e>
    1d20:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1d22:	c9 2f       	mov	r28, r25
    1d24:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d26:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d2a:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    1d2e:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
    1d30:	9f de       	rcall	.-706    	; 0x1a70 <USB_Device_ProcessControlRequest>
    1d32:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d34:	c0 93 e9 00 	sts	0x00E9, r28
    1d38:	cf 91       	pop	r28
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
    1d3a:	08 95       	ret

00001d3c <HID_Device_ProcessControlRequest>:
    1d3c:	6f 92       	push	r6
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1d3e:	7f 92       	push	r7
    1d40:	8f 92       	push	r8
    1d42:	9f 92       	push	r9
    1d44:	af 92       	push	r10
    1d46:	bf 92       	push	r11
    1d48:	cf 92       	push	r12
    1d4a:	df 92       	push	r13
    1d4c:	ef 92       	push	r14
    1d4e:	ff 92       	push	r15
    1d50:	0f 93       	push	r16
    1d52:	1f 93       	push	r17
    1d54:	cf 93       	push	r28
    1d56:	df 93       	push	r29
    1d58:	00 d0       	rcall	.+0      	; 0x1d5a <HID_Device_ProcessControlRequest+0x1e>
    1d5a:	1f 92       	push	r1
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1d62:	ad b6       	in	r10, 0x3d	; 61
    1d64:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d66:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    1d6a:	83 ff       	sbrs	r24, 3
    1d6c:	00 c1       	rjmp	.+512    	; 0x1f6e <HID_Device_ProcessControlRequest+0x232>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    1d6e:	f7 01       	movw	r30, r14
    1d70:	80 81       	ld	r24, Z
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	20 91 68 01 	lds	r18, 0x0168
    1d78:	30 91 69 01 	lds	r19, 0x0169
    1d7c:	28 17       	cp	r18, r24
    1d7e:	39 07       	cpc	r19, r25
    1d80:	09 f0       	breq	.+2      	; 0x1d84 <HID_Device_ProcessControlRequest+0x48>
    1d82:	f5 c0       	rjmp	.+490    	; 0x1f6e <HID_Device_ProcessControlRequest+0x232>
	  return;

	switch (USB_ControlRequest.bRequest)
    1d84:	80 91 65 01 	lds	r24, 0x0165
    1d88:	83 30       	cpi	r24, 0x03	; 3
    1d8a:	09 f4       	brne	.+2      	; 0x1d8e <HID_Device_ProcessControlRequest+0x52>
    1d8c:	97 c0       	rjmp	.+302    	; 0x1ebc <HID_Device_ProcessControlRequest+0x180>
    1d8e:	30 f4       	brcc	.+12     	; 0x1d9c <HID_Device_ProcessControlRequest+0x60>
    1d90:	81 30       	cpi	r24, 0x01	; 1
    1d92:	71 f0       	breq	.+28     	; 0x1db0 <HID_Device_ProcessControlRequest+0x74>
    1d94:	82 30       	cpi	r24, 0x02	; 2
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <HID_Device_ProcessControlRequest+0x5e>
    1d98:	ce c0       	rjmp	.+412    	; 0x1f36 <HID_Device_ProcessControlRequest+0x1fa>
    1d9a:	e9 c0       	rjmp	.+466    	; 0x1f6e <HID_Device_ProcessControlRequest+0x232>
    1d9c:	8a 30       	cpi	r24, 0x0A	; 10
    1d9e:	09 f4       	brne	.+2      	; 0x1da2 <HID_Device_ProcessControlRequest+0x66>
    1da0:	b2 c0       	rjmp	.+356    	; 0x1f06 <HID_Device_ProcessControlRequest+0x1ca>
    1da2:	8b 30       	cpi	r24, 0x0B	; 11
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <HID_Device_ProcessControlRequest+0x6c>
    1da6:	9b c0       	rjmp	.+310    	; 0x1ede <HID_Device_ProcessControlRequest+0x1a2>
    1da8:	89 30       	cpi	r24, 0x09	; 9
    1daa:	09 f0       	breq	.+2      	; 0x1dae <HID_Device_ProcessControlRequest+0x72>
    1dac:	e0 c0       	rjmp	.+448    	; 0x1f6e <HID_Device_ProcessControlRequest+0x232>
    1dae:	48 c0       	rjmp	.+144    	; 0x1e40 <HID_Device_ProcessControlRequest+0x104>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1db0:	80 91 64 01 	lds	r24, 0x0164
    1db4:	81 3a       	cpi	r24, 0xA1	; 161
    1db6:	09 f0       	breq	.+2      	; 0x1dba <HID_Device_ProcessControlRequest+0x7e>
    1db8:	da c0       	rjmp	.+436    	; 0x1f6e <HID_Device_ProcessControlRequest+0x232>
    1dba:	8d b6       	in	r8, 0x3d	; 61
    1dbc:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    1dbe:	1a 82       	std	Y+2, r1	; 0x02
    1dc0:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1dc2:	80 91 66 01 	lds	r24, 0x0166
    1dc6:	10 91 67 01 	lds	r17, 0x0167
    1dca:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1dcc:	f7 01       	movw	r30, r14
    1dce:	40 85       	ldd	r20, Z+8	; 0x08
    1dd0:	50 e0       	ldi	r21, 0x00	; 0
    1dd2:	8d b7       	in	r24, 0x3d	; 61
    1dd4:	9e b7       	in	r25, 0x3e	; 62
    1dd6:	84 1b       	sub	r24, r20
    1dd8:	95 0b       	sbc	r25, r21
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	9e bf       	out	0x3e, r25	; 62
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	8d bf       	out	0x3d, r24	; 61
    1de4:	ed b7       	in	r30, 0x3d	; 61
    1de6:	fe b7       	in	r31, 0x3e	; 62
    1de8:	31 96       	adiw	r30, 0x01	; 1
    1dea:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
    1dec:	60 e0       	ldi	r22, 0x00	; 0
    1dee:	70 e0       	ldi	r23, 0x00	; 0
    1df0:	cf 01       	movw	r24, r30
    1df2:	0c d5       	rcall	.+2584   	; 0x280c <memset>
    1df4:	4f ef       	ldi	r20, 0xFF	; 255
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    1df6:	41 0f       	add	r20, r17
    1df8:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    1dfa:	0f 5f       	subi	r16, 0xFF	; 255
    1dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfe:	96 01       	movw	r18, r12
    1e00:	be 01       	movw	r22, r28
    1e02:	6d 5f       	subi	r22, 0xFD	; 253
    1e04:	7f 4f       	sbci	r23, 0xFF	; 255
    1e06:	c7 01       	movw	r24, r14
    1e08:	0e 94 a7 05 	call	0xb4e	; 0xb4e <CALLBACK_HID_Device_CreateHIDReport>
    1e0c:	f7 01       	movw	r30, r14

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1e0e:	86 81       	ldd	r24, Z+6	; 0x06
    1e10:	97 81       	ldd	r25, Z+7	; 0x07
    1e12:	00 97       	sbiw	r24, 0x00	; 0
    1e14:	21 f0       	breq	.+8      	; 0x1e1e <HID_Device_ProcessControlRequest+0xe2>
    1e16:	40 85       	ldd	r20, Z+8	; 0x08
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    1e18:	50 e0       	ldi	r21, 0x00	; 0
    1e1a:	b6 01       	movw	r22, r12
    1e1c:	ee d4       	rcall	.+2524   	; 0x27fa <memcpy>
    1e1e:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e22:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e26:	87 7f       	andi	r24, 0xF7	; 247
    1e28:	80 93 e8 00 	sts	0x00E8, r24
    1e2c:	69 81       	ldd	r22, Y+1	; 0x01
    1e2e:	7a 81       	ldd	r23, Y+2	; 0x02
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1e30:	c6 01       	movw	r24, r12
    1e32:	25 dd       	rcall	.-1462   	; 0x187e <Endpoint_Write_Control_Stream_LE>
    1e34:	80 91 e8 00 	lds	r24, 0x00E8
    1e38:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1e3a:	80 93 e8 00 	sts	0x00E8, r24
    1e3e:	38 c0       	rjmp	.+112    	; 0x1eb0 <HID_Device_ProcessControlRequest+0x174>
    1e40:	80 91 64 01 	lds	r24, 0x0164
    1e44:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1e46:	09 f0       	breq	.+2      	; 0x1e4a <HID_Device_ProcessControlRequest+0x10e>
    1e48:	92 c0       	rjmp	.+292    	; 0x1f6e <HID_Device_ProcessControlRequest+0x232>
    1e4a:	8d b6       	in	r8, 0x3d	; 61
    1e4c:	9e b6       	in	r9, 0x3e	; 62
    1e4e:	00 91 6a 01 	lds	r16, 0x016A
    1e52:	10 91 6b 01 	lds	r17, 0x016B
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    1e56:	70 90 66 01 	lds	r7, 0x0166
    1e5a:	60 90 67 01 	lds	r6, 0x0167
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1e5e:	8d b7       	in	r24, 0x3d	; 61
    1e60:	9e b7       	in	r25, 0x3e	; 62
    1e62:	80 1b       	sub	r24, r16
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    1e64:	91 0b       	sbc	r25, r17
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	9e bf       	out	0x3e, r25	; 62
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	8d bf       	out	0x3d, r24	; 61
    1e70:	ed b7       	in	r30, 0x3d	; 61
    1e72:	fe b7       	in	r31, 0x3e	; 62
    1e74:	31 96       	adiw	r30, 0x01	; 1
    1e76:	6f 01       	movw	r12, r30
    1e78:	80 91 e8 00 	lds	r24, 0x00E8
    1e7c:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e7e:	80 93 e8 00 	sts	0x00E8, r24
    1e82:	b8 01       	movw	r22, r16
    1e84:	cf 01       	movw	r24, r30
    1e86:	56 dd       	rcall	.-1364   	; 0x1934 <Endpoint_Read_Control_Stream_LE>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    1e88:	80 91 e8 00 	lds	r24, 0x00E8
    1e8c:	8e 77       	andi	r24, 0x7E	; 126
    1e8e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1e92:	21 e0       	ldi	r18, 0x01	; 1
    1e94:	71 10       	cpse	r7, r1
    1e96:	01 c0       	rjmp	.+2      	; 0x1e9a <HID_Device_ProcessControlRequest+0x15e>
    1e98:	20 e0       	ldi	r18, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	02 1b       	sub	r16, r18
    1e9e:	13 0b       	sbc	r17, r19
    1ea0:	2c 0d       	add	r18, r12
    1ea2:	3d 1d       	adc	r19, r13
    1ea4:	4f ef       	ldi	r20, 0xFF	; 255
    1ea6:	46 0d       	add	r20, r6
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    1ea8:	67 2d       	mov	r22, r7
    1eaa:	c7 01       	movw	r24, r14
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    1eac:	0e 94 d3 05 	call	0xba6	; 0xba6 <CALLBACK_HID_Device_ProcessHIDReport>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	9e be       	out	0x3e, r9	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	8d be       	out	0x3d, r8	; 61
    1eba:	59 c0       	rjmp	.+178    	; 0x1f6e <HID_Device_ProcessControlRequest+0x232>
    1ebc:	80 91 64 01 	lds	r24, 0x0164
    1ec0:	81 3a       	cpi	r24, 0xA1	; 161
    1ec2:	09 f0       	breq	.+2      	; 0x1ec6 <HID_Device_ProcessControlRequest+0x18a>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1ec4:	54 c0       	rjmp	.+168    	; 0x1f6e <HID_Device_ProcessControlRequest+0x232>
    1ec6:	80 91 e8 00 	lds	r24, 0x00E8
    1eca:	87 7f       	andi	r24, 0xF7	; 247
    1ecc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ed0:	80 91 e8 00 	lds	r24, 0x00E8
    1ed4:	80 ff       	sbrs	r24, 0
    1ed6:	fc cf       	rjmp	.-8      	; 0x1ed0 <HID_Device_ProcessControlRequest+0x194>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ed8:	f7 01       	movw	r30, r14
    1eda:	81 85       	ldd	r24, Z+9	; 0x09
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1edc:	40 c0       	rjmp	.+128    	; 0x1f5e <HID_Device_ProcessControlRequest+0x222>
    1ede:	80 91 64 01 	lds	r24, 0x0164
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1ee2:	81 32       	cpi	r24, 0x21	; 33
    1ee4:	09 f0       	breq	.+2      	; 0x1ee8 <HID_Device_ProcessControlRequest+0x1ac>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1ee6:	43 c0       	rjmp	.+134    	; 0x1f6e <HID_Device_ProcessControlRequest+0x232>
    1ee8:	80 91 e8 00 	lds	r24, 0x00E8
    1eec:	87 7f       	andi	r24, 0xF7	; 247
    1eee:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ef2:	10 db       	rcall	.-2528   	; 0x1514 <Endpoint_ClearStatusStage>
    1ef4:	90 91 66 01 	lds	r25, 0x0166
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1efa:	91 11       	cpse	r25, r1
    1efc:	01 c0       	rjmp	.+2      	; 0x1f00 <HID_Device_ProcessControlRequest+0x1c4>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	f7 01       	movw	r30, r14
    1f02:	81 87       	std	Z+9, r24	; 0x09
    1f04:	34 c0       	rjmp	.+104    	; 0x1f6e <HID_Device_ProcessControlRequest+0x232>
    1f06:	80 91 64 01 	lds	r24, 0x0164
    1f0a:	81 32       	cpi	r24, 0x21	; 33
    1f0c:	81 f5       	brne	.+96     	; 0x1f6e <HID_Device_ProcessControlRequest+0x232>
    1f0e:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1f12:	87 7f       	andi	r24, 0xF7	; 247
    1f14:	80 93 e8 00 	sts	0x00E8, r24
    1f18:	fd da       	rcall	.-2566   	; 0x1514 <Endpoint_ClearStatusStage>
    1f1a:	80 91 66 01 	lds	r24, 0x0166
    1f1e:	90 91 67 01 	lds	r25, 0x0167
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1f22:	88 27       	eor	r24, r24
    1f24:	36 e0       	ldi	r19, 0x06	; 6

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1f26:	96 95       	lsr	r25
    1f28:	87 95       	ror	r24
    1f2a:	3a 95       	dec	r19
    1f2c:	e1 f7       	brne	.-8      	; 0x1f26 <HID_Device_ProcessControlRequest+0x1ea>
    1f2e:	f7 01       	movw	r30, r14
    1f30:	95 87       	std	Z+13, r25	; 0x0d
    1f32:	84 87       	std	Z+12, r24	; 0x0c
    1f34:	1c c0       	rjmp	.+56     	; 0x1f6e <HID_Device_ProcessControlRequest+0x232>
    1f36:	80 91 64 01 	lds	r24, 0x0164
    1f3a:	81 3a       	cpi	r24, 0xA1	; 161
    1f3c:	c1 f4       	brne	.+48     	; 0x1f6e <HID_Device_ProcessControlRequest+0x232>
    1f3e:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1f42:	87 7f       	andi	r24, 0xF7	; 247
    1f44:	80 93 e8 00 	sts	0x00E8, r24
    1f48:	80 91 e8 00 	lds	r24, 0x00E8
    1f4c:	80 ff       	sbrs	r24, 0
    1f4e:	fc cf       	rjmp	.-8      	; 0x1f48 <HID_Device_ProcessControlRequest+0x20c>
    1f50:	f7 01       	movw	r30, r14
    1f52:	84 85       	ldd	r24, Z+12	; 0x0c
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f54:	95 85       	ldd	r25, Z+13	; 0x0d
    1f56:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1f58:	87 95       	ror	r24
    1f5a:	96 95       	lsr	r25
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    1f5c:	87 95       	ror	r24
    1f5e:	80 93 f1 00 	sts	0x00F1, r24
    1f62:	80 91 e8 00 	lds	r24, 0x00E8
    1f66:	8e 77       	andi	r24, 0x7E	; 126
    1f68:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1f6c:	d3 da       	rcall	.-2650   	; 0x1514 <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	be be       	out	0x3e, r11	; 62
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	ad be       	out	0x3d, r10	; 61
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
			}

			break;
	}
}
    1f7c:	0f 90       	pop	r0
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	1f 91       	pop	r17
    1f84:	0f 91       	pop	r16
    1f86:	ff 90       	pop	r15
    1f88:	ef 90       	pop	r14
    1f8a:	df 90       	pop	r13
    1f8c:	cf 90       	pop	r12
    1f8e:	bf 90       	pop	r11
    1f90:	af 90       	pop	r10
    1f92:	9f 90       	pop	r9
    1f94:	8f 90       	pop	r8
    1f96:	7f 90       	pop	r7
    1f98:	6f 90       	pop	r6
    1f9a:	08 95       	ret

00001f9c <HID_Device_ConfigureEndpoints>:
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	39 96       	adiw	r30, 0x09	; 9
    1fa0:	27 e0       	ldi	r18, 0x07	; 7
    1fa2:	df 01       	movw	r26, r30
    1fa4:	1d 92       	st	X+, r1
    1fa6:	2a 95       	dec	r18
    1fa8:	e9 f7       	brne	.-6      	; 0x1fa4 <HID_Device_ConfigureEndpoints+0x8>

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    1faa:	21 e0       	ldi	r18, 0x01	; 1
    1fac:	fc 01       	movw	r30, r24
    1fae:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    1fb0:	24 ef       	ldi	r18, 0xF4	; 244
    1fb2:	31 e0       	ldi	r19, 0x01	; 1
    1fb4:	35 87       	std	Z+13, r19	; 0x0d
    1fb6:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    1fb8:	23 e0       	ldi	r18, 0x03	; 3
    1fba:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    1fbc:	61 e0       	ldi	r22, 0x01	; 1
    1fbe:	01 96       	adiw	r24, 0x01	; 1
    1fc0:	6c ca       	rjmp	.-2856   	; 0x149a <Endpoint_ConfigureEndpointTable>

00001fc2 <HID_Device_USBTask>:
    1fc2:	5f 92       	push	r5
	
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1fc4:	6f 92       	push	r6
    1fc6:	7f 92       	push	r7
    1fc8:	8f 92       	push	r8
    1fca:	9f 92       	push	r9
    1fcc:	af 92       	push	r10
    1fce:	bf 92       	push	r11
    1fd0:	cf 92       	push	r12
    1fd2:	df 92       	push	r13
    1fd4:	ef 92       	push	r14
    1fd6:	ff 92       	push	r15
    1fd8:	0f 93       	push	r16
    1fda:	1f 93       	push	r17
    1fdc:	cf 93       	push	r28
    1fde:	df 93       	push	r29
    1fe0:	00 d0       	rcall	.+0      	; 0x1fe2 <HID_Device_USBTask+0x20>
    1fe2:	1f 92       	push	r1
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
    1fe8:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    1fea:	ad b6       	in	r10, 0x3d	; 61
    1fec:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1fee:	80 91 63 01 	lds	r24, 0x0163
    1ff2:	84 30       	cpi	r24, 0x04	; 4
    1ff4:	09 f0       	breq	.+2      	; 0x1ff8 <HID_Device_USBTask+0x36>
    1ff6:	8b c0       	rjmp	.+278    	; 0x210e <HID_Device_USBTask+0x14c>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1ff8:	80 91 e4 00 	lds	r24, 0x00E4
    1ffc:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    2000:	f7 01       	movw	r30, r14
    2002:	22 85       	ldd	r18, Z+10	; 0x0a
    2004:	33 85       	ldd	r19, Z+11	; 0x0b
    2006:	28 17       	cp	r18, r24
    2008:	39 07       	cpc	r19, r25
    200a:	09 f4       	brne	.+2      	; 0x200e <HID_Device_USBTask+0x4c>
    200c:	80 c0       	rjmp	.+256    	; 0x210e <HID_Device_USBTask+0x14c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    200e:	81 81       	ldd	r24, Z+1	; 0x01
    2010:	8f 70       	andi	r24, 0x0F	; 15
    2012:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2016:	80 91 e8 00 	lds	r24, 0x00E8
	  return;
	  
	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    201a:	85 ff       	sbrs	r24, 5
    201c:	78 c0       	rjmp	.+240    	; 0x210e <HID_Device_USBTask+0x14c>
    201e:	8d b6       	in	r8, 0x3d	; 61
    2020:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    2022:	40 85       	ldd	r20, Z+8	; 0x08
    2024:	50 e0       	ldi	r21, 0x00	; 0
    2026:	8d b7       	in	r24, 0x3d	; 61
    2028:	9e b7       	in	r25, 0x3e	; 62
    202a:	84 1b       	sub	r24, r20
    202c:	95 0b       	sbc	r25, r21
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	9e bf       	out	0x3e, r25	; 62
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	8d bf       	out	0x3d, r24	; 61
    2038:	ed b7       	in	r30, 0x3d	; 61
    203a:	fe b7       	in	r31, 0x3e	; 62
    203c:	31 96       	adiw	r30, 0x01	; 1
    203e:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    2040:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    2042:	1a 82       	std	Y+2, r1	; 0x02
    2044:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    2046:	60 e0       	ldi	r22, 0x00	; 0
    2048:	70 e0       	ldi	r23, 0x00	; 0
    204a:	cf 01       	movw	r24, r30
    204c:	df d3       	rcall	.+1982   	; 0x280c <memset>
    204e:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    2050:	0f 5f       	subi	r16, 0xFF	; 255
    2052:	1f 4f       	sbci	r17, 0xFF	; 255
    2054:	96 01       	movw	r18, r12
    2056:	40 e0       	ldi	r20, 0x00	; 0
    2058:	be 01       	movw	r22, r28
    205a:	6d 5f       	subi	r22, 0xFD	; 253
    205c:	7f 4f       	sbci	r23, 0xFF	; 255
    205e:	c7 01       	movw	r24, r14
    2060:	0e 94 a7 05 	call	0xb4e	; 0xb4e <CALLBACK_HID_Device_CreateHIDReport>
    2064:	68 2e       	mov	r6, r24
    2066:	f7 01       	movw	r30, r14
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    2068:	84 85       	ldd	r24, Z+12	; 0x0c
    206a:	95 85       	ldd	r25, Z+13	; 0x0d
    206c:	89 2b       	or	r24, r25
    206e:	41 f0       	breq	.+16     	; 0x2080 <HID_Device_USBTask+0xbe>
    2070:	21 e0       	ldi	r18, 0x01	; 1
    2072:	86 85       	ldd	r24, Z+14	; 0x0e
    2074:	97 85       	ldd	r25, Z+15	; 0x0f
    2076:	89 2b       	or	r24, r25
    2078:	09 f0       	breq	.+2      	; 0x207c <HID_Device_USBTask+0xba>
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	72 2e       	mov	r7, r18
    207e:	01 c0       	rjmp	.+2      	; 0x2082 <HID_Device_USBTask+0xc0>
    2080:	71 2c       	mov	r7, r1
    2082:	f7 01       	movw	r30, r14

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    2084:	06 81       	ldd	r16, Z+6	; 0x06
    2086:	17 81       	ldd	r17, Z+7	; 0x07
    2088:	01 15       	cp	r16, r1
    208a:	11 05       	cpc	r17, r1
    208c:	89 f0       	breq	.+34     	; 0x20b0 <HID_Device_USBTask+0xee>
    208e:	49 81       	ldd	r20, Y+1	; 0x01
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    2090:	5a 81       	ldd	r21, Y+2	; 0x02
    2092:	b8 01       	movw	r22, r16
    2094:	c6 01       	movw	r24, r12
    2096:	a4 d3       	rcall	.+1864   	; 0x27e0 <memcmp>
    2098:	55 24       	eor	r5, r5
    209a:	53 94       	inc	r5
    209c:	89 2b       	or	r24, r25
    209e:	09 f4       	brne	.+2      	; 0x20a2 <HID_Device_USBTask+0xe0>
    20a0:	51 2c       	mov	r5, r1
    20a2:	f7 01       	movw	r30, r14
    20a4:	40 85       	ldd	r20, Z+8	; 0x08
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    20a6:	50 e0       	ldi	r21, 0x00	; 0
    20a8:	b6 01       	movw	r22, r12
    20aa:	c8 01       	movw	r24, r16
    20ac:	a6 d3       	rcall	.+1868   	; 0x27fa <memcpy>
    20ae:	01 c0       	rjmp	.+2      	; 0x20b2 <HID_Device_USBTask+0xf0>
    20b0:	51 2c       	mov	r5, r1
    20b2:	29 81       	ldd	r18, Y+1	; 0x01
    20b4:	3a 81       	ldd	r19, Y+2	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    20b6:	23 2b       	or	r18, r19
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    20b8:	f1 f0       	breq	.+60     	; 0x20f6 <HID_Device_USBTask+0x134>
    20ba:	61 10       	cpse	r6, r1
    20bc:	04 c0       	rjmp	.+8      	; 0x20c6 <HID_Device_USBTask+0x104>
    20be:	51 10       	cpse	r5, r1
    20c0:	02 c0       	rjmp	.+4      	; 0x20c6 <HID_Device_USBTask+0x104>
    20c2:	70 fe       	sbrs	r7, 0
    20c4:	18 c0       	rjmp	.+48     	; 0x20f6 <HID_Device_USBTask+0x134>
    20c6:	f7 01       	movw	r30, r14
    20c8:	84 85       	ldd	r24, Z+12	; 0x0c
    20ca:	95 85       	ldd	r25, Z+13	; 0x0d
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    20cc:	97 87       	std	Z+15, r25	; 0x0f
    20ce:	86 87       	std	Z+14, r24	; 0x0e
    20d0:	81 81       	ldd	r24, Z+1	; 0x01
    20d2:	8f 70       	andi	r24, 0x0F	; 15
    20d4:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	81 11       	cpse	r24, r1
    20dc:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    20e0:	69 81       	ldd	r22, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    20e2:	7a 81       	ldd	r23, Y+2	; 0x02
    20e4:	40 e0       	ldi	r20, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    20e6:	50 e0       	ldi	r21, 0x00	; 0
    20e8:	c6 01       	movw	r24, r12
    20ea:	81 db       	rcall	.-2302   	; 0x17ee <Endpoint_Write_Stream_LE>
    20ec:	80 91 e8 00 	lds	r24, 0x00E8
    20f0:	8e 77       	andi	r24, 0x7E	; 126
    20f2:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20f6:	80 91 e4 00 	lds	r24, 0x00E4
    20fa:	90 91 e5 00 	lds	r25, 0x00E5
    20fe:	f7 01       	movw	r30, r14
    2100:	93 87       	std	Z+11, r25	; 0x0b
    2102:	82 87       	std	Z+10, r24	; 0x0a
    2104:	0f b6       	in	r0, 0x3f	; 63

			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    2106:	f8 94       	cli
    2108:	9e be       	out	0x3e, r9	; 62
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	8d be       	out	0x3d, r8	; 61
    210e:	0f b6       	in	r0, 0x3f	; 63
    2110:	f8 94       	cli
    2112:	be be       	out	0x3e, r11	; 62
    2114:	0f be       	out	0x3f, r0	; 63
	}
}
    2116:	ad be       	out	0x3d, r10	; 61
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	df 91       	pop	r29
    2120:	cf 91       	pop	r28
    2122:	1f 91       	pop	r17
    2124:	0f 91       	pop	r16
    2126:	ff 90       	pop	r15
    2128:	ef 90       	pop	r14
    212a:	df 90       	pop	r13
    212c:	cf 90       	pop	r12
    212e:	bf 90       	pop	r11
    2130:	af 90       	pop	r10
    2132:	9f 90       	pop	r9
    2134:	8f 90       	pop	r8
    2136:	7f 90       	pop	r7
    2138:	6f 90       	pop	r6
    213a:	5f 90       	pop	r5
    213c:	08 95       	ret

0000213e <__tablejump2__>:
    213e:	ee 0f       	add	r30, r30
    2140:	ff 1f       	adc	r31, r31

00002142 <__tablejump__>:
    2142:	05 90       	lpm	r0, Z+
    2144:	f4 91       	lpm	r31, Z
    2146:	e0 2d       	mov	r30, r0
    2148:	09 94       	ijmp

0000214a <__subsf3>:
    214a:	50 58       	subi	r21, 0x80	; 128

0000214c <__addsf3>:
    214c:	bb 27       	eor	r27, r27
    214e:	aa 27       	eor	r26, r26
    2150:	0e d0       	rcall	.+28     	; 0x216e <__addsf3x>
    2152:	dc c0       	rjmp	.+440    	; 0x230c <__fp_round>
    2154:	cd d0       	rcall	.+410    	; 0x22f0 <__fp_pscA>
    2156:	30 f0       	brcs	.+12     	; 0x2164 <__addsf3+0x18>
    2158:	d2 d0       	rcall	.+420    	; 0x22fe <__fp_pscB>
    215a:	20 f0       	brcs	.+8      	; 0x2164 <__addsf3+0x18>
    215c:	31 f4       	brne	.+12     	; 0x216a <__addsf3+0x1e>
    215e:	9f 3f       	cpi	r25, 0xFF	; 255
    2160:	11 f4       	brne	.+4      	; 0x2166 <__addsf3+0x1a>
    2162:	1e f4       	brtc	.+6      	; 0x216a <__addsf3+0x1e>
    2164:	c2 c0       	rjmp	.+388    	; 0x22ea <__fp_nan>
    2166:	0e f4       	brtc	.+2      	; 0x216a <__addsf3+0x1e>
    2168:	e0 95       	com	r30
    216a:	e7 fb       	bst	r30, 7
    216c:	b8 c0       	rjmp	.+368    	; 0x22de <__fp_inf>

0000216e <__addsf3x>:
    216e:	e9 2f       	mov	r30, r25
    2170:	de d0       	rcall	.+444    	; 0x232e <__fp_split3>
    2172:	80 f3       	brcs	.-32     	; 0x2154 <__addsf3+0x8>
    2174:	ba 17       	cp	r27, r26
    2176:	62 07       	cpc	r22, r18
    2178:	73 07       	cpc	r23, r19
    217a:	84 07       	cpc	r24, r20
    217c:	95 07       	cpc	r25, r21
    217e:	18 f0       	brcs	.+6      	; 0x2186 <__addsf3x+0x18>
    2180:	71 f4       	brne	.+28     	; 0x219e <__addsf3x+0x30>
    2182:	9e f5       	brtc	.+102    	; 0x21ea <__addsf3x+0x7c>
    2184:	f6 c0       	rjmp	.+492    	; 0x2372 <__fp_zero>
    2186:	0e f4       	brtc	.+2      	; 0x218a <__addsf3x+0x1c>
    2188:	e0 95       	com	r30
    218a:	0b 2e       	mov	r0, r27
    218c:	ba 2f       	mov	r27, r26
    218e:	a0 2d       	mov	r26, r0
    2190:	0b 01       	movw	r0, r22
    2192:	b9 01       	movw	r22, r18
    2194:	90 01       	movw	r18, r0
    2196:	0c 01       	movw	r0, r24
    2198:	ca 01       	movw	r24, r20
    219a:	a0 01       	movw	r20, r0
    219c:	11 24       	eor	r1, r1
    219e:	ff 27       	eor	r31, r31
    21a0:	59 1b       	sub	r21, r25
    21a2:	99 f0       	breq	.+38     	; 0x21ca <__addsf3x+0x5c>
    21a4:	59 3f       	cpi	r21, 0xF9	; 249
    21a6:	50 f4       	brcc	.+20     	; 0x21bc <__addsf3x+0x4e>
    21a8:	50 3e       	cpi	r21, 0xE0	; 224
    21aa:	68 f1       	brcs	.+90     	; 0x2206 <__addsf3x+0x98>
    21ac:	1a 16       	cp	r1, r26
    21ae:	f0 40       	sbci	r31, 0x00	; 0
    21b0:	a2 2f       	mov	r26, r18
    21b2:	23 2f       	mov	r18, r19
    21b4:	34 2f       	mov	r19, r20
    21b6:	44 27       	eor	r20, r20
    21b8:	58 5f       	subi	r21, 0xF8	; 248
    21ba:	f3 cf       	rjmp	.-26     	; 0x21a2 <__addsf3x+0x34>
    21bc:	46 95       	lsr	r20
    21be:	37 95       	ror	r19
    21c0:	27 95       	ror	r18
    21c2:	a7 95       	ror	r26
    21c4:	f0 40       	sbci	r31, 0x00	; 0
    21c6:	53 95       	inc	r21
    21c8:	c9 f7       	brne	.-14     	; 0x21bc <__addsf3x+0x4e>
    21ca:	7e f4       	brtc	.+30     	; 0x21ea <__addsf3x+0x7c>
    21cc:	1f 16       	cp	r1, r31
    21ce:	ba 0b       	sbc	r27, r26
    21d0:	62 0b       	sbc	r22, r18
    21d2:	73 0b       	sbc	r23, r19
    21d4:	84 0b       	sbc	r24, r20
    21d6:	ba f0       	brmi	.+46     	; 0x2206 <__addsf3x+0x98>
    21d8:	91 50       	subi	r25, 0x01	; 1
    21da:	a1 f0       	breq	.+40     	; 0x2204 <__addsf3x+0x96>
    21dc:	ff 0f       	add	r31, r31
    21de:	bb 1f       	adc	r27, r27
    21e0:	66 1f       	adc	r22, r22
    21e2:	77 1f       	adc	r23, r23
    21e4:	88 1f       	adc	r24, r24
    21e6:	c2 f7       	brpl	.-16     	; 0x21d8 <__addsf3x+0x6a>
    21e8:	0e c0       	rjmp	.+28     	; 0x2206 <__addsf3x+0x98>
    21ea:	ba 0f       	add	r27, r26
    21ec:	62 1f       	adc	r22, r18
    21ee:	73 1f       	adc	r23, r19
    21f0:	84 1f       	adc	r24, r20
    21f2:	48 f4       	brcc	.+18     	; 0x2206 <__addsf3x+0x98>
    21f4:	87 95       	ror	r24
    21f6:	77 95       	ror	r23
    21f8:	67 95       	ror	r22
    21fa:	b7 95       	ror	r27
    21fc:	f7 95       	ror	r31
    21fe:	9e 3f       	cpi	r25, 0xFE	; 254
    2200:	08 f0       	brcs	.+2      	; 0x2204 <__addsf3x+0x96>
    2202:	b3 cf       	rjmp	.-154    	; 0x216a <__addsf3+0x1e>
    2204:	93 95       	inc	r25
    2206:	88 0f       	add	r24, r24
    2208:	08 f0       	brcs	.+2      	; 0x220c <__addsf3x+0x9e>
    220a:	99 27       	eor	r25, r25
    220c:	ee 0f       	add	r30, r30
    220e:	97 95       	ror	r25
    2210:	87 95       	ror	r24
    2212:	08 95       	ret

00002214 <__cmpsf2>:
    2214:	40 d0       	rcall	.+128    	; 0x2296 <__fp_cmp>
    2216:	08 f4       	brcc	.+2      	; 0x221a <__cmpsf2+0x6>
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	08 95       	ret

0000221c <__floatunsisf>:
    221c:	e8 94       	clt
    221e:	09 c0       	rjmp	.+18     	; 0x2232 <__floatsisf+0x12>

00002220 <__floatsisf>:
    2220:	97 fb       	bst	r25, 7
    2222:	3e f4       	brtc	.+14     	; 0x2232 <__floatsisf+0x12>
    2224:	90 95       	com	r25
    2226:	80 95       	com	r24
    2228:	70 95       	com	r23
    222a:	61 95       	neg	r22
    222c:	7f 4f       	sbci	r23, 0xFF	; 255
    222e:	8f 4f       	sbci	r24, 0xFF	; 255
    2230:	9f 4f       	sbci	r25, 0xFF	; 255
    2232:	99 23       	and	r25, r25
    2234:	a9 f0       	breq	.+42     	; 0x2260 <__floatsisf+0x40>
    2236:	f9 2f       	mov	r31, r25
    2238:	96 e9       	ldi	r25, 0x96	; 150
    223a:	bb 27       	eor	r27, r27
    223c:	93 95       	inc	r25
    223e:	f6 95       	lsr	r31
    2240:	87 95       	ror	r24
    2242:	77 95       	ror	r23
    2244:	67 95       	ror	r22
    2246:	b7 95       	ror	r27
    2248:	f1 11       	cpse	r31, r1
    224a:	f8 cf       	rjmp	.-16     	; 0x223c <__floatsisf+0x1c>
    224c:	fa f4       	brpl	.+62     	; 0x228c <__floatsisf+0x6c>
    224e:	bb 0f       	add	r27, r27
    2250:	11 f4       	brne	.+4      	; 0x2256 <__floatsisf+0x36>
    2252:	60 ff       	sbrs	r22, 0
    2254:	1b c0       	rjmp	.+54     	; 0x228c <__floatsisf+0x6c>
    2256:	6f 5f       	subi	r22, 0xFF	; 255
    2258:	7f 4f       	sbci	r23, 0xFF	; 255
    225a:	8f 4f       	sbci	r24, 0xFF	; 255
    225c:	9f 4f       	sbci	r25, 0xFF	; 255
    225e:	16 c0       	rjmp	.+44     	; 0x228c <__floatsisf+0x6c>
    2260:	88 23       	and	r24, r24
    2262:	11 f0       	breq	.+4      	; 0x2268 <__floatsisf+0x48>
    2264:	96 e9       	ldi	r25, 0x96	; 150
    2266:	11 c0       	rjmp	.+34     	; 0x228a <__floatsisf+0x6a>
    2268:	77 23       	and	r23, r23
    226a:	21 f0       	breq	.+8      	; 0x2274 <__floatsisf+0x54>
    226c:	9e e8       	ldi	r25, 0x8E	; 142
    226e:	87 2f       	mov	r24, r23
    2270:	76 2f       	mov	r23, r22
    2272:	05 c0       	rjmp	.+10     	; 0x227e <__floatsisf+0x5e>
    2274:	66 23       	and	r22, r22
    2276:	71 f0       	breq	.+28     	; 0x2294 <__floatsisf+0x74>
    2278:	96 e8       	ldi	r25, 0x86	; 134
    227a:	86 2f       	mov	r24, r22
    227c:	70 e0       	ldi	r23, 0x00	; 0
    227e:	60 e0       	ldi	r22, 0x00	; 0
    2280:	2a f0       	brmi	.+10     	; 0x228c <__floatsisf+0x6c>
    2282:	9a 95       	dec	r25
    2284:	66 0f       	add	r22, r22
    2286:	77 1f       	adc	r23, r23
    2288:	88 1f       	adc	r24, r24
    228a:	da f7       	brpl	.-10     	; 0x2282 <__floatsisf+0x62>
    228c:	88 0f       	add	r24, r24
    228e:	96 95       	lsr	r25
    2290:	87 95       	ror	r24
    2292:	97 f9       	bld	r25, 7
    2294:	08 95       	ret

00002296 <__fp_cmp>:
    2296:	99 0f       	add	r25, r25
    2298:	00 08       	sbc	r0, r0
    229a:	55 0f       	add	r21, r21
    229c:	aa 0b       	sbc	r26, r26
    229e:	e0 e8       	ldi	r30, 0x80	; 128
    22a0:	fe ef       	ldi	r31, 0xFE	; 254
    22a2:	16 16       	cp	r1, r22
    22a4:	17 06       	cpc	r1, r23
    22a6:	e8 07       	cpc	r30, r24
    22a8:	f9 07       	cpc	r31, r25
    22aa:	c0 f0       	brcs	.+48     	; 0x22dc <__fp_cmp+0x46>
    22ac:	12 16       	cp	r1, r18
    22ae:	13 06       	cpc	r1, r19
    22b0:	e4 07       	cpc	r30, r20
    22b2:	f5 07       	cpc	r31, r21
    22b4:	98 f0       	brcs	.+38     	; 0x22dc <__fp_cmp+0x46>
    22b6:	62 1b       	sub	r22, r18
    22b8:	73 0b       	sbc	r23, r19
    22ba:	84 0b       	sbc	r24, r20
    22bc:	95 0b       	sbc	r25, r21
    22be:	39 f4       	brne	.+14     	; 0x22ce <__fp_cmp+0x38>
    22c0:	0a 26       	eor	r0, r26
    22c2:	61 f0       	breq	.+24     	; 0x22dc <__fp_cmp+0x46>
    22c4:	23 2b       	or	r18, r19
    22c6:	24 2b       	or	r18, r20
    22c8:	25 2b       	or	r18, r21
    22ca:	21 f4       	brne	.+8      	; 0x22d4 <__fp_cmp+0x3e>
    22cc:	08 95       	ret
    22ce:	0a 26       	eor	r0, r26
    22d0:	09 f4       	brne	.+2      	; 0x22d4 <__fp_cmp+0x3e>
    22d2:	a1 40       	sbci	r26, 0x01	; 1
    22d4:	a6 95       	lsr	r26
    22d6:	8f ef       	ldi	r24, 0xFF	; 255
    22d8:	81 1d       	adc	r24, r1
    22da:	81 1d       	adc	r24, r1
    22dc:	08 95       	ret

000022de <__fp_inf>:
    22de:	97 f9       	bld	r25, 7
    22e0:	9f 67       	ori	r25, 0x7F	; 127
    22e2:	80 e8       	ldi	r24, 0x80	; 128
    22e4:	70 e0       	ldi	r23, 0x00	; 0
    22e6:	60 e0       	ldi	r22, 0x00	; 0
    22e8:	08 95       	ret

000022ea <__fp_nan>:
    22ea:	9f ef       	ldi	r25, 0xFF	; 255
    22ec:	80 ec       	ldi	r24, 0xC0	; 192
    22ee:	08 95       	ret

000022f0 <__fp_pscA>:
    22f0:	00 24       	eor	r0, r0
    22f2:	0a 94       	dec	r0
    22f4:	16 16       	cp	r1, r22
    22f6:	17 06       	cpc	r1, r23
    22f8:	18 06       	cpc	r1, r24
    22fa:	09 06       	cpc	r0, r25
    22fc:	08 95       	ret

000022fe <__fp_pscB>:
    22fe:	00 24       	eor	r0, r0
    2300:	0a 94       	dec	r0
    2302:	12 16       	cp	r1, r18
    2304:	13 06       	cpc	r1, r19
    2306:	14 06       	cpc	r1, r20
    2308:	05 06       	cpc	r0, r21
    230a:	08 95       	ret

0000230c <__fp_round>:
    230c:	09 2e       	mov	r0, r25
    230e:	03 94       	inc	r0
    2310:	00 0c       	add	r0, r0
    2312:	11 f4       	brne	.+4      	; 0x2318 <__fp_round+0xc>
    2314:	88 23       	and	r24, r24
    2316:	52 f0       	brmi	.+20     	; 0x232c <__fp_round+0x20>
    2318:	bb 0f       	add	r27, r27
    231a:	40 f4       	brcc	.+16     	; 0x232c <__fp_round+0x20>
    231c:	bf 2b       	or	r27, r31
    231e:	11 f4       	brne	.+4      	; 0x2324 <__fp_round+0x18>
    2320:	60 ff       	sbrs	r22, 0
    2322:	04 c0       	rjmp	.+8      	; 0x232c <__fp_round+0x20>
    2324:	6f 5f       	subi	r22, 0xFF	; 255
    2326:	7f 4f       	sbci	r23, 0xFF	; 255
    2328:	8f 4f       	sbci	r24, 0xFF	; 255
    232a:	9f 4f       	sbci	r25, 0xFF	; 255
    232c:	08 95       	ret

0000232e <__fp_split3>:
    232e:	57 fd       	sbrc	r21, 7
    2330:	90 58       	subi	r25, 0x80	; 128
    2332:	44 0f       	add	r20, r20
    2334:	55 1f       	adc	r21, r21
    2336:	59 f0       	breq	.+22     	; 0x234e <__fp_splitA+0x10>
    2338:	5f 3f       	cpi	r21, 0xFF	; 255
    233a:	71 f0       	breq	.+28     	; 0x2358 <__fp_splitA+0x1a>
    233c:	47 95       	ror	r20

0000233e <__fp_splitA>:
    233e:	88 0f       	add	r24, r24
    2340:	97 fb       	bst	r25, 7
    2342:	99 1f       	adc	r25, r25
    2344:	61 f0       	breq	.+24     	; 0x235e <__fp_splitA+0x20>
    2346:	9f 3f       	cpi	r25, 0xFF	; 255
    2348:	79 f0       	breq	.+30     	; 0x2368 <__fp_splitA+0x2a>
    234a:	87 95       	ror	r24
    234c:	08 95       	ret
    234e:	12 16       	cp	r1, r18
    2350:	13 06       	cpc	r1, r19
    2352:	14 06       	cpc	r1, r20
    2354:	55 1f       	adc	r21, r21
    2356:	f2 cf       	rjmp	.-28     	; 0x233c <__fp_split3+0xe>
    2358:	46 95       	lsr	r20
    235a:	f1 df       	rcall	.-30     	; 0x233e <__fp_splitA>
    235c:	08 c0       	rjmp	.+16     	; 0x236e <__fp_splitA+0x30>
    235e:	16 16       	cp	r1, r22
    2360:	17 06       	cpc	r1, r23
    2362:	18 06       	cpc	r1, r24
    2364:	99 1f       	adc	r25, r25
    2366:	f1 cf       	rjmp	.-30     	; 0x234a <__fp_splitA+0xc>
    2368:	86 95       	lsr	r24
    236a:	71 05       	cpc	r23, r1
    236c:	61 05       	cpc	r22, r1
    236e:	08 94       	sec
    2370:	08 95       	ret

00002372 <__fp_zero>:
    2372:	e8 94       	clt

00002374 <__fp_szero>:
    2374:	bb 27       	eor	r27, r27
    2376:	66 27       	eor	r22, r22
    2378:	77 27       	eor	r23, r23
    237a:	cb 01       	movw	r24, r22
    237c:	97 f9       	bld	r25, 7
    237e:	08 95       	ret

00002380 <pow>:
    2380:	fa 01       	movw	r30, r20
    2382:	ee 0f       	add	r30, r30
    2384:	ff 1f       	adc	r31, r31
    2386:	30 96       	adiw	r30, 0x00	; 0
    2388:	21 05       	cpc	r18, r1
    238a:	31 05       	cpc	r19, r1
    238c:	99 f1       	breq	.+102    	; 0x23f4 <pow+0x74>
    238e:	61 15       	cp	r22, r1
    2390:	71 05       	cpc	r23, r1
    2392:	61 f4       	brne	.+24     	; 0x23ac <pow+0x2c>
    2394:	80 38       	cpi	r24, 0x80	; 128
    2396:	bf e3       	ldi	r27, 0x3F	; 63
    2398:	9b 07       	cpc	r25, r27
    239a:	49 f1       	breq	.+82     	; 0x23ee <pow+0x6e>
    239c:	68 94       	set
    239e:	90 38       	cpi	r25, 0x80	; 128
    23a0:	81 05       	cpc	r24, r1
    23a2:	61 f0       	breq	.+24     	; 0x23bc <pow+0x3c>
    23a4:	80 38       	cpi	r24, 0x80	; 128
    23a6:	bf ef       	ldi	r27, 0xFF	; 255
    23a8:	9b 07       	cpc	r25, r27
    23aa:	41 f0       	breq	.+16     	; 0x23bc <pow+0x3c>
    23ac:	99 23       	and	r25, r25
    23ae:	42 f5       	brpl	.+80     	; 0x2400 <pow+0x80>
    23b0:	ff 3f       	cpi	r31, 0xFF	; 255
    23b2:	e1 05       	cpc	r30, r1
    23b4:	31 05       	cpc	r19, r1
    23b6:	21 05       	cpc	r18, r1
    23b8:	11 f1       	breq	.+68     	; 0x23fe <pow+0x7e>
    23ba:	e8 94       	clt
    23bc:	08 94       	sec
    23be:	e7 95       	ror	r30
    23c0:	d9 01       	movw	r26, r18
    23c2:	aa 23       	and	r26, r26
    23c4:	29 f4       	brne	.+10     	; 0x23d0 <pow+0x50>
    23c6:	ab 2f       	mov	r26, r27
    23c8:	be 2f       	mov	r27, r30
    23ca:	f8 5f       	subi	r31, 0xF8	; 248
    23cc:	d0 f3       	brcs	.-12     	; 0x23c2 <pow+0x42>
    23ce:	10 c0       	rjmp	.+32     	; 0x23f0 <pow+0x70>
    23d0:	ff 5f       	subi	r31, 0xFF	; 255
    23d2:	70 f4       	brcc	.+28     	; 0x23f0 <pow+0x70>
    23d4:	a6 95       	lsr	r26
    23d6:	e0 f7       	brcc	.-8      	; 0x23d0 <pow+0x50>
    23d8:	f7 39       	cpi	r31, 0x97	; 151
    23da:	50 f0       	brcs	.+20     	; 0x23f0 <pow+0x70>
    23dc:	19 f0       	breq	.+6      	; 0x23e4 <pow+0x64>
    23de:	ff 3a       	cpi	r31, 0xAF	; 175
    23e0:	38 f4       	brcc	.+14     	; 0x23f0 <pow+0x70>
    23e2:	9f 77       	andi	r25, 0x7F	; 127
    23e4:	9f 93       	push	r25
    23e6:	0c d0       	rcall	.+24     	; 0x2400 <pow+0x80>
    23e8:	0f 90       	pop	r0
    23ea:	07 fc       	sbrc	r0, 7
    23ec:	90 58       	subi	r25, 0x80	; 128
    23ee:	08 95       	ret
    23f0:	3e f0       	brts	.+14     	; 0x2400 <pow+0x80>
    23f2:	7b cf       	rjmp	.-266    	; 0x22ea <__fp_nan>
    23f4:	60 e0       	ldi	r22, 0x00	; 0
    23f6:	70 e0       	ldi	r23, 0x00	; 0
    23f8:	80 e8       	ldi	r24, 0x80	; 128
    23fa:	9f e3       	ldi	r25, 0x3F	; 63
    23fc:	08 95       	ret
    23fe:	4f e7       	ldi	r20, 0x7F	; 127
    2400:	9f 77       	andi	r25, 0x7F	; 127
    2402:	5f 93       	push	r21
    2404:	4f 93       	push	r20
    2406:	3f 93       	push	r19
    2408:	2f 93       	push	r18
    240a:	9e d0       	rcall	.+316    	; 0x2548 <log>
    240c:	2f 91       	pop	r18
    240e:	3f 91       	pop	r19
    2410:	4f 91       	pop	r20
    2412:	5f 91       	pop	r21
    2414:	0c d1       	rcall	.+536    	; 0x262e <__mulsf3>
    2416:	05 c0       	rjmp	.+10     	; 0x2422 <exp>
    2418:	19 f4       	brne	.+6      	; 0x2420 <pow+0xa0>
    241a:	0e f0       	brts	.+2      	; 0x241e <pow+0x9e>
    241c:	60 cf       	rjmp	.-320    	; 0x22de <__fp_inf>
    241e:	a9 cf       	rjmp	.-174    	; 0x2372 <__fp_zero>
    2420:	64 cf       	rjmp	.-312    	; 0x22ea <__fp_nan>

00002422 <exp>:
    2422:	8d df       	rcall	.-230    	; 0x233e <__fp_splitA>
    2424:	c8 f3       	brcs	.-14     	; 0x2418 <pow+0x98>
    2426:	96 38       	cpi	r25, 0x86	; 134
    2428:	c0 f7       	brcc	.-16     	; 0x241a <pow+0x9a>
    242a:	07 f8       	bld	r0, 7
    242c:	0f 92       	push	r0
    242e:	e8 94       	clt
    2430:	2b e3       	ldi	r18, 0x3B	; 59
    2432:	3a ea       	ldi	r19, 0xAA	; 170
    2434:	48 eb       	ldi	r20, 0xB8	; 184
    2436:	5f e7       	ldi	r21, 0x7F	; 127
    2438:	08 d1       	rcall	.+528    	; 0x264a <__mulsf3_pse>
    243a:	0f 92       	push	r0
    243c:	0f 92       	push	r0
    243e:	0f 92       	push	r0
    2440:	4d b7       	in	r20, 0x3d	; 61
    2442:	5e b7       	in	r21, 0x3e	; 62
    2444:	0f 92       	push	r0
    2446:	c0 d0       	rcall	.+384    	; 0x25c8 <modf>
    2448:	e2 ed       	ldi	r30, 0xD2	; 210
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	16 d0       	rcall	.+44     	; 0x247a <__fp_powser>
    244e:	4f 91       	pop	r20
    2450:	5f 91       	pop	r21
    2452:	ef 91       	pop	r30
    2454:	ff 91       	pop	r31
    2456:	e5 95       	asr	r30
    2458:	ee 1f       	adc	r30, r30
    245a:	ff 1f       	adc	r31, r31
    245c:	49 f0       	breq	.+18     	; 0x2470 <exp+0x4e>
    245e:	fe 57       	subi	r31, 0x7E	; 126
    2460:	e0 68       	ori	r30, 0x80	; 128
    2462:	44 27       	eor	r20, r20
    2464:	ee 0f       	add	r30, r30
    2466:	44 1f       	adc	r20, r20
    2468:	fa 95       	dec	r31
    246a:	e1 f7       	brne	.-8      	; 0x2464 <exp+0x42>
    246c:	41 95       	neg	r20
    246e:	55 0b       	sbc	r21, r21
    2470:	32 d0       	rcall	.+100    	; 0x24d6 <ldexp>
    2472:	0f 90       	pop	r0
    2474:	07 fe       	sbrs	r0, 7
    2476:	26 c0       	rjmp	.+76     	; 0x24c4 <inverse>
    2478:	08 95       	ret

0000247a <__fp_powser>:
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	1f 93       	push	r17
    2480:	0f 93       	push	r16
    2482:	ff 92       	push	r15
    2484:	ef 92       	push	r14
    2486:	df 92       	push	r13
    2488:	7b 01       	movw	r14, r22
    248a:	8c 01       	movw	r16, r24
    248c:	68 94       	set
    248e:	05 c0       	rjmp	.+10     	; 0x249a <__fp_powser+0x20>
    2490:	da 2e       	mov	r13, r26
    2492:	ef 01       	movw	r28, r30
    2494:	d8 d0       	rcall	.+432    	; 0x2646 <__mulsf3x>
    2496:	fe 01       	movw	r30, r28
    2498:	e8 94       	clt
    249a:	a5 91       	lpm	r26, Z+
    249c:	25 91       	lpm	r18, Z+
    249e:	35 91       	lpm	r19, Z+
    24a0:	45 91       	lpm	r20, Z+
    24a2:	55 91       	lpm	r21, Z+
    24a4:	ae f3       	brts	.-22     	; 0x2490 <__fp_powser+0x16>
    24a6:	ef 01       	movw	r28, r30
    24a8:	62 de       	rcall	.-828    	; 0x216e <__addsf3x>
    24aa:	fe 01       	movw	r30, r28
    24ac:	97 01       	movw	r18, r14
    24ae:	a8 01       	movw	r20, r16
    24b0:	da 94       	dec	r13
    24b2:	79 f7       	brne	.-34     	; 0x2492 <__fp_powser+0x18>
    24b4:	df 90       	pop	r13
    24b6:	ef 90       	pop	r14
    24b8:	ff 90       	pop	r15
    24ba:	0f 91       	pop	r16
    24bc:	1f 91       	pop	r17
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <inverse>:
    24c4:	9b 01       	movw	r18, r22
    24c6:	ac 01       	movw	r20, r24
    24c8:	60 e0       	ldi	r22, 0x00	; 0
    24ca:	70 e0       	ldi	r23, 0x00	; 0
    24cc:	80 e8       	ldi	r24, 0x80	; 128
    24ce:	9f e3       	ldi	r25, 0x3F	; 63
    24d0:	11 c1       	rjmp	.+546    	; 0x26f4 <__divsf3>
    24d2:	05 cf       	rjmp	.-502    	; 0x22de <__fp_inf>
    24d4:	77 c1       	rjmp	.+750    	; 0x27c4 <__fp_mpack>

000024d6 <ldexp>:
    24d6:	33 df       	rcall	.-410    	; 0x233e <__fp_splitA>
    24d8:	e8 f3       	brcs	.-6      	; 0x24d4 <inverse+0x10>
    24da:	99 23       	and	r25, r25
    24dc:	d9 f3       	breq	.-10     	; 0x24d4 <inverse+0x10>
    24de:	94 0f       	add	r25, r20
    24e0:	51 1d       	adc	r21, r1
    24e2:	bb f3       	brvs	.-18     	; 0x24d2 <inverse+0xe>
    24e4:	91 50       	subi	r25, 0x01	; 1
    24e6:	50 40       	sbci	r21, 0x00	; 0
    24e8:	94 f0       	brlt	.+36     	; 0x250e <ldexp+0x38>
    24ea:	59 f0       	breq	.+22     	; 0x2502 <ldexp+0x2c>
    24ec:	88 23       	and	r24, r24
    24ee:	32 f0       	brmi	.+12     	; 0x24fc <ldexp+0x26>
    24f0:	66 0f       	add	r22, r22
    24f2:	77 1f       	adc	r23, r23
    24f4:	88 1f       	adc	r24, r24
    24f6:	91 50       	subi	r25, 0x01	; 1
    24f8:	50 40       	sbci	r21, 0x00	; 0
    24fa:	c1 f7       	brne	.-16     	; 0x24ec <ldexp+0x16>
    24fc:	9e 3f       	cpi	r25, 0xFE	; 254
    24fe:	51 05       	cpc	r21, r1
    2500:	44 f7       	brge	.-48     	; 0x24d2 <inverse+0xe>
    2502:	88 0f       	add	r24, r24
    2504:	91 1d       	adc	r25, r1
    2506:	96 95       	lsr	r25
    2508:	87 95       	ror	r24
    250a:	97 f9       	bld	r25, 7
    250c:	08 95       	ret
    250e:	5f 3f       	cpi	r21, 0xFF	; 255
    2510:	ac f0       	brlt	.+42     	; 0x253c <ldexp+0x66>
    2512:	98 3e       	cpi	r25, 0xE8	; 232
    2514:	9c f0       	brlt	.+38     	; 0x253c <ldexp+0x66>
    2516:	bb 27       	eor	r27, r27
    2518:	86 95       	lsr	r24
    251a:	77 95       	ror	r23
    251c:	67 95       	ror	r22
    251e:	b7 95       	ror	r27
    2520:	08 f4       	brcc	.+2      	; 0x2524 <ldexp+0x4e>
    2522:	b1 60       	ori	r27, 0x01	; 1
    2524:	93 95       	inc	r25
    2526:	c1 f7       	brne	.-16     	; 0x2518 <ldexp+0x42>
    2528:	bb 0f       	add	r27, r27
    252a:	58 f7       	brcc	.-42     	; 0x2502 <ldexp+0x2c>
    252c:	11 f4       	brne	.+4      	; 0x2532 <ldexp+0x5c>
    252e:	60 ff       	sbrs	r22, 0
    2530:	e8 cf       	rjmp	.-48     	; 0x2502 <ldexp+0x2c>
    2532:	6f 5f       	subi	r22, 0xFF	; 255
    2534:	7f 4f       	sbci	r23, 0xFF	; 255
    2536:	8f 4f       	sbci	r24, 0xFF	; 255
    2538:	9f 4f       	sbci	r25, 0xFF	; 255
    253a:	e3 cf       	rjmp	.-58     	; 0x2502 <ldexp+0x2c>
    253c:	1b cf       	rjmp	.-458    	; 0x2374 <__fp_szero>
    253e:	0e f0       	brts	.+2      	; 0x2542 <ldexp+0x6c>
    2540:	41 c1       	rjmp	.+642    	; 0x27c4 <__fp_mpack>
    2542:	d3 ce       	rjmp	.-602    	; 0x22ea <__fp_nan>
    2544:	68 94       	set
    2546:	cb ce       	rjmp	.-618    	; 0x22de <__fp_inf>

00002548 <log>:
    2548:	fa de       	rcall	.-524    	; 0x233e <__fp_splitA>
    254a:	c8 f3       	brcs	.-14     	; 0x253e <ldexp+0x68>
    254c:	99 23       	and	r25, r25
    254e:	d1 f3       	breq	.-12     	; 0x2544 <ldexp+0x6e>
    2550:	c6 f3       	brts	.-16     	; 0x2542 <ldexp+0x6c>
    2552:	df 93       	push	r29
    2554:	cf 93       	push	r28
    2556:	1f 93       	push	r17
    2558:	0f 93       	push	r16
    255a:	ff 92       	push	r15
    255c:	c9 2f       	mov	r28, r25
    255e:	dd 27       	eor	r29, r29
    2560:	88 23       	and	r24, r24
    2562:	2a f0       	brmi	.+10     	; 0x256e <log+0x26>
    2564:	21 97       	sbiw	r28, 0x01	; 1
    2566:	66 0f       	add	r22, r22
    2568:	77 1f       	adc	r23, r23
    256a:	88 1f       	adc	r24, r24
    256c:	da f7       	brpl	.-10     	; 0x2564 <log+0x1c>
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	40 e8       	ldi	r20, 0x80	; 128
    2574:	5f eb       	ldi	r21, 0xBF	; 191
    2576:	9f e3       	ldi	r25, 0x3F	; 63
    2578:	88 39       	cpi	r24, 0x98	; 152
    257a:	20 f0       	brcs	.+8      	; 0x2584 <log+0x3c>
    257c:	80 3e       	cpi	r24, 0xE0	; 224
    257e:	30 f0       	brcs	.+12     	; 0x258c <log+0x44>
    2580:	21 96       	adiw	r28, 0x01	; 1
    2582:	8f 77       	andi	r24, 0x7F	; 127
    2584:	e3 dd       	rcall	.-1082   	; 0x214c <__addsf3>
    2586:	ea ef       	ldi	r30, 0xFA	; 250
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	03 c0       	rjmp	.+6      	; 0x2592 <log+0x4a>
    258c:	df dd       	rcall	.-1090   	; 0x214c <__addsf3>
    258e:	e7 e2       	ldi	r30, 0x27	; 39
    2590:	f1 e0       	ldi	r31, 0x01	; 1
    2592:	73 df       	rcall	.-282    	; 0x247a <__fp_powser>
    2594:	8b 01       	movw	r16, r22
    2596:	be 01       	movw	r22, r28
    2598:	ec 01       	movw	r28, r24
    259a:	fb 2e       	mov	r15, r27
    259c:	6f 57       	subi	r22, 0x7F	; 127
    259e:	71 09       	sbc	r23, r1
    25a0:	75 95       	asr	r23
    25a2:	77 1f       	adc	r23, r23
    25a4:	88 0b       	sbc	r24, r24
    25a6:	99 0b       	sbc	r25, r25
    25a8:	3b de       	rcall	.-906    	; 0x2220 <__floatsisf>
    25aa:	28 e1       	ldi	r18, 0x18	; 24
    25ac:	32 e7       	ldi	r19, 0x72	; 114
    25ae:	41 e3       	ldi	r20, 0x31	; 49
    25b0:	5f e3       	ldi	r21, 0x3F	; 63
    25b2:	49 d0       	rcall	.+146    	; 0x2646 <__mulsf3x>
    25b4:	af 2d       	mov	r26, r15
    25b6:	98 01       	movw	r18, r16
    25b8:	ae 01       	movw	r20, r28
    25ba:	ff 90       	pop	r15
    25bc:	0f 91       	pop	r16
    25be:	1f 91       	pop	r17
    25c0:	cf 91       	pop	r28
    25c2:	df 91       	pop	r29
    25c4:	d4 dd       	rcall	.-1112   	; 0x216e <__addsf3x>
    25c6:	a2 ce       	rjmp	.-700    	; 0x230c <__fp_round>

000025c8 <modf>:
    25c8:	fa 01       	movw	r30, r20
    25ca:	dc 01       	movw	r26, r24
    25cc:	aa 0f       	add	r26, r26
    25ce:	bb 1f       	adc	r27, r27
    25d0:	9b 01       	movw	r18, r22
    25d2:	ac 01       	movw	r20, r24
    25d4:	bf 57       	subi	r27, 0x7F	; 127
    25d6:	28 f4       	brcc	.+10     	; 0x25e2 <modf+0x1a>
    25d8:	22 27       	eor	r18, r18
    25da:	33 27       	eor	r19, r19
    25dc:	44 27       	eor	r20, r20
    25de:	50 78       	andi	r21, 0x80	; 128
    25e0:	1f c0       	rjmp	.+62     	; 0x2620 <modf+0x58>
    25e2:	b7 51       	subi	r27, 0x17	; 23
    25e4:	88 f4       	brcc	.+34     	; 0x2608 <modf+0x40>
    25e6:	ab 2f       	mov	r26, r27
    25e8:	00 24       	eor	r0, r0
    25ea:	46 95       	lsr	r20
    25ec:	37 95       	ror	r19
    25ee:	27 95       	ror	r18
    25f0:	01 1c       	adc	r0, r1
    25f2:	a3 95       	inc	r26
    25f4:	d2 f3       	brmi	.-12     	; 0x25ea <modf+0x22>
    25f6:	00 20       	and	r0, r0
    25f8:	69 f0       	breq	.+26     	; 0x2614 <modf+0x4c>
    25fa:	22 0f       	add	r18, r18
    25fc:	33 1f       	adc	r19, r19
    25fe:	44 1f       	adc	r20, r20
    2600:	b3 95       	inc	r27
    2602:	da f3       	brmi	.-10     	; 0x25fa <modf+0x32>
    2604:	0d d0       	rcall	.+26     	; 0x2620 <modf+0x58>
    2606:	a1 cd       	rjmp	.-1214   	; 0x214a <__subsf3>
    2608:	61 30       	cpi	r22, 0x01	; 1
    260a:	71 05       	cpc	r23, r1
    260c:	a0 e8       	ldi	r26, 0x80	; 128
    260e:	8a 07       	cpc	r24, r26
    2610:	b9 46       	sbci	r27, 0x69	; 105
    2612:	30 f4       	brcc	.+12     	; 0x2620 <modf+0x58>
    2614:	9b 01       	movw	r18, r22
    2616:	ac 01       	movw	r20, r24
    2618:	66 27       	eor	r22, r22
    261a:	77 27       	eor	r23, r23
    261c:	88 27       	eor	r24, r24
    261e:	90 78       	andi	r25, 0x80	; 128
    2620:	30 96       	adiw	r30, 0x00	; 0
    2622:	21 f0       	breq	.+8      	; 0x262c <modf+0x64>
    2624:	20 83       	st	Z, r18
    2626:	31 83       	std	Z+1, r19	; 0x01
    2628:	42 83       	std	Z+2, r20	; 0x02
    262a:	53 83       	std	Z+3, r21	; 0x03
    262c:	08 95       	ret

0000262e <__mulsf3>:
    262e:	0b d0       	rcall	.+22     	; 0x2646 <__mulsf3x>
    2630:	6d ce       	rjmp	.-806    	; 0x230c <__fp_round>
    2632:	5e de       	rcall	.-836    	; 0x22f0 <__fp_pscA>
    2634:	28 f0       	brcs	.+10     	; 0x2640 <__mulsf3+0x12>
    2636:	63 de       	rcall	.-826    	; 0x22fe <__fp_pscB>
    2638:	18 f0       	brcs	.+6      	; 0x2640 <__mulsf3+0x12>
    263a:	95 23       	and	r25, r21
    263c:	09 f0       	breq	.+2      	; 0x2640 <__mulsf3+0x12>
    263e:	4f ce       	rjmp	.-866    	; 0x22de <__fp_inf>
    2640:	54 ce       	rjmp	.-856    	; 0x22ea <__fp_nan>
    2642:	11 24       	eor	r1, r1
    2644:	97 ce       	rjmp	.-722    	; 0x2374 <__fp_szero>

00002646 <__mulsf3x>:
    2646:	73 de       	rcall	.-794    	; 0x232e <__fp_split3>
    2648:	a0 f3       	brcs	.-24     	; 0x2632 <__mulsf3+0x4>

0000264a <__mulsf3_pse>:
    264a:	95 9f       	mul	r25, r21
    264c:	d1 f3       	breq	.-12     	; 0x2642 <__mulsf3+0x14>
    264e:	95 0f       	add	r25, r21
    2650:	50 e0       	ldi	r21, 0x00	; 0
    2652:	55 1f       	adc	r21, r21
    2654:	62 9f       	mul	r22, r18
    2656:	f0 01       	movw	r30, r0
    2658:	72 9f       	mul	r23, r18
    265a:	bb 27       	eor	r27, r27
    265c:	f0 0d       	add	r31, r0
    265e:	b1 1d       	adc	r27, r1
    2660:	63 9f       	mul	r22, r19
    2662:	aa 27       	eor	r26, r26
    2664:	f0 0d       	add	r31, r0
    2666:	b1 1d       	adc	r27, r1
    2668:	aa 1f       	adc	r26, r26
    266a:	64 9f       	mul	r22, r20
    266c:	66 27       	eor	r22, r22
    266e:	b0 0d       	add	r27, r0
    2670:	a1 1d       	adc	r26, r1
    2672:	66 1f       	adc	r22, r22
    2674:	82 9f       	mul	r24, r18
    2676:	22 27       	eor	r18, r18
    2678:	b0 0d       	add	r27, r0
    267a:	a1 1d       	adc	r26, r1
    267c:	62 1f       	adc	r22, r18
    267e:	73 9f       	mul	r23, r19
    2680:	b0 0d       	add	r27, r0
    2682:	a1 1d       	adc	r26, r1
    2684:	62 1f       	adc	r22, r18
    2686:	83 9f       	mul	r24, r19
    2688:	a0 0d       	add	r26, r0
    268a:	61 1d       	adc	r22, r1
    268c:	22 1f       	adc	r18, r18
    268e:	74 9f       	mul	r23, r20
    2690:	33 27       	eor	r19, r19
    2692:	a0 0d       	add	r26, r0
    2694:	61 1d       	adc	r22, r1
    2696:	23 1f       	adc	r18, r19
    2698:	84 9f       	mul	r24, r20
    269a:	60 0d       	add	r22, r0
    269c:	21 1d       	adc	r18, r1
    269e:	82 2f       	mov	r24, r18
    26a0:	76 2f       	mov	r23, r22
    26a2:	6a 2f       	mov	r22, r26
    26a4:	11 24       	eor	r1, r1
    26a6:	9f 57       	subi	r25, 0x7F	; 127
    26a8:	50 40       	sbci	r21, 0x00	; 0
    26aa:	8a f0       	brmi	.+34     	; 0x26ce <__mulsf3_pse+0x84>
    26ac:	e1 f0       	breq	.+56     	; 0x26e6 <__mulsf3_pse+0x9c>
    26ae:	88 23       	and	r24, r24
    26b0:	4a f0       	brmi	.+18     	; 0x26c4 <__mulsf3_pse+0x7a>
    26b2:	ee 0f       	add	r30, r30
    26b4:	ff 1f       	adc	r31, r31
    26b6:	bb 1f       	adc	r27, r27
    26b8:	66 1f       	adc	r22, r22
    26ba:	77 1f       	adc	r23, r23
    26bc:	88 1f       	adc	r24, r24
    26be:	91 50       	subi	r25, 0x01	; 1
    26c0:	50 40       	sbci	r21, 0x00	; 0
    26c2:	a9 f7       	brne	.-22     	; 0x26ae <__mulsf3_pse+0x64>
    26c4:	9e 3f       	cpi	r25, 0xFE	; 254
    26c6:	51 05       	cpc	r21, r1
    26c8:	70 f0       	brcs	.+28     	; 0x26e6 <__mulsf3_pse+0x9c>
    26ca:	09 ce       	rjmp	.-1006   	; 0x22de <__fp_inf>
    26cc:	53 ce       	rjmp	.-858    	; 0x2374 <__fp_szero>
    26ce:	5f 3f       	cpi	r21, 0xFF	; 255
    26d0:	ec f3       	brlt	.-6      	; 0x26cc <__mulsf3_pse+0x82>
    26d2:	98 3e       	cpi	r25, 0xE8	; 232
    26d4:	dc f3       	brlt	.-10     	; 0x26cc <__mulsf3_pse+0x82>
    26d6:	86 95       	lsr	r24
    26d8:	77 95       	ror	r23
    26da:	67 95       	ror	r22
    26dc:	b7 95       	ror	r27
    26de:	f7 95       	ror	r31
    26e0:	e7 95       	ror	r30
    26e2:	9f 5f       	subi	r25, 0xFF	; 255
    26e4:	c1 f7       	brne	.-16     	; 0x26d6 <__mulsf3_pse+0x8c>
    26e6:	fe 2b       	or	r31, r30
    26e8:	88 0f       	add	r24, r24
    26ea:	91 1d       	adc	r25, r1
    26ec:	96 95       	lsr	r25
    26ee:	87 95       	ror	r24
    26f0:	97 f9       	bld	r25, 7
    26f2:	08 95       	ret

000026f4 <__divsf3>:
    26f4:	0c d0       	rcall	.+24     	; 0x270e <__divsf3x>
    26f6:	0a ce       	rjmp	.-1004   	; 0x230c <__fp_round>
    26f8:	02 de       	rcall	.-1020   	; 0x22fe <__fp_pscB>
    26fa:	40 f0       	brcs	.+16     	; 0x270c <__divsf3+0x18>
    26fc:	f9 dd       	rcall	.-1038   	; 0x22f0 <__fp_pscA>
    26fe:	30 f0       	brcs	.+12     	; 0x270c <__divsf3+0x18>
    2700:	21 f4       	brne	.+8      	; 0x270a <__divsf3+0x16>
    2702:	5f 3f       	cpi	r21, 0xFF	; 255
    2704:	19 f0       	breq	.+6      	; 0x270c <__divsf3+0x18>
    2706:	eb cd       	rjmp	.-1066   	; 0x22de <__fp_inf>
    2708:	51 11       	cpse	r21, r1
    270a:	34 ce       	rjmp	.-920    	; 0x2374 <__fp_szero>
    270c:	ee cd       	rjmp	.-1060   	; 0x22ea <__fp_nan>

0000270e <__divsf3x>:
    270e:	0f de       	rcall	.-994    	; 0x232e <__fp_split3>
    2710:	98 f3       	brcs	.-26     	; 0x26f8 <__divsf3+0x4>

00002712 <__divsf3_pse>:
    2712:	99 23       	and	r25, r25
    2714:	c9 f3       	breq	.-14     	; 0x2708 <__divsf3+0x14>
    2716:	55 23       	and	r21, r21
    2718:	b1 f3       	breq	.-20     	; 0x2706 <__divsf3+0x12>
    271a:	95 1b       	sub	r25, r21
    271c:	55 0b       	sbc	r21, r21
    271e:	bb 27       	eor	r27, r27
    2720:	aa 27       	eor	r26, r26
    2722:	62 17       	cp	r22, r18
    2724:	73 07       	cpc	r23, r19
    2726:	84 07       	cpc	r24, r20
    2728:	38 f0       	brcs	.+14     	; 0x2738 <__divsf3_pse+0x26>
    272a:	9f 5f       	subi	r25, 0xFF	; 255
    272c:	5f 4f       	sbci	r21, 0xFF	; 255
    272e:	22 0f       	add	r18, r18
    2730:	33 1f       	adc	r19, r19
    2732:	44 1f       	adc	r20, r20
    2734:	aa 1f       	adc	r26, r26
    2736:	a9 f3       	breq	.-22     	; 0x2722 <__divsf3_pse+0x10>
    2738:	33 d0       	rcall	.+102    	; 0x27a0 <__divsf3_pse+0x8e>
    273a:	0e 2e       	mov	r0, r30
    273c:	3a f0       	brmi	.+14     	; 0x274c <__divsf3_pse+0x3a>
    273e:	e0 e8       	ldi	r30, 0x80	; 128
    2740:	30 d0       	rcall	.+96     	; 0x27a2 <__divsf3_pse+0x90>
    2742:	91 50       	subi	r25, 0x01	; 1
    2744:	50 40       	sbci	r21, 0x00	; 0
    2746:	e6 95       	lsr	r30
    2748:	00 1c       	adc	r0, r0
    274a:	ca f7       	brpl	.-14     	; 0x273e <__divsf3_pse+0x2c>
    274c:	29 d0       	rcall	.+82     	; 0x27a0 <__divsf3_pse+0x8e>
    274e:	fe 2f       	mov	r31, r30
    2750:	27 d0       	rcall	.+78     	; 0x27a0 <__divsf3_pse+0x8e>
    2752:	66 0f       	add	r22, r22
    2754:	77 1f       	adc	r23, r23
    2756:	88 1f       	adc	r24, r24
    2758:	bb 1f       	adc	r27, r27
    275a:	26 17       	cp	r18, r22
    275c:	37 07       	cpc	r19, r23
    275e:	48 07       	cpc	r20, r24
    2760:	ab 07       	cpc	r26, r27
    2762:	b0 e8       	ldi	r27, 0x80	; 128
    2764:	09 f0       	breq	.+2      	; 0x2768 <__divsf3_pse+0x56>
    2766:	bb 0b       	sbc	r27, r27
    2768:	80 2d       	mov	r24, r0
    276a:	bf 01       	movw	r22, r30
    276c:	ff 27       	eor	r31, r31
    276e:	93 58       	subi	r25, 0x83	; 131
    2770:	5f 4f       	sbci	r21, 0xFF	; 255
    2772:	2a f0       	brmi	.+10     	; 0x277e <__divsf3_pse+0x6c>
    2774:	9e 3f       	cpi	r25, 0xFE	; 254
    2776:	51 05       	cpc	r21, r1
    2778:	68 f0       	brcs	.+26     	; 0x2794 <__divsf3_pse+0x82>
    277a:	b1 cd       	rjmp	.-1182   	; 0x22de <__fp_inf>
    277c:	fb cd       	rjmp	.-1034   	; 0x2374 <__fp_szero>
    277e:	5f 3f       	cpi	r21, 0xFF	; 255
    2780:	ec f3       	brlt	.-6      	; 0x277c <__divsf3_pse+0x6a>
    2782:	98 3e       	cpi	r25, 0xE8	; 232
    2784:	dc f3       	brlt	.-10     	; 0x277c <__divsf3_pse+0x6a>
    2786:	86 95       	lsr	r24
    2788:	77 95       	ror	r23
    278a:	67 95       	ror	r22
    278c:	b7 95       	ror	r27
    278e:	f7 95       	ror	r31
    2790:	9f 5f       	subi	r25, 0xFF	; 255
    2792:	c9 f7       	brne	.-14     	; 0x2786 <__divsf3_pse+0x74>
    2794:	88 0f       	add	r24, r24
    2796:	91 1d       	adc	r25, r1
    2798:	96 95       	lsr	r25
    279a:	87 95       	ror	r24
    279c:	97 f9       	bld	r25, 7
    279e:	08 95       	ret
    27a0:	e1 e0       	ldi	r30, 0x01	; 1
    27a2:	66 0f       	add	r22, r22
    27a4:	77 1f       	adc	r23, r23
    27a6:	88 1f       	adc	r24, r24
    27a8:	bb 1f       	adc	r27, r27
    27aa:	62 17       	cp	r22, r18
    27ac:	73 07       	cpc	r23, r19
    27ae:	84 07       	cpc	r24, r20
    27b0:	ba 07       	cpc	r27, r26
    27b2:	20 f0       	brcs	.+8      	; 0x27bc <__divsf3_pse+0xaa>
    27b4:	62 1b       	sub	r22, r18
    27b6:	73 0b       	sbc	r23, r19
    27b8:	84 0b       	sbc	r24, r20
    27ba:	ba 0b       	sbc	r27, r26
    27bc:	ee 1f       	adc	r30, r30
    27be:	88 f7       	brcc	.-30     	; 0x27a2 <__divsf3_pse+0x90>
    27c0:	e0 95       	com	r30
    27c2:	08 95       	ret

000027c4 <__fp_mpack>:
    27c4:	9f 3f       	cpi	r25, 0xFF	; 255
    27c6:	31 f0       	breq	.+12     	; 0x27d4 <__fp_mpack_finite+0xc>

000027c8 <__fp_mpack_finite>:
    27c8:	91 50       	subi	r25, 0x01	; 1
    27ca:	20 f4       	brcc	.+8      	; 0x27d4 <__fp_mpack_finite+0xc>
    27cc:	87 95       	ror	r24
    27ce:	77 95       	ror	r23
    27d0:	67 95       	ror	r22
    27d2:	b7 95       	ror	r27
    27d4:	88 0f       	add	r24, r24
    27d6:	91 1d       	adc	r25, r1
    27d8:	96 95       	lsr	r25
    27da:	87 95       	ror	r24
    27dc:	97 f9       	bld	r25, 7
    27de:	08 95       	ret

000027e0 <memcmp>:
    27e0:	fb 01       	movw	r30, r22
    27e2:	dc 01       	movw	r26, r24
    27e4:	04 c0       	rjmp	.+8      	; 0x27ee <memcmp+0xe>
    27e6:	8d 91       	ld	r24, X+
    27e8:	01 90       	ld	r0, Z+
    27ea:	80 19       	sub	r24, r0
    27ec:	21 f4       	brne	.+8      	; 0x27f6 <memcmp+0x16>
    27ee:	41 50       	subi	r20, 0x01	; 1
    27f0:	50 40       	sbci	r21, 0x00	; 0
    27f2:	c8 f7       	brcc	.-14     	; 0x27e6 <memcmp+0x6>
    27f4:	88 1b       	sub	r24, r24
    27f6:	99 0b       	sbc	r25, r25
    27f8:	08 95       	ret

000027fa <memcpy>:
    27fa:	fb 01       	movw	r30, r22
    27fc:	dc 01       	movw	r26, r24
    27fe:	02 c0       	rjmp	.+4      	; 0x2804 <memcpy+0xa>
    2800:	01 90       	ld	r0, Z+
    2802:	0d 92       	st	X+, r0
    2804:	41 50       	subi	r20, 0x01	; 1
    2806:	50 40       	sbci	r21, 0x00	; 0
    2808:	d8 f7       	brcc	.-10     	; 0x2800 <memcpy+0x6>
    280a:	08 95       	ret

0000280c <memset>:
    280c:	dc 01       	movw	r26, r24
    280e:	01 c0       	rjmp	.+2      	; 0x2812 <memset+0x6>
    2810:	6d 93       	st	X+, r22
    2812:	41 50       	subi	r20, 0x01	; 1
    2814:	50 40       	sbci	r21, 0x00	; 0
    2816:	e0 f7       	brcc	.-8      	; 0x2810 <memset+0x4>
    2818:	08 95       	ret

0000281a <__eerd_byte_m32u4>:
    281a:	f9 99       	sbic	0x1f, 1	; 31
    281c:	fe cf       	rjmp	.-4      	; 0x281a <__eerd_byte_m32u4>
    281e:	92 bd       	out	0x22, r25	; 34
    2820:	81 bd       	out	0x21, r24	; 33
    2822:	f8 9a       	sbi	0x1f, 0	; 31
    2824:	99 27       	eor	r25, r25
    2826:	80 b5       	in	r24, 0x20	; 32
    2828:	08 95       	ret

0000282a <__eeupd_byte_m32u4>:
    282a:	26 2f       	mov	r18, r22

0000282c <__eeupd_r18_m32u4>:
    282c:	f9 99       	sbic	0x1f, 1	; 31
    282e:	fe cf       	rjmp	.-4      	; 0x282c <__eeupd_r18_m32u4>
    2830:	92 bd       	out	0x22, r25	; 34
    2832:	81 bd       	out	0x21, r24	; 33
    2834:	f8 9a       	sbi	0x1f, 0	; 31
    2836:	01 97       	sbiw	r24, 0x01	; 1
    2838:	00 b4       	in	r0, 0x20	; 32
    283a:	02 16       	cp	r0, r18
    283c:	39 f0       	breq	.+14     	; 0x284c <__eeupd_r18_m32u4+0x20>
    283e:	1f ba       	out	0x1f, r1	; 31
    2840:	20 bd       	out	0x20, r18	; 32
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	f8 94       	cli
    2846:	fa 9a       	sbi	0x1f, 2	; 31
    2848:	f9 9a       	sbi	0x1f, 1	; 31
    284a:	0f be       	out	0x3f, r0	; 63
    284c:	08 95       	ret

0000284e <_exit>:
    284e:	f8 94       	cli

00002850 <__stop_program>:
    2850:	ff cf       	rjmp	.-2      	; 0x2850 <__stop_program>
