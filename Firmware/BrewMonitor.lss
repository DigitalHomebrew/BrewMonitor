
BrewMonitor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800100  00002ff2  00003086  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ff2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a1  00800190  00800190  00003116  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003116  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000878  00000000  00000000  00003146  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000c1a7  00000000  00000000  000039be  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003243  00000000  00000000  0000fb65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000f033  00000000  00000000  00012da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000016c0  00000000  00000000  00021ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0001ab7b  00000000  00000000  0002349c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00008479  00000000  00000000  0003e017  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008f8  00000000  00000000  00046490  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000aa1f  00000000  00000000  00046d88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
       0:	75 c1       	rjmp	.+746    	; 0x2ec <__ctors_end>
       2:	00 00       	nop
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
       4:	8f c1       	rjmp	.+798    	; 0x324 <__bad_interrupt>
       6:	00 00       	nop
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
       8:	8d c1       	rjmp	.+794    	; 0x324 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c1       	rjmp	.+790    	; 0x324 <__bad_interrupt>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
       e:	00 00       	nop
      10:	89 c1       	rjmp	.+786    	; 0x324 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c1       	rjmp	.+782    	; 0x324 <__bad_interrupt>
      16:	00 00       	nop
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
      18:	85 c1       	rjmp	.+778    	; 0x324 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c1       	rjmp	.+774    	; 0x324 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c1       	rjmp	.+770    	; 0x324 <__bad_interrupt>
	while (UDCON & (1 << RMWKUP));
      22:	00 00       	nop
      24:	14 c2       	rjmp	.+1064   	; 0x44e <__vector_9>
      26:	00 00       	nop
      28:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__vector_10>
	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
      2c:	7b c1       	rjmp	.+758    	; 0x324 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c1       	rjmp	.+754    	; 0x324 <__bad_interrupt>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
      32:	00 00       	nop
      34:	77 c1       	rjmp	.+750    	; 0x324 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c1       	rjmp	.+746    	; 0x324 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c1       	rjmp	.+742    	; 0x324 <__bad_interrupt>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
      3e:	00 00       	nop
      40:	71 c1       	rjmp	.+738    	; 0x324 <__bad_interrupt>
			{
				*CurrConfigLoc = PrevDescLoc;
      42:	00 00       	nop
      44:	74 c3       	rjmp	.+1768   	; 0x72e <__vector_17>
				*BytesRem      = PrevBytesRem;
      46:	00 00       	nop
      48:	af c5       	rjmp	.+2910   	; 0xba8 <__vector_18>
      4a:	00 00       	nop
      4c:	47 c6       	rjmp	.+3214   	; 0xcdc <__vector_19>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
      4e:	00 00       	nop
}
      50:	69 c1       	rjmp	.+722    	; 0x324 <__bad_interrupt>
      52:	00 00       	nop
      54:	4e c3       	rjmp	.+1692   	; 0x6f2 <__vector_21>
      56:	00 00       	nop
      58:	31 c2       	rjmp	.+1122   	; 0x4bc <__vector_22>
      5a:	00 00       	nop
      5c:	63 c1       	rjmp	.+710    	; 0x324 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c1       	rjmp	.+706    	; 0x324 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 af 0a 	jmp	0x155e	; 0x155e <__vector_25>
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      68:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__vector_26>

	ParserData->TotalDeviceReports = 1;
      6c:	5b c1       	rjmp	.+694    	; 0x324 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c1       	rjmp	.+690    	; 0x324 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c1       	rjmp	.+686    	; 0x324 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c1       	rjmp	.+682    	; 0x324 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c1       	rjmp	.+678    	; 0x324 <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
      7e:	00 00       	nop
      80:	51 c1       	rjmp	.+674    	; 0x324 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c1       	rjmp	.+670    	; 0x324 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c1       	rjmp	.+666    	; 0x324 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
      8a:	00 00       	nop
      8c:	4b c1       	rjmp	.+662    	; 0x324 <__bad_interrupt>
      8e:	00 00       	nop
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
      90:	49 c1       	rjmp	.+658    	; 0x324 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c1       	rjmp	.+654    	; 0x324 <__bad_interrupt>
      96:	00 00       	nop
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
      98:	45 c1       	rjmp	.+650    	; 0x324 <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      9a:	00 00       	nop
      9c:	43 c1       	rjmp	.+646    	; 0x324 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c1       	rjmp	.+642    	; 0x324 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c1       	rjmp	.+638    	; 0x324 <__bad_interrupt>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      a6:	00 00       	nop
      a8:	3d c1       	rjmp	.+634    	; 0x324 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	03 07       	cpc	r16, r19
      ae:	ff 06       	cpc	r15, r31
      b0:	56 07       	cpc	r21, r22
      b2:	1c 07       	cpc	r17, r28
      b4:	f8 06       	cpc	r15, r24
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      b6:	fc 06       	cpc	r15, r28
      b8:	a3 07       	cpc	r26, r19
      ba:	73 07       	cpc	r23, r19
      bc:	87 07       	cpc	r24, r23
      be:	88 0e       	add	r8, r24
      c0:	aa 0e       	add	r10, r26
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      c2:	90 0f       	add	r25, r16
      c4:	aa 0e       	add	r10, r26
      c6:	90 0f       	add	r25, r16
      c8:	ec 0e       	add	r14, r28
      ca:	0f 0f       	add	r16, r31
      cc:	90 0f       	add	r25, r16
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      ce:	61 0f       	add	r22, r17
      d0:	73 0f       	add	r23, r19
      d2:	07 63       	ori	r16, 0x37	; 55
      d4:	42 36       	cpi	r20, 0x62	; 98
	{
		uint8_t  HIDReportItem  = *ReportData;
      d6:	b7 9b       	sbis	0x16, 7	; 22
      d8:	d8 a7       	std	Y+40, r29	; 0x28
      da:	1a 39       	cpi	r17, 0x9A	; 154
      dc:	68 56       	subi	r22, 0x68	; 104
      de:	18 ae       	std	Y+56, r1	; 0x38
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e0:	ba ab       	std	Y+50, r27	; 0x32
      e2:	55 8c       	ldd	r5, Z+29	; 0x1d
      e4:	1d 3c       	cpi	r17, 0xCD	; 205
      e6:	b7 cc       	rjmp	.-1682   	; 0xfffffa56 <__eeprom_end+0xff7efa56>
      e8:	57 63       	ori	r21, 0x37	; 55
      ea:	bd 6d       	ori	r27, 0xDD	; 221
      ec:	ed fd       	.word	0xfded	; ????
      ee:	75 3e       	cpi	r23, 0xE5	; 229
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;

		ReportData++;
      f0:	f6 17       	cp	r31, r22
      f2:	72 31       	cpi	r23, 0x12	; 18
      f4:	bf 00       	.word	0x00bf	; ????
		ReportSize--;
      f6:	00 00       	nop
      f8:	80 3f       	cpi	r24, 0xF0	; 240
	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;
      fa:	08 00       	.word	0x0008	; ????
      fc:	00 00       	nop
      fe:	be 92       	st	-X, r11
     100:	24 49       	sbci	r18, 0x94	; 148
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     102:	12 3e       	cpi	r17, 0xE2	; 226
     104:	ab aa       	std	Y+51, r10	; 0x33
     106:	aa 2a       	or	r10, r26
     108:	be cd       	rjmp	.-1156   	; 0xfffffc86 <__eeprom_end+0xff7efc86>
     10a:	cc cc       	rjmp	.-1640   	; 0xfffffaa4 <__eeprom_end+0xff7efaa4>
     10c:	4c 3e       	cpi	r20, 0xEC	; 236
     10e:	00 00       	nop
     110:	00 80       	ld	r0, Z
     112:	be ab       	std	Y+54, r27	; 0x36
     114:	aa aa       	std	Y+50, r10	; 0x32
     116:	aa 3e       	cpi	r26, 0xEA	; 234
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	bf 00       	.word	0x00bf	; ????
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     11e:	00 00       	nop
     120:	80 3f       	cpi	r24, 0xF0	; 240
     122:	00 00       	nop
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     124:	00 00       	nop
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     126:	00 08       	sbc	r0, r0
     128:	41 78       	andi	r20, 0x81	; 129
     12a:	d3 bb       	out	0x13, r29	; 19
     12c:	43 87       	std	Z+11, r20	; 0x0b
     12e:	d1 13       	cpse	r29, r17
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     130:	3d 19       	sub	r19, r13
     132:	0e 3c       	cpi	r16, 0xCE	; 206
     134:	c3 bd       	out	0x23, r28	; 35
     136:	42 82       	std	Z+2, r4	; 0x02
     138:	ad 2b       	or	r26, r29
     13a:	3e 68       	ori	r19, 0x8E	; 142
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     13c:	ec 82       	std	Y+4, r14	; 0x04
     13e:	76 be       	out	0x36, r7	; 54
				ReportData     += 4;
     140:	d9 8f       	std	Y+25, r29	; 0x19
     142:	e1 a9       	ldd	r30, Z+49	; 0x31
     144:	3e 4c       	sbci	r19, 0xCE	; 206
				break;
     146:	80 ef       	ldi	r24, 0xF0	; 240
			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     148:	ff be       	out	0x3f, r15	; 63
     14a:	01 c4       	rjmp	.+2050   	; 0x94e <CompactMemory+0x84>
     14c:	ff 7f       	andi	r31, 0xFF	; 255
     14e:	3f 00       	.word	0x003f	; ????
     150:	00 00       	nop
     152:	00 00       	nop

00000154 <ProductString>:
     154:	20 03 42 00 72 00 65 00 77 00 4d 00 6f 00 6e 00      .B.r.e.w.M.o.n.
				ReportSize     -= 2;
				ReportData     += 2;
				break;
     164:	69 00 74 00 6f 00 72 00 20 00 55 00 53 00 42 00     i.t.o.r. .U.S.B.
			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
				ReportSize     -= 1;
     174:	00 00                                               ..

00000176 <ManufacturerString>:
				ReportData     += 1;
     176:	22 03 44 00 69 00 67 00 69 00 74 00 61 00 6c 00     ".D.i.g.i.t.a.l.
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     186:	20 00 48 00 6f 00 6d 00 65 00 62 00 72 00 65 00      .H.o.m.e.b.r.e.
     196:	77 00 00 00                                         w...

0000019a <LanguageString>:
     19a:	04 03 09 04                                         ....

0000019e <ConfigurationDescriptor>:
     19e:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
     1ae:	00 00 09 21 11 01 00 01 22 20 00 07 05 81 03 08     ...!...." ......
     1be:	00 05                                               ..

000001c0 <DeviceDescriptor>:
     1c0:	12 01 10 01 00 00 00 08 d0 16 aa 07 00 00 01 02     ................
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d0:	00 01                                               ..

000001d2 <GenericReport>:
     1d2:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
				break;
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e2:	08 81 02 09 03 15 00 25 ff 75 08 95 08 91 02 c0     .......%.u......
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1f2:	00 40 7a 10 f3 5a 00 a0 72 4e 18 09 00 10 a5 d4     .@z..Z..rN......
     202:	e8 00 00 e8 76 48 17 00 00 e4 0b 54 02 00 00 ca     ....vH.....T....
     212:	9a 3b 00 00 00 e1 f5 05 00 00 80 96 98 00 00 00     .;..............
     222:	40 42 0f 00 00 00 a0 86 01 00 00 00 10 27 00 00     @B...........'..
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     232:	00 00 e8 03 00 00 00 00 64 00 00 00 00 00 0a 00     ........d.......
     242:	00 00 00 00 01 00 00 00 00 00 2c 76 d8 88 dc 67     ..........,v...g
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     252:	4f 08 23 df c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53     O.#....Y.......S
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     262:	c6 3a e6 51 99 76 96 e8 e6 c2 84 26 eb 89 8c 9b     .:.Q.v.....&....
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     272:	62 ed 40 7c 6f fc ef bc 9c 9f 40 f2 ba a5 6f a5     b.@|o.....@...o.
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     282:	f4 90 05 5a 2a f7 5c 93 6b 6c f9 67 6d c1 1b fc     ...Z*.\.kl.gm...
				break;
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     292:	e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed 90 2e 03 00     ...G.. .........
				break;
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a2:	94 35 77 05 00 80 84 1e 08 00 00 20 4e 0a 00 00     .5w........ N...
				break;
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2b2:	00 c8 0c 33 33 33 33 0f 98 6e 12 83 11 41 ef 8d     ...3333..n...A..
				break;
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2c2:	21 14 89 3b e6 55 16 cf fe e6 db 18 d1 84 4b 38     !..;.U........K8
				break;
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d2:	1b f7 7c 1d 90 1d a4 bb e4 24 20 32 84 72 5e 22     ..|......$ 2.r^"

				if (ParserData->UsingReportIDs)
     2e2:	81 00 c9 f1 24 ec a1 e5 3d 27                       ....$...='

000002ec <__ctors_end>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	11 24       	eor	r1, r1
     2ee:	1f be       	out	0x3f, r1	; 63
     2f0:	cf ef       	ldi	r28, 0xFF	; 255
     2f2:	da e0       	ldi	r29, 0x0A	; 10
     2f4:	de bf       	out	0x3e, r29	; 62
     2f6:	cd bf       	out	0x3d, r28	; 61

000002f8 <__do_copy_data>:
     2f8:	11 e0       	ldi	r17, 0x01	; 1
     2fa:	a0 e0       	ldi	r26, 0x00	; 0
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     2fc:	b1 e0       	ldi	r27, 0x01	; 1
     2fe:	e2 ef       	ldi	r30, 0xF2	; 242
     300:	ff e2       	ldi	r31, 0x2F	; 47
     302:	02 c0       	rjmp	.+4      	; 0x308 <__do_copy_data+0x10>
     304:	05 90       	lpm	r0, Z+
     306:	0d 92       	st	X+, r0
     308:	a0 39       	cpi	r26, 0x90	; 144
     30a:	b1 07       	cpc	r27, r17
     30c:	d9 f7       	brne	.-10     	; 0x304 <__do_copy_data+0xc>

0000030e <__do_clear_bss>:
     30e:	22 e0       	ldi	r18, 0x02	; 2
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     310:	a0 e9       	ldi	r26, 0x90	; 144
     312:	b1 e0       	ldi	r27, 0x01	; 1
     314:	01 c0       	rjmp	.+2      	; 0x318 <.do_clear_bss_start>

00000316 <.do_clear_bss_loop>:
     316:	1d 92       	st	X+, r1

00000318 <.do_clear_bss_start>:
     318:	a1 33       	cpi	r26, 0x31	; 49
     31a:	b2 07       	cpc	r27, r18
     31c:	e1 f7       	brne	.-8      	; 0x316 <.do_clear_bss_loop>
     31e:	f5 d3       	rcall	.+2026   	; 0xb0a <main>
     320:	0c 94 f7 17 	jmp	0x2fee	; 0x2fee <_exit>

00000324 <__bad_interrupt>:
     324:	6d ce       	rjmp	.-806    	; 0x0 <__vectors>

00000326 <WaitForButtonRelease>:
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	ef e3       	ldi	r30, 0x3F	; 63
     32a:	fc e9       	ldi	r31, 0x9C	; 156
     32c:	31 97       	sbiw	r30, 0x01	; 1
     32e:	f1 f7       	brne	.-4      	; 0x32c <WaitForButtonRelease+0x6>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     330:	00 c0       	rjmp	.+0      	; 0x332 <WaitForButtonRelease+0xc>
     332:	00 00       	nop
     334:	1f 9b       	sbis	0x03, 7	; 3
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     336:	03 c0       	rjmp	.+6      	; 0x33e <WaitForButtonRelease+0x18>
     338:	84 31       	cpi	r24, 0x14	; 20
     33a:	11 f4       	brne	.+4      	; 0x340 <WaitForButtonRelease+0x1a>
     33c:	03 c0       	rjmp	.+6      	; 0x344 <WaitForButtonRelease+0x1e>
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	8f 5f       	subi	r24, 0xFF	; 255
     342:	f2 cf       	rjmp	.-28     	; 0x328 <WaitForButtonRelease+0x2>
     344:	8f e3       	ldi	r24, 0x3F	; 63
     346:	9c e9       	ldi	r25, 0x9C	; 156
     348:	01 97       	sbiw	r24, 0x01	; 1
     34a:	f1 f7       	brne	.-4      	; 0x348 <WaitForButtonRelease+0x22>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <WaitForButtonRelease+0x28>
     34e:	00 00       	nop
     350:	08 95       	ret

00000352 <SetupHardware>:
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	80 e8       	ldi	r24, 0x80	; 128
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	f8 94       	cli
     35a:	80 93 61 00 	sts	0x0061, r24
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     35e:	90 93 61 00 	sts	0x0061, r25
     362:	0f be       	out	0x3f, r0	; 63
					}
				}

				ParserData->UsingReportIDs = true;
     364:	85 bf       	out	0x35, r24	; 53
     366:	85 bf       	out	0x35, r24	; 53
     368:	84 b7       	in	r24, 0x34	; 52
     36a:	87 7f       	andi	r24, 0xF7	; 247
     36c:	84 bf       	out	0x34, r24	; 52
     36e:	88 e1       	ldi	r24, 0x18	; 24

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	80 93 60 00 	sts	0x0060, r24
     378:	10 92 60 00 	sts	0x0060, r1
     37c:	0f be       	out	0x3f, r0	; 63
     37e:	25 9a       	sbi	0x04, 5	; 4
				break;
     380:	24 9a       	sbi	0x04, 4	; 4
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     382:	85 9a       	sbi	0x10, 5	; 16
     384:	84 9a       	sbi	0x10, 4	; 16
     386:	80 9a       	sbi	0x10, 0	; 16
     388:	27 98       	cbi	0x04, 7	; 4
     38a:	81 98       	cbi	0x10, 1	; 16
     38c:	54 9a       	sbi	0x0a, 4	; 10
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     38e:	50 9a       	sbi	0x0a, 0	; 10
     390:	51 9a       	sbi	0x0a, 1	; 10
     392:	8d 9a       	sbi	0x11, 5	; 17
     394:	8f 9a       	sbi	0x11, 7	; 17
     396:	88 9a       	sbi	0x11, 0	; 17
     398:	8c 9a       	sbi	0x11, 4	; 17
     39a:	2f ef       	ldi	r18, 0xFF	; 255
     39c:	87 e8       	ldi	r24, 0x87	; 135
     39e:	93 e1       	ldi	r25, 0x13	; 19
     3a0:	21 50       	subi	r18, 0x01	; 1
     3a2:	80 40       	sbci	r24, 0x00	; 0
     3a4:	90 40       	sbci	r25, 0x00	; 0
     3a6:	e1 f7       	brne	.-8      	; 0x3a0 <SetupHardware+0x4e>
				break;
     3a8:	00 c0       	rjmp	.+0      	; 0x3aa <SetupHardware+0x58>
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3aa:	00 00       	nop
     3ac:	26 e0       	ldi	r18, 0x06	; 6
     3ae:	40 e3       	ldi	r20, 0x30	; 48
     3b0:	50 e0       	ldi	r21, 0x00	; 0
     3b2:	61 e3       	ldi	r22, 0x31	; 49
     3b4:	70 e0       	ldi	r23, 0x00	; 0
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3b6:	8f e2       	ldi	r24, 0x2F	; 47
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	b8 d6       	rcall	.+3440   	; 0x112c <ow_set_bus>
     3bc:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <LC32_Init>
     3c0:	ea e7       	ldi	r30, 0x7A	; 122
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 81       	ld	r24, Z
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3c6:	84 60       	ori	r24, 0x04	; 4
     3c8:	80 83       	st	Z, r24
     3ca:	80 81       	ld	r24, Z

					while (CurrCollectionPath->Parent != NULL)
     3cc:	82 60       	ori	r24, 0x02	; 2
     3ce:	80 83       	st	Z, r24
     3d0:	80 81       	ld	r24, Z
     3d2:	81 60       	ori	r24, 0x01	; 1
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3d4:	80 83       	st	Z, r24
     3d6:	ac e7       	ldi	r26, 0x7C	; 124
     3d8:	b0 e0       	ldi	r27, 0x00	; 0
     3da:	8c 91       	ld	r24, X
     3dc:	80 64       	ori	r24, 0x40	; 64
     3de:	8c 93       	st	X, r24
     3e0:	8c 91       	ld	r24, X
     3e2:	80 62       	ori	r24, 0x20	; 32
     3e4:	8c 93       	st	X, r24
     3e6:	8c 91       	ld	r24, X
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3e8:	81 60       	ori	r24, 0x01	; 1
     3ea:	8c 93       	st	X, r24
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3ec:	80 81       	ld	r24, Z
     3ee:	80 68       	ori	r24, 0x80	; 128
     3f0:	80 83       	st	Z, r24
     3f2:	80 81       	ld	r24, Z
     3f4:	80 64       	ori	r24, 0x40	; 64
     3f6:	80 83       	st	Z, r24
     3f8:	08 95       	ret

000003fa <SetupTimerInterrupts>:
     3fa:	85 b5       	in	r24, 0x25	; 37
     3fc:	81 60       	ori	r24, 0x01	; 1
     3fe:	85 bd       	out	0x25, r24	; 37
				}

				CurrCollectionPath->Type       = ReportItemData;
     400:	85 b5       	in	r24, 0x25	; 37
     402:	84 60       	ori	r24, 0x04	; 4
     404:	85 bd       	out	0x25, r24	; 37
     406:	e1 e8       	ldi	r30, 0x81	; 129
     408:	f0 e0       	ldi	r31, 0x00	; 0
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     40a:	80 81       	ld	r24, Z
     40c:	81 60       	ori	r24, 0x01	; 1
     40e:	80 83       	st	Z, r24
     410:	80 81       	ld	r24, Z
     412:	84 60       	ori	r24, 0x04	; 4
     414:	80 83       	st	Z, r24
     416:	ef e6       	ldi	r30, 0x6F	; 111

				if (UsageListSize)
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	80 81       	ld	r24, Z
     41c:	82 60       	ori	r24, 0x02	; 2
     41e:	80 83       	st	Z, r24
     420:	80 81       	ld	r24, Z
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     422:	84 60       	ori	r24, 0x04	; 4
     424:	80 83       	st	Z, r24
     426:	e8 e6       	ldi	r30, 0x68	; 104
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	80 81       	ld	r24, Z
     42c:	81 60       	ori	r24, 0x01	; 1
     42e:	80 83       	st	Z, r24
     430:	eb e6       	ldi	r30, 0x6B	; 107
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	80 68       	ori	r24, 0x80	; 128

					for (uint8_t i = 0; i < UsageListSize; i++)
     438:	80 83       	st	Z, r24
					  UsageList[i] = UsageList[i + 1];
     43a:	ee e6       	ldi	r30, 0x6E	; 110
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	80 81       	ld	r24, Z
     440:	84 60       	ori	r24, 0x04	; 4

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     442:	80 83       	st	Z, r24
     444:	78 94       	sei
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	80 93 fc 01 	sts	0x01FC, r24
     44c:	08 95       	ret

0000044e <__vector_9>:
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     44e:	1f 92       	push	r1
     450:	0f 92       	push	r0
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	0f 92       	push	r0
     456:	11 24       	eor	r1, r1
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     458:	2f 93       	push	r18
     45a:	8f 93       	push	r24
     45c:	9f 93       	push	r25
     45e:	1f 99       	sbic	0x03, 7	; 3
     460:	05 c0       	rjmp	.+10     	; 0x46c <__vector_9+0x1e>
     462:	10 92 1a 02 	sts	0x021A, r1
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     466:	10 92 19 02 	sts	0x0219, r1
     46a:	20 c0       	rjmp	.+64     	; 0x4ac <__vector_9+0x5e>
     46c:	80 91 19 02 	lds	r24, 0x0219
     470:	90 91 1a 02 	lds	r25, 0x021A
     474:	83 32       	cpi	r24, 0x23	; 35
     476:	21 e0       	ldi	r18, 0x01	; 1
     478:	92 07       	cpc	r25, r18
     47a:	20 f0       	brcs	.+8      	; 0x484 <__vector_9+0x36>
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	80 93 de 01 	sts	0x01DE, r24
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     482:	0d c0       	rjmp	.+26     	; 0x49e <__vector_9+0x50>
     484:	89 2b       	or	r24, r25
     486:	91 f0       	breq	.+36     	; 0x4ac <__vector_9+0x5e>
     488:	80 91 ff 01 	lds	r24, 0x01FF
     48c:	88 23       	and	r24, r24
     48e:	21 f0       	breq	.+8      	; 0x498 <__vector_9+0x4a>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	80 93 02 02 	sts	0x0202, r24
     496:	03 c0       	rjmp	.+6      	; 0x49e <__vector_9+0x50>
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	80 93 ec 01 	sts	0x01EC, r24
     49e:	80 91 68 00 	lds	r24, 0x0068
				break;
     4a2:	8e 7f       	andi	r24, 0xFE	; 254
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4a4:	80 93 68 00 	sts	0x0068, r24
     4a8:	10 92 f1 01 	sts	0x01F1, r1
     4ac:	9f 91       	pop	r25
     4ae:	8f 91       	pop	r24
     4b0:	2f 91       	pop	r18
     4b2:	0f 90       	pop	r0
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	0f 90       	pop	r0
     4b8:	1f 90       	pop	r1
     4ba:	18 95       	reti

000004bc <__vector_22>:
     4bc:	1f 92       	push	r1
     4be:	0f 92       	push	r0
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	0f 92       	push	r0
     4c4:	11 24       	eor	r1, r1
     4c6:	2f 93       	push	r18
     4c8:	8f 93       	push	r24
     4ca:	9f 93       	push	r25
     4cc:	1f 99       	sbic	0x03, 7	; 3
     4ce:	0a c0       	rjmp	.+20     	; 0x4e4 <__vector_22+0x28>
     4d0:	80 91 19 02 	lds	r24, 0x0219
     4d4:	90 91 1a 02 	lds	r25, 0x021A
     4d8:	01 96       	adiw	r24, 0x01	; 1
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4da:	90 93 1a 02 	sts	0x021A, r25
     4de:	80 93 19 02 	sts	0x0219, r24
     4e2:	04 c0       	rjmp	.+8      	; 0x4ec <__vector_22+0x30>
     4e4:	10 92 1a 02 	sts	0x021A, r1
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4e8:	10 92 19 02 	sts	0x0219, r1
     4ec:	80 91 f1 01 	lds	r24, 0x01F1
     4f0:	91 e0       	ldi	r25, 0x01	; 1
     4f2:	98 0f       	add	r25, r24
     4f4:	90 93 f1 01 	sts	0x01F1, r25
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     4f8:	83 30       	cpi	r24, 0x03	; 3
     4fa:	29 f4       	brne	.+10     	; 0x506 <__vector_22+0x4a>
					NewReportItem.CollectionPath = CurrCollectionPath;
     4fc:	80 91 68 00 	lds	r24, 0x0068
     500:	81 60       	ori	r24, 0x01	; 1
     502:	80 93 68 00 	sts	0x0068, r24
     506:	80 91 19 02 	lds	r24, 0x0219
     50a:	90 91 1a 02 	lds	r25, 0x021A
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     50e:	83 32       	cpi	r24, 0x23	; 35
     510:	91 40       	sbci	r25, 0x01	; 1
     512:	20 f0       	brcs	.+8      	; 0x51c <__vector_22+0x60>

					if (UsageListSize)
     514:	85 b1       	in	r24, 0x05	; 5
     516:	90 e2       	ldi	r25, 0x20	; 32
     518:	89 27       	eor	r24, r25
     51a:	85 b9       	out	0x05, r24	; 5
     51c:	9f 91       	pop	r25
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     51e:	8f 91       	pop	r24
     520:	2f 91       	pop	r18
     522:	0f 90       	pop	r0
     524:	0f be       	out	0x3f, r0	; 63
     526:	0f 90       	pop	r0
     528:	1f 90       	pop	r1
     52a:	18 95       	reti

0000052c <StartRecording>:
     52c:	cf 93       	push	r28
     52e:	c8 2f       	mov	r28, r24
     530:	10 92 ec 01 	sts	0x01EC, r1

						for (uint8_t i = 0; i < UsageListSize; i++)
     534:	10 92 04 02 	sts	0x0204, r1
						  UsageList[i] = UsageList[i + 1];
     538:	61 e0       	ldi	r22, 0x01	; 1
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	90 e0       	ldi	r25, 0x00	; 0

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     53e:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__eeupd_byte_m32u4>
     542:	80 91 ea 01 	lds	r24, 0x01EA
     546:	90 91 eb 01 	lds	r25, 0x01EB
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     54a:	c1 11       	cpse	r28, r1
     54c:	02 c0       	rjmp	.+4      	; 0x552 <StartRecording+0x26>
     54e:	00 97       	sbiw	r24, 0x00	; 0
     550:	71 f4       	brne	.+28     	; 0x56e <StartRecording+0x42>
     552:	40 e0       	ldi	r20, 0x00	; 0
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     554:	50 e0       	ldi	r21, 0x00	; 0
     556:	6f ef       	ldi	r22, 0xFF	; 255
     558:	7f ef       	ldi	r23, 0xFF	; 255
     55a:	6f d7       	rcall	.+3806   	; 0x143a <LC32_WriteSample>
     55c:	80 91 ea 01 	lds	r24, 0x01EA
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     560:	90 91 eb 01 	lds	r25, 0x01EB
     564:	04 96       	adiw	r24, 0x04	; 4
     566:	90 93 eb 01 	sts	0x01EB, r25
     56a:	80 93 ea 01 	sts	0x01EA, r24
     56e:	21 e0       	ldi	r18, 0x01	; 1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     570:	20 93 06 02 	sts	0x0206, r18
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     574:	20 93 1c 02 	sts	0x021C, r18
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     578:	80 91 84 00 	lds	r24, 0x0084
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     57c:	90 91 85 00 	lds	r25, 0x0085
     580:	87 5f       	subi	r24, 0xF7	; 247
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     582:	92 4c       	sbci	r25, 0xC2	; 194
     584:	90 93 89 00 	sts	0x0089, r25

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     588:	80 93 88 00 	sts	0x0088, r24
     58c:	20 93 ff 01 	sts	0x01FF, r18
     590:	10 92 e5 01 	sts	0x01E5, r1
     594:	10 92 e4 01 	sts	0x01E4, r1
     598:	10 92 f5 01 	sts	0x01F5, r1
     59c:	10 92 f4 01 	sts	0x01F4, r1

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5a0:	cf 91       	pop	r28
     5a2:	08 95       	ret

000005a4 <StopRecording>:
     5a4:	10 92 02 02 	sts	0x0202, r1
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__eeupd_byte_m32u4>

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b2:	10 92 ff 01 	sts	0x01FF, r1
     5b6:	2d 98       	cbi	0x05, 5	; 5
     5b8:	08 95       	ret

000005ba <ClearExternalMemory>:
     5ba:	10 92 de 01 	sts	0x01DE, r1
     5be:	f2 df       	rcall	.-28     	; 0x5a4 <StopRecording>
     5c0:	2d 9a       	sbi	0x05, 5	; 5
     5c2:	1b d7       	rcall	.+3638   	; 0x13fa <LC32_Clear>
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	86 e0       	ldi	r24, 0x06	; 6
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__eeupd_byte_m32u4>
     5ce:	10 92 e6 01 	sts	0x01E6, r1
     5d2:	10 92 eb 01 	sts	0x01EB, r1
     5d6:	10 92 ea 01 	sts	0x01EA, r1
     5da:	10 92 f5 01 	sts	0x01F5, r1
     5de:	10 92 f4 01 	sts	0x01F4, r1
     5e2:	2d 98       	cbi	0x05, 5	; 5
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	80 93 fb 01 	sts	0x01FB, r24

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5ea:	08 95       	ret

000005ec <GetNextEmptyAddress>:
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	c0 e0       	ldi	r28, 0x00	; 0
					  return HID_PARSE_InsufficientReportItems;
     5f2:	d0 e0       	ldi	r29, 0x00	; 0
     5f4:	ce 01       	movw	r24, r28

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     5f6:	4b d7       	rcall	.+3734   	; 0x148e <LC32_ReadSample>
     5f8:	6f 3f       	cpi	r22, 0xFF	; 255
     5fa:	7f 4f       	sbci	r23, 0xFF	; 255
     5fc:	11 f4       	brne	.+4      	; 0x602 <GetNextEmptyAddress+0x16>
     5fe:	01 96       	adiw	r24, 0x01	; 1
     600:	39 f0       	breq	.+14     	; 0x610 <GetNextEmptyAddress+0x24>
     602:	24 96       	adiw	r28, 0x04	; 4
     604:	c1 15       	cp	r28, r1
     606:	80 e1       	ldi	r24, 0x10	; 16
     608:	d8 07       	cpc	r29, r24
     60a:	a1 f7       	brne	.-24     	; 0x5f4 <GetNextEmptyAddress+0x8>
     60c:	c0 e0       	ldi	r28, 0x00	; 0
     60e:	d0 e0       	ldi	r29, 0x00	; 0
     610:	ce 01       	movw	r24, r28
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	08 95       	ret

00000618 <LoadSettings>:
     618:	0f 93       	push	r16
     61a:	1f 93       	push	r17
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	1f 92       	push	r1
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
     626:	86 e0       	ldi	r24, 0x06	; 6
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__eerd_byte_m32u4>
     62e:	8f 3f       	cpi	r24, 0xFF	; 255
     630:	f1 f4       	brne	.+60     	; 0x66e <LoadSettings+0x56>
     632:	60 e0       	ldi	r22, 0x00	; 0
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__eeupd_byte_m32u4>
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	86 e0       	ldi	r24, 0x06	; 6
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__eeupd_byte_m32u4>
     646:	64 e1       	ldi	r22, 0x14	; 20
     648:	88 e0       	ldi	r24, 0x08	; 8
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__eeupd_byte_m32u4>
     650:	62 e3       	ldi	r22, 0x32	; 50
     652:	8a e0       	ldi	r24, 0x0A	; 10
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__eeupd_byte_m32u4>
     65a:	60 e0       	ldi	r22, 0x00	; 0
     65c:	8c e0       	ldi	r24, 0x0C	; 12
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__eeupd_byte_m32u4>
     664:	60 e2       	ldi	r22, 0x20	; 32
     666:	8e e0       	ldi	r24, 0x0E	; 14
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__eeupd_byte_m32u4>
     66e:	be df       	rcall	.-132    	; 0x5ec <GetNextEmptyAddress>
     670:	90 93 eb 01 	sts	0x01EB, r25
     674:	80 93 ea 01 	sts	0x01EA, r24
     678:	86 e0       	ldi	r24, 0x06	; 6
     67a:	90 e0       	ldi	r25, 0x00	; 0
					  ParserData->TotalReportItems++;
     67c:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__eerd_byte_m32u4>
     680:	80 93 e6 01 	sts	0x01E6, r24
     684:	88 e0       	ldi	r24, 0x08	; 8
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__eerd_byte_m32u4>
     68c:	80 93 08 02 	sts	0x0208, r24
     690:	8a e0       	ldi	r24, 0x0A	; 10
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__eerd_byte_m32u4>
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     698:	80 93 f7 01 	sts	0x01F7, r24
     69c:	8e e0       	ldi	r24, 0x0E	; 14
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__eerd_byte_m32u4>
     6a4:	90 e0       	ldi	r25, 0x00	; 0
		}
	}

	if (!(ParserData->TotalReportItems))
     6a6:	18 2f       	mov	r17, r24
     6a8:	00 27       	eor	r16, r16
     6aa:	10 93 e2 01 	sts	0x01E2, r17
	  return HID_PARSE_NoUnfilteredReportItems;
     6ae:	00 93 e1 01 	sts	0x01E1, r16

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6b2:	8c e0       	ldi	r24, 0x0C	; 12
     6b4:	90 e0       	ldi	r25, 0x00	; 0

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6b6:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__eerd_byte_m32u4>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6ba:	08 0f       	add	r16, r24
     6bc:	11 1d       	adc	r17, r1
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6be:	10 93 e2 01 	sts	0x01E2, r17
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6c2:	00 93 e1 01 	sts	0x01E1, r16
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	90 e0       	ldi	r25, 0x00	; 0
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6ca:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__eerd_byte_m32u4>

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6ce:	81 30       	cpi	r24, 0x01	; 1
     6d0:	51 f4       	brne	.+20     	; 0x6e6 <LoadSettings+0xce>
     6d2:	1f 99       	sbic	0x03, 7	; 3
     6d4:	06 c0       	rjmp	.+12     	; 0x6e2 <LoadSettings+0xca>
     6d6:	89 83       	std	Y+1, r24	; 0x01
     6d8:	26 de       	rcall	.-948    	; 0x326 <WaitForButtonRelease>
     6da:	89 81       	ldd	r24, Y+1	; 0x01
     6dc:	80 93 04 02 	sts	0x0204, r24
     6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <LoadSettings+0xce>
     6e2:	80 93 ec 01 	sts	0x01EC, r24
     6e6:	0f 90       	pop	r0
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	08 95       	ret

000006f2 <__vector_21>:
     6f2:	1f 92       	push	r1
     6f4:	0f 92       	push	r0
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	0f 92       	push	r0
     6fa:	11 24       	eor	r1, r1
     6fc:	8f 93       	push	r24
     6fe:	9f 93       	push	r25
}

// turns off recording led after 320ms.
ISR(TIMER0_COMPA_vect)
{
	if(_recordLedTurnOffCounter++ == 20)
     700:	80 91 e3 01 	lds	r24, 0x01E3
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	98 0f       	add	r25, r24
     708:	90 93 e3 01 	sts	0x01E3, r25
     70c:	84 31       	cpi	r24, 0x14	; 20
     70e:	41 f4       	brne	.+16     	; 0x720 <__vector_21+0x2e>
	{
		// turn off record LED
		output_low(RECORD_LED_PORT, RECORD_LED_PIN);
     710:	2d 98       	cbi	0x05, 5	; 5
		
		// clear counter
		_recordLedTurnOffCounter = 0;
     712:	10 92 e3 01 	sts	0x01E3, r1
		
		// disable oc0a interrupt
		TIMSK0 &= ~(1 << OCIE0A);
     716:	80 91 6e 00 	lds	r24, 0x006E
     71a:	8d 7f       	andi	r24, 0xFD	; 253
     71c:	80 93 6e 00 	sts	0x006E, r24
	}
}
     720:	9f 91       	pop	r25
     722:	8f 91       	pop	r24
     724:	0f 90       	pop	r0
     726:	0f be       	out	0x3f, r0	; 63
     728:	0f 90       	pop	r0
     72a:	1f 90       	pop	r1
     72c:	18 95       	reti

0000072e <__vector_17>:

// record values once per second
ISR(TIMER1_COMPA_vect)
{
     72e:	1f 92       	push	r1
     730:	0f 92       	push	r0
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	0f 92       	push	r0
     736:	11 24       	eor	r1, r1
     738:	8f 93       	push	r24
     73a:	9f 93       	push	r25
	// set next interrupt in 1 second
	OCR1A += 0x3D09; 
     73c:	80 91 88 00 	lds	r24, 0x0088
     740:	90 91 89 00 	lds	r25, 0x0089
     744:	87 5f       	subi	r24, 0xF7	; 247
     746:	92 4c       	sbci	r25, 0xC2	; 194
     748:	90 93 89 00 	sts	0x0089, r25
     74c:	80 93 88 00 	sts	0x0088, r24
	
	// tell main loop to record a sample outside of this ISR
	if(_recording)
     750:	80 91 ff 01 	lds	r24, 0x01FF
     754:	88 23       	and	r24, r24
     756:	19 f0       	breq	.+6      	; 0x75e <__vector_17+0x30>
	{
		_recordSampleFlag = 1;
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	80 93 06 02 	sts	0x0206, r24
	}
	
	// keep measuring temperature regardless of whether we're recording
	_measureTempFlag = 1;
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	80 93 1c 02 	sts	0x021C, r24
}
     764:	9f 91       	pop	r25
     766:	8f 91       	pop	r24
     768:	0f 90       	pop	r0
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	0f 90       	pop	r0
     76e:	1f 90       	pop	r1
     770:	18 95       	reti

00000772 <UploadSample>:
	
	if(_nextMemoryPosition == 4096)
		CompactMemory();
}

void UploadSample(void) {
     772:	ef 92       	push	r14
     774:	ff 92       	push	r15
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	6c 97       	sbiw	r28, 0x1c	; 28
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	de bf       	out	0x3e, r29	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	cd bf       	out	0x3d, r28	; 61
	// convert raw temp reading to Celsius string
	double temperatureCelsius = (double)_temperature * 0.0625;
     78e:	60 91 ef 01 	lds	r22, 0x01EF
     792:	70 91 f0 01 	lds	r23, 0x01F0
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	40 e8       	ldi	r20, 0x80	; 128
     7a4:	5d e3       	ldi	r21, 0x3D	; 61
     7a6:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__mulsf3>
	char temperatureString[16];
    dtostrf(temperatureCelsius, 1, 4, temperatureString);
     7aa:	9e 01       	movw	r18, r28
     7ac:	2f 5f       	subi	r18, 0xFF	; 255
     7ae:	3f 4f       	sbci	r19, 0xFF	; 255
     7b0:	79 01       	movw	r14, r18
     7b2:	89 01       	movw	r16, r18
     7b4:	24 e0       	ldi	r18, 0x04	; 4
     7b6:	41 e0       	ldi	r20, 0x01	; 1
     7b8:	0e 94 18 15 	call	0x2a30	; 0x2a30 <dtostrf>
	uint8_t temperatureStringLength = strlen(temperatureString);
     7bc:	f7 01       	movw	r30, r14
     7be:	01 90       	ld	r0, Z+
     7c0:	00 20       	and	r0, r0
     7c2:	e9 f7       	brne	.-6      	; 0x7be <UploadSample+0x4c>
     7c4:	8e 2f       	mov	r24, r30
     7c6:	8e 19       	sub	r24, r14
	
	
	int8_t totalMessageLength = temperatureStringLength + 52;
     7c8:	8d 5c       	subi	r24, 0xCD	; 205
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     7ca:	4a e0       	ldi	r20, 0x0A	; 10
     7cc:	be 01       	movw	r22, r28
     7ce:	6f 5e       	subi	r22, 0xEF	; 239
     7d0:	7f 4f       	sbci	r23, 0xFF	; 255
     7d2:	99 27       	eor	r25, r25
     7d4:	87 fd       	sbrc	r24, 7
     7d6:	90 95       	com	r25
     7d8:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <__itoa_ncheck>
	char totalMessageLengthString[12];
	itoa(totalMessageLength, totalMessageLengthString, 10);

	uart_puts("AT+RST\n");
     7dc:	80 e1       	ldi	r24, 0x10	; 16
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	44 d7       	rcall	.+3720   	; 0x166a <uart_puts>
     7e2:	3f ef       	ldi	r19, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7e4:	83 ed       	ldi	r24, 0xD3	; 211
     7e6:	90 e3       	ldi	r25, 0x30	; 48
     7e8:	31 50       	subi	r19, 0x01	; 1
     7ea:	80 40       	sbci	r24, 0x00	; 0
     7ec:	90 40       	sbci	r25, 0x00	; 0
     7ee:	e1 f7       	brne	.-8      	; 0x7e8 <UploadSample+0x76>
     7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <UploadSample+0x80>
     7f2:	00 00       	nop
     7f4:	88 e1       	ldi	r24, 0x18	; 24
	_delay_ms(1000); // wait for OK
	uart_puts("AT+CIPMUX=0\n");
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	38 d7       	rcall	.+3696   	; 0x166a <uart_puts>
     7fa:	2f ef       	ldi	r18, 0xFF	; 255
     7fc:	33 ec       	ldi	r19, 0xC3	; 195
     7fe:	89 e0       	ldi	r24, 0x09	; 9
     800:	21 50       	subi	r18, 0x01	; 1
     802:	30 40       	sbci	r19, 0x00	; 0
     804:	80 40       	sbci	r24, 0x00	; 0
     806:	e1 f7       	brne	.-8      	; 0x800 <UploadSample+0x8e>
     808:	00 c0       	rjmp	.+0      	; 0x80a <UploadSample+0x98>
     80a:	00 00       	nop
     80c:	85 e2       	ldi	r24, 0x25	; 37
     80e:	91 e0       	ldi	r25, 0x01	; 1
	_delay_ms(200); // wait for OK
	uart_puts("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\n");
     810:	2c d7       	rcall	.+3672   	; 0x166a <uart_puts>
     812:	9f ef       	ldi	r25, 0xFF	; 255
     814:	23 ed       	ldi	r18, 0xD3	; 211
     816:	30 e3       	ldi	r19, 0x30	; 48
     818:	91 50       	subi	r25, 0x01	; 1
     81a:	20 40       	sbci	r18, 0x00	; 0
     81c:	30 40       	sbci	r19, 0x00	; 0
     81e:	e1 f7       	brne	.-8      	; 0x818 <UploadSample+0xa6>
     820:	00 c0       	rjmp	.+0      	; 0x822 <UploadSample+0xb0>
     822:	00 00       	nop
     824:	8d e4       	ldi	r24, 0x4D	; 77
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	20 d7       	rcall	.+3648   	; 0x166a <uart_puts>
	_delay_ms(1000); // wait for OK Linked
	uart_puts("AT+CIPSEND=");
     82a:	ce 01       	movw	r24, r28
     82c:	41 96       	adiw	r24, 0x11	; 17
     82e:	1d d7       	rcall	.+3642   	; 0x166a <uart_puts>
     830:	8b e4       	ldi	r24, 0x4B	; 75
	uart_puts(totalMessageLengthString);
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	1a d7       	rcall	.+3636   	; 0x166a <uart_puts>
     836:	8f ef       	ldi	r24, 0xFF	; 255
     838:	93 ec       	ldi	r25, 0xC3	; 195
	uart_puts("\n");
     83a:	29 e0       	ldi	r18, 0x09	; 9
     83c:	81 50       	subi	r24, 0x01	; 1
     83e:	90 40       	sbci	r25, 0x00	; 0
     840:	20 40       	sbci	r18, 0x00	; 0
     842:	e1 f7       	brne	.-8      	; 0x83c <UploadSample+0xca>
     844:	00 c0       	rjmp	.+0      	; 0x846 <UploadSample+0xd4>
     846:	00 00       	nop
     848:	89 e5       	ldi	r24, 0x59	; 89
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	0e d7       	rcall	.+3612   	; 0x166a <uart_puts>
     84e:	8a e6       	ldi	r24, 0x6A	; 106
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	0b d7       	rcall	.+3606   	; 0x166a <uart_puts>
	_delay_ms(200); // wait for >
	uart_puts("GET /update?key=");
     854:	8b e7       	ldi	r24, 0x7B	; 123
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	08 d7       	rcall	.+3600   	; 0x166a <uart_puts>
     85a:	ce 01       	movw	r24, r28
	uart_puts(THINGSPEAK_KEY);
     85c:	01 96       	adiw	r24, 0x01	; 1
     85e:	05 d7       	rcall	.+3594   	; 0x166a <uart_puts>
     860:	84 e8       	ldi	r24, 0x84	; 132
     862:	91 e0       	ldi	r25, 0x01	; 1
	uart_puts("&field1=");
     864:	02 d7       	rcall	.+3588   	; 0x166a <uart_puts>
     866:	6c 96       	adiw	r28, 0x1c	; 28
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	f8 94       	cli
	uart_puts(temperatureString);
     86c:	de bf       	out	0x3e, r29	; 62
     86e:	0f be       	out	0x3f, r0	; 63
     870:	cd bf       	out	0x3d, r28	; 61
     872:	df 91       	pop	r29
	uart_puts("&field2=4\n");
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	ff 90       	pop	r15

	//_delay_ms(10000); // wait for OK Unlink	
}
     87c:	ef 90       	pop	r14
     87e:	08 95       	ret

00000880 <SendSample>:
     880:	10 92 f6 01 	sts	0x01F6, r1
     884:	87 e0       	ldi	r24, 0x07	; 7
     886:	80 93 e7 01 	sts	0x01E7, r24
     88a:	80 91 ef 01 	lds	r24, 0x01EF
     88e:	90 91 f0 01 	lds	r25, 0x01F0
     892:	90 93 1b 02 	sts	0x021B, r25
{
	// send data to usb instead of EEPROM
	_sendSampleFlag = 0;
	_usbArg0 = DATA_SAMPLE;
	_usbArg1 = _temperature / 256;
	_usbArg2 = _temperature % 256;
     896:	80 93 fa 01 	sts	0x01FA, r24
	_usbArg3 = _usbBubbleCount / 256;
     89a:	80 91 fd 01 	lds	r24, 0x01FD
     89e:	90 91 fe 01 	lds	r25, 0x01FE
     8a2:	90 93 03 02 	sts	0x0203, r25
	_usbArg4 = _usbBubbleCount % 256;
     8a6:	80 93 ed 01 	sts	0x01ED, r24
	_usbArg5 = _bubbleOccurring;
     8aa:	80 91 07 02 	lds	r24, 0x0207
     8ae:	80 93 e0 01 	sts	0x01E0, r24
	_usbArg6 = _adcValue;
     8b2:	80 91 f9 01 	lds	r24, 0x01F9
     8b6:	80 93 01 02 	sts	0x0201, r24
	_dataReady = 1; // send data back to usb host
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	80 93 fb 01 	sts	0x01FB, r24
	
	// reset the bubble counter
	_usbBubbleCount = 0;
     8c0:	10 92 fe 01 	sts	0x01FE, r1
     8c4:	10 92 fd 01 	sts	0x01FD, r1
     8c8:	08 95       	ret

000008ca <CompactMemory>:
	return;
}

// take every pair of adjacent samples, write them into the first half of the memory, clear the second half of memory
void CompactMemory(void)
{	
     8ca:	2f 92       	push	r2
     8cc:	3f 92       	push	r3
     8ce:	4f 92       	push	r4
     8d0:	5f 92       	push	r5
     8d2:	6f 92       	push	r6
     8d4:	7f 92       	push	r7
     8d6:	8f 92       	push	r8
     8d8:	9f 92       	push	r9
     8da:	af 92       	push	r10
     8dc:	bf 92       	push	r11
     8de:	cf 92       	push	r12
     8e0:	df 92       	push	r13
     8e2:	ef 92       	push	r14
     8e4:	ff 92       	push	r15
     8e6:	0f 93       	push	r16
     8e8:	1f 93       	push	r17
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	cd b7       	in	r28, 0x3d	; 61
     8f0:	de b7       	in	r29, 0x3e	; 62
     8f2:	a0 97       	sbiw	r28, 0x20	; 32
     8f4:	0f b6       	in	r0, 0x3f	; 63
     8f6:	f8 94       	cli
     8f8:	de bf       	out	0x3e, r29	; 62
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	cd bf       	out	0x3d, r28	; 61
	// next recording posision will be half way through memory contents
	_nextMemoryPosition = 2048;
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	98 e0       	ldi	r25, 0x08	; 8
     902:	90 93 eb 01 	sts	0x01EB, r25
     906:	80 93 ea 01 	sts	0x01EA, r24
	
	// update the memory compacts counter	
	_compactionCount++;	
     90a:	60 91 e6 01 	lds	r22, 0x01E6
     90e:	6f 5f       	subi	r22, 0xFF	; 255
     910:	60 93 e6 01 	sts	0x01E6, r22
	eeprom_update_byte((uint8_t*)COMPACTION_COUNT, _compactionCount);
     914:	86 e0       	ldi	r24, 0x06	; 6
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__eeupd_byte_m32u4>
     91c:	41 2c       	mov	r4, r1
     91e:	51 2c       	mov	r5, r1
     920:	6e 01       	movw	r12, r28
     922:	21 e2       	ldi	r18, 0x21	; 33
     924:	c2 0e       	add	r12, r18
     926:	d1 1c       	adc	r13, r1
     928:	8e 01       	movw	r16, r28
     92a:	0f 5f       	subi	r16, 0xFF	; 255
     92c:	1f 4f       	sbci	r17, 0xFF	; 255
	return;
}

// take every pair of adjacent samples, write them into the first half of the memory, clear the second half of memory
void CompactMemory(void)
{	
     92e:	72 01       	movw	r14, r4
     930:	ee 0c       	add	r14, r14
     932:	ff 1c       	adc	r15, r15
		// 8 samples (32 bytes) will go into output page
		Sample outputSamples[8];
		for (uint8_t sampleIndex = 0; sampleIndex < 8; sampleIndex++)
		{
			// read 2 samples (8 bytes)
			Sample sample1 = LC32_ReadSample((64 * pageIndex) + (8 * sampleIndex));
     934:	c7 01       	movw	r24, r14
     936:	ab d5       	rcall	.+2902   	; 0x148e <LC32_ReadSample>
     938:	4b 01       	movw	r8, r22
     93a:	5c 01       	movw	r10, r24
     93c:	c7 01       	movw	r24, r14
			Sample sample2 = LC32_ReadSample((64 * pageIndex) + (8 * sampleIndex) + 4);
     93e:	04 96       	adiw	r24, 0x04	; 4
     940:	a6 d5       	rcall	.+2892   	; 0x148e <LC32_ReadSample>
     942:	fc 01       	movw	r30, r24
     944:	81 14       	cp	r8, r1
     946:	91 04       	cpc	r9, r1
			
			if((sample1.temperature == 0x0000 && sample1.bubbles == 0xFFFF) || (sample2.temperature == 0x0000 && sample2.bubbles == 0xFFFF))
     948:	21 f4       	brne	.+8      	; 0x952 <CompactMemory+0x88>
     94a:	2f ef       	ldi	r18, 0xFF	; 255
     94c:	a2 16       	cp	r10, r18
     94e:	b2 06       	cpc	r11, r18
     950:	21 f0       	breq	.+8      	; 0x95a <CompactMemory+0x90>
     952:	67 2b       	or	r22, r23
     954:	41 f4       	brne	.+16     	; 0x966 <CompactMemory+0x9c>
     956:	31 96       	adiw	r30, 0x01	; 1
     958:	31 f4       	brne	.+12     	; 0x966 <CompactMemory+0x9c>
     95a:	f8 01       	movw	r30, r16
     95c:	11 82       	std	Z+1, r1	; 0x01
			{
				// keep stop/start marker
				outputSamples[sampleIndex].temperature = 0x0000;
     95e:	10 82       	st	Z, r1
     960:	8f ef       	ldi	r24, 0xFF	; 255
     962:	9f ef       	ldi	r25, 0xFF	; 255
				outputSamples[sampleIndex].bubbles = 0xFFFF;
     964:	05 c0       	rjmp	.+10     	; 0x970 <CompactMemory+0xa6>
     966:	f8 01       	movw	r30, r16
     968:	91 82       	std	Z+1, r9	; 0x01
			}
			else
			{
				// compact into one sample (first temp, sum bubbles)
				// we don't average the temp since it's not so easy with raw DS18B20 data
				outputSamples[sampleIndex].temperature = sample1.temperature;
     96a:	80 82       	st	Z, r8
     96c:	8a 0d       	add	r24, r10
     96e:	9b 1d       	adc	r25, r11
				outputSamples[sampleIndex].bubbles = sample1.bubbles + sample2.bubbles;
     970:	93 83       	std	Z+3, r25	; 0x03
     972:	82 83       	std	Z+2, r24	; 0x02
     974:	f8 e0       	ldi	r31, 0x08	; 8
     976:	ef 0e       	add	r14, r31
     978:	f1 1c       	adc	r15, r1
     97a:	0c 5f       	subi	r16, 0xFC	; 252
     97c:	1f 4f       	sbci	r17, 0xFF	; 255
     97e:	0c 15       	cp	r16, r12
     980:	1d 05       	cpc	r17, r13
	// and avoid unnecessary EEPROM wear
	for(uint8_t pageIndex = 0; pageIndex < 64; pageIndex++)
	{
		// 8 samples (32 bytes) will go into output page
		Sample outputSamples[8];
		for (uint8_t sampleIndex = 0; sampleIndex < 8; sampleIndex++)
     982:	c1 f6       	brne	.-80     	; 0x934 <CompactMemory+0x6a>
     984:	be 01       	movw	r22, r28
     986:	6f 5f       	subi	r22, 0xFF	; 255
				outputSamples[sampleIndex].bubbles = sample1.bubbles + sample2.bubbles;
			}
		}
		
		// write whole page (32 bytes) of output data
		LC32_WritePage((32 * pageIndex), outputSamples);
     988:	7f 4f       	sbci	r23, 0xFF	; 255
     98a:	c2 01       	movw	r24, r4
     98c:	af d5       	rcall	.+2910   	; 0x14ec <LC32_WritePage>
     98e:	20 e2       	ldi	r18, 0x20	; 32
     990:	42 0e       	add	r4, r18
     992:	51 1c       	adc	r5, r1
     994:	41 14       	cp	r4, r1
     996:	88 e0       	ldi	r24, 0x08	; 8
     998:	58 06       	cpc	r5, r24
	eeprom_update_byte((uint8_t*)COMPACTION_COUNT, _compactionCount);
	
	// move the data around. (write 64 pages with 8 samples each)
	// by writing a whole page at a time we improve performance 
	// and avoid unnecessary EEPROM wear
	for(uint8_t pageIndex = 0; pageIndex < 64; pageIndex++)
     99a:	31 f6       	brne	.-116    	; 0x928 <CompactMemory+0x5e>
     99c:	fe 01       	movw	r30, r28
     99e:	31 96       	adiw	r30, 0x01	; 1
     9a0:	8f ef       	ldi	r24, 0xFF	; 255
     9a2:	9f ef       	ldi	r25, 0xFF	; 255
     9a4:	91 83       	std	Z+1, r25	; 0x01
	
	// clear the second half of the memory space now that it is no longer needed
	Sample blankSamples[8];
	for(uint8_t i = 0; i < 8; i++)
	{
		blankSamples[i].temperature = 0xFFFF;
     9a6:	80 83       	st	Z, r24
     9a8:	93 83       	std	Z+3, r25	; 0x03
     9aa:	82 83       	std	Z+2, r24	; 0x02
     9ac:	34 96       	adiw	r30, 0x04	; 4
		blankSamples[i].bubbles = 0xFFFF;
     9ae:	ec 15       	cp	r30, r12
     9b0:	fd 05       	cpc	r31, r13
     9b2:	c1 f7       	brne	.-16     	; 0x9a4 <CompactMemory+0xda>
		LC32_WritePage((32 * pageIndex), outputSamples);
	}
	
	// clear the second half of the memory space now that it is no longer needed
	Sample blankSamples[8];
	for(uint8_t i = 0; i < 8; i++)
     9b4:	00 e0       	ldi	r16, 0x00	; 0
     9b6:	18 e0       	ldi	r17, 0x08	; 8
     9b8:	be 01       	movw	r22, r28
     9ba:	6f 5f       	subi	r22, 0xFF	; 255
     9bc:	7f 4f       	sbci	r23, 0xFF	; 255
		blankSamples[i].temperature = 0xFFFF;
		blankSamples[i].bubbles = 0xFFFF;
	}
	for(uint8_t i = 64; i < 128; i++)
	{
		LC32_WritePage((32 * i), blankSamples);
     9be:	c8 01       	movw	r24, r16
     9c0:	95 d5       	rcall	.+2858   	; 0x14ec <LC32_WritePage>
     9c2:	00 5e       	subi	r16, 0xE0	; 224
     9c4:	1f 4f       	sbci	r17, 0xFF	; 255
     9c6:	01 15       	cp	r16, r1
     9c8:	90 e1       	ldi	r25, 0x10	; 16
     9ca:	19 07       	cpc	r17, r25
     9cc:	a9 f7       	brne	.-22     	; 0x9b8 <CompactMemory+0xee>
	for(uint8_t i = 0; i < 8; i++)
	{
		blankSamples[i].temperature = 0xFFFF;
		blankSamples[i].bubbles = 0xFFFF;
	}
	for(uint8_t i = 64; i < 128; i++)
     9ce:	a0 96       	adiw	r28, 0x20	; 32
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	de bf       	out	0x3e, r29	; 62
	{
		LC32_WritePage((32 * i), blankSamples);
	}
}
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	cd bf       	out	0x3d, r28	; 61
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	ff 90       	pop	r15
     9e4:	ef 90       	pop	r14
     9e6:	df 90       	pop	r13
     9e8:	cf 90       	pop	r12
     9ea:	bf 90       	pop	r11
     9ec:	af 90       	pop	r10
     9ee:	9f 90       	pop	r9
     9f0:	8f 90       	pop	r8
     9f2:	7f 90       	pop	r7
     9f4:	6f 90       	pop	r6
     9f6:	5f 90       	pop	r5
     9f8:	4f 90       	pop	r4
     9fa:	3f 90       	pop	r3
     9fc:	2f 90       	pop	r2
     9fe:	08 95       	ret

00000a00 <RecordSample>:
     a00:	8f 92       	push	r8
     a02:	9f 92       	push	r9
     a04:	af 92       	push	r10
     a06:	bf 92       	push	r11
	_measureTempFlag = 1;
}

// store current values into next available EEPROM location
void RecordSample(void)
{	
     a08:	cf 92       	push	r12
     a0a:	df 92       	push	r13
     a0c:	ef 92       	push	r14
     a0e:	ff 92       	push	r15
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
	// flash the recording led, turn it off later
	output_high(RECORD_LED_PORT, RECORD_LED_PIN);
     a14:	2d 9a       	sbi	0x05, 5	; 5
	TIMSK0 |= (1 << OCIE0A);
     a16:	80 91 6e 00 	lds	r24, 0x006E
     a1a:	82 60       	ori	r24, 0x02	; 2
     a1c:	80 93 6e 00 	sts	0x006E, r24
	
	_recordSampleFlag = 0;
     a20:	10 92 06 02 	sts	0x0206, r1
	
	// handle uploading data
	_secondsCounter++;
     a24:	80 91 05 02 	lds	r24, 0x0205
     a28:	8f 5f       	subi	r24, 0xFF	; 255
     a2a:	80 93 05 02 	sts	0x0205, r24
	if(_secondsCounter == UPLOAD_INTERVAL) {
     a2e:	8f 30       	cpi	r24, 0x0F	; 15
     a30:	19 f4       	brne	.+6      	; 0xa38 <RecordSample+0x38>
		_secondsCounter = 0;
     a32:	10 92 05 02 	sts	0x0205, r1
		UploadSample();
     a36:	9d de       	rcall	.-710    	; 0x772 <UploadSample>
     a38:	c0 91 f4 01 	lds	r28, 0x01F4
	}
	
	// only store when divisor counter = (2 ^ compactions) - 1	
	if(_divisorCounter < pow(2, _compactionCount) - 1)
     a3c:	d0 91 f5 01 	lds	r29, 0x01F5
     a40:	60 91 e6 01 	lds	r22, 0x01E6
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
     a4e:	9b 01       	movw	r18, r22
     a50:	ac 01       	movw	r20, r24
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	90 e4       	ldi	r25, 0x40	; 64
     a5a:	0e 94 4b 13 	call	0x2696	; 0x2696 <pow>
     a5e:	4b 01       	movw	r8, r22
     a60:	5c 01       	movw	r10, r24
     a62:	be 01       	movw	r22, r28
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
     a6c:	6b 01       	movw	r12, r22
     a6e:	7c 01       	movw	r14, r24
     a70:	20 e0       	ldi	r18, 0x00	; 0
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	40 e8       	ldi	r20, 0x80	; 128
     a76:	5f e3       	ldi	r21, 0x3F	; 63
     a78:	c5 01       	movw	r24, r10
     a7a:	b4 01       	movw	r22, r8
     a7c:	0e 94 cd 11 	call	0x239a	; 0x239a <__subsf3>
     a80:	9b 01       	movw	r18, r22
     a82:	ac 01       	movw	r20, r24
     a84:	c7 01       	movw	r24, r14
     a86:	b6 01       	movw	r22, r12
     a88:	0e 94 32 12 	call	0x2464	; 0x2464 <__cmpsf2>
     a8c:	87 ff       	sbrs	r24, 7
     a8e:	06 c0       	rjmp	.+12     	; 0xa9c <RecordSample+0x9c>
     a90:	21 96       	adiw	r28, 0x01	; 1
	{
		_divisorCounter++;
     a92:	d0 93 f5 01 	sts	0x01F5, r29
     a96:	c0 93 f4 01 	sts	0x01F4, r28
     a9a:	2c c0       	rjmp	.+88     	; 0xaf4 <RecordSample+0xf4>
     a9c:	10 92 f5 01 	sts	0x01F5, r1
		return;
	}
	_divisorCounter = 0;
     aa0:	10 92 f4 01 	sts	0x01F4, r1
     aa4:	40 91 ef 01 	lds	r20, 0x01EF
	
	// write new sample to eeprom
	Sample sample = {_temperature, _recordBubbleCount};
     aa8:	50 91 f0 01 	lds	r21, 0x01F0
     aac:	60 91 e4 01 	lds	r22, 0x01E4
     ab0:	70 91 e5 01 	lds	r23, 0x01E5
     ab4:	80 91 ea 01 	lds	r24, 0x01EA
	LC32_WriteSample(_nextMemoryPosition, sample);
     ab8:	90 91 eb 01 	lds	r25, 0x01EB
     abc:	be d4       	rcall	.+2428   	; 0x143a <LC32_WriteSample>
     abe:	80 91 ea 01 	lds	r24, 0x01EA
	_nextMemoryPosition += 4;
     ac2:	90 91 eb 01 	lds	r25, 0x01EB
     ac6:	04 96       	adiw	r24, 0x04	; 4
     ac8:	90 93 eb 01 	sts	0x01EB, r25
     acc:	80 93 ea 01 	sts	0x01EA, r24
     ad0:	10 92 e5 01 	sts	0x01E5, r1
	
	// reset the bubble counter
	_recordBubbleCount = 0;
     ad4:	10 92 e4 01 	sts	0x01E4, r1
     ad8:	81 15       	cp	r24, r1
     ada:	90 41       	sbci	r25, 0x10	; 16
	
	if(_nextMemoryPosition == 4096)
     adc:	59 f4       	brne	.+22     	; 0xaf4 <RecordSample+0xf4>
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
		CompactMemory();
}
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	cf 90       	pop	r12
     aea:	bf 90       	pop	r11
     aec:	af 90       	pop	r10
     aee:	9f 90       	pop	r9
     af0:	8f 90       	pop	r8
     af2:	eb ce       	rjmp	.-554    	; 0x8ca <CompactMemory>
     af4:	df 91       	pop	r29
	
	// reset the bubble counter
	_recordBubbleCount = 0;
	
	if(_nextMemoryPosition == 4096)
		CompactMemory();
     af6:	cf 91       	pop	r28
     af8:	ff 90       	pop	r15
}
     afa:	ef 90       	pop	r14
     afc:	df 90       	pop	r13
     afe:	cf 90       	pop	r12
     b00:	bf 90       	pop	r11
     b02:	af 90       	pop	r10
     b04:	9f 90       	pop	r9
     b06:	8f 90       	pop	r8
     b08:	08 95       	ret

00000b0a <main>:
     b0a:	2d 9a       	sbi	0x05, 5	; 5
     b0c:	2c 9a       	sbi	0x05, 4	; 5
     b0e:	21 dc       	rcall	.-1982   	; 0x352 <SetupHardware>
// main program entry point
int main(void)
{
	output_high(RECORD_LED_PORT, RECORD_LED_PIN);
	output_high(BUBBLE_LED_PORT, BUBBLE_LED_PIN);
	SetupHardware();
     b10:	2f ef       	ldi	r18, 0xFF	; 255
     b12:	83 ec       	ldi	r24, 0xC3	; 195
     b14:	99 e0       	ldi	r25, 0x09	; 9
     b16:	21 50       	subi	r18, 0x01	; 1
     b18:	80 40       	sbci	r24, 0x00	; 0
     b1a:	90 40       	sbci	r25, 0x00	; 0
     b1c:	e1 f7       	brne	.-8      	; 0xb16 <main+0xc>
     b1e:	00 c0       	rjmp	.+0      	; 0xb20 <main+0x16>
     b20:	00 00       	nop
     b22:	7a dd       	rcall	.-1292   	; 0x618 <LoadSettings>
	_delay_ms(200); // make sure the lights flash for a while even if everything else initialises fast
	LoadSettings();
     b24:	87 e6       	ldi	r24, 0x67	; 103
     b26:	90 e0       	ldi	r25, 0x00	; 0
	uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
     b28:	72 d5       	rcall	.+2788   	; 0x160e <uart_init>
     b2a:	ad d6       	rcall	.+3418   	; 0x1886 <USB_Init>
     b2c:	66 dc       	rcall	.-1844   	; 0x3fa <SetupTimerInterrupts>
     b2e:	2d 98       	cbi	0x05, 5	; 5
	//uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
	USB_Init();
     b30:	2c 98       	cbi	0x05, 4	; 5
     b32:	80 e0       	ldi	r24, 0x00	; 0
	
	//output_high(BUBBLE_LED_PORT, BUBBLE_LED_PIN);
	//FillMemoryWithDebugData(); // this is to test the memory splitting algorithm
	//output_low(BUBBLE_LED_PORT, BUBBLE_LED_PIN);
	
	SetupTimerInterrupts();
     b34:	91 e0       	ldi	r25, 0x01	; 1
     b36:	0e 94 09 11 	call	0x2212	; 0x2212 <HID_Device_USBTask>
	output_low(RECORD_LED_PORT, RECORD_LED_PIN);
	output_low(BUBBLE_LED_PORT, BUBBLE_LED_PIN);
     b3a:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <USB_USBTask>

	for (;;)
	{
		HID_Device_USBTask(&Generic_HID_Interface);
     b3e:	80 91 06 02 	lds	r24, 0x0206
     b42:	88 23       	and	r24, r24
		USB_USBTask();
     b44:	11 f0       	breq	.+4      	; 0xb4a <main+0x40>
     b46:	5c df       	rcall	.-328    	; 0xa00 <RecordSample>
		
		if(_recordSampleFlag)
     b48:	f4 cf       	rjmp	.-24     	; 0xb32 <main+0x28>
     b4a:	80 91 f6 01 	lds	r24, 0x01F6
     b4e:	88 23       	and	r24, r24
		{
			RecordSample(); // write to eeprom
     b50:	11 f0       	breq	.+4      	; 0xb56 <main+0x4c>
     b52:	96 de       	rcall	.-724    	; 0x880 <SendSample>
     b54:	ee cf       	rjmp	.-36     	; 0xb32 <main+0x28>
		}
		else if(_sendSampleFlag)
     b56:	80 91 ec 01 	lds	r24, 0x01EC
     b5a:	88 23       	and	r24, r24
     b5c:	11 f0       	breq	.+4      	; 0xb62 <main+0x58>
		{
			SendSample(); // write to usb
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	05 c0       	rjmp	.+10     	; 0xb6c <main+0x62>
     b62:	80 91 04 02 	lds	r24, 0x0204
		}
		else if(_startRecordingFlag)
     b66:	88 23       	and	r24, r24
     b68:	19 f0       	breq	.+6      	; 0xb70 <main+0x66>
     b6a:	80 e0       	ldi	r24, 0x00	; 0
		{
			// start a new recording
			StartRecording(1);
     b6c:	df dc       	rcall	.-1602   	; 0x52c <StartRecording>
     b6e:	e1 cf       	rjmp	.-62     	; 0xb32 <main+0x28>
		}
		else if(_resumeRecordingFlag)
     b70:	80 91 02 02 	lds	r24, 0x0202
     b74:	88 23       	and	r24, r24
     b76:	11 f0       	breq	.+4      	; 0xb7c <main+0x72>
		{
			// resume recording
			StartRecording(0);
     b78:	15 dd       	rcall	.-1494   	; 0x5a4 <StopRecording>
     b7a:	db cf       	rjmp	.-74     	; 0xb32 <main+0x28>
     b7c:	80 91 1c 02 	lds	r24, 0x021C
		}
		else if(_stopRecordingFlag)
     b80:	88 23       	and	r24, r24
     b82:	61 f0       	breq	.+24     	; 0xb9c <main+0x92>
     b84:	7e d3       	rcall	.+1788   	; 0x1282 <DS18X20_read_raw_single>
     b86:	90 93 f0 01 	sts	0x01F0, r25
		{
			StopRecording();
     b8a:	80 93 ef 01 	sts	0x01EF, r24
		}
		else if(_measureTempFlag)
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	58 d3       	rcall	.+1712   	; 0x1246 <DS18X20_start_meas>
		{
			_temperature = DS18X20_read_raw_single();
     b96:	10 92 1c 02 	sts	0x021C, r1
     b9a:	cb cf       	rjmp	.-106    	; 0xb32 <main+0x28>
     b9c:	80 91 de 01 	lds	r24, 0x01DE
     ba0:	88 23       	and	r24, r24
			DS18X20_start_meas(DS18X20_POWER_EXTERN, NULL); // start next temperature conversion
     ba2:	39 f2       	breq	.-114    	; 0xb32 <main+0x28>
     ba4:	0a dd       	rcall	.-1516   	; 0x5ba <ClearExternalMemory>
     ba6:	c5 cf       	rjmp	.-118    	; 0xb32 <main+0x28>

00000ba8 <__vector_18>:
     ba8:	1f 92       	push	r1
     baa:	0f 92       	push	r0
			_measureTempFlag = 0;
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	0f 92       	push	r0
     bb0:	11 24       	eor	r1, r1
		}
		else if(_clearMemoryFlag)
     bb2:	2f 93       	push	r18
     bb4:	3f 93       	push	r19
     bb6:	8f 93       	push	r24
     bb8:	9f 93       	push	r25
		{
			ClearExternalMemory();
     bba:	80 91 8a 00 	lds	r24, 0x008A
     bbe:	90 91 8b 00 	lds	r25, 0x008B
}

// This interrupt occurs 25 times per second 15625
ISR(TIMER1_COMPB_vect)
{
	OCR1B += 138; // 138 = 25 times per second 276 = 12.5 times
     bc2:	86 57       	subi	r24, 0x76	; 118
     bc4:	9f 4f       	sbci	r25, 0xFF	; 255
     bc6:	90 93 8b 00 	sts	0x008B, r25
     bca:	80 93 8a 00 	sts	0x008A, r24
	_adcValue = ADCH; // store ADC value
     bce:	80 91 79 00 	lds	r24, 0x0079
     bd2:	80 93 f9 01 	sts	0x01F9, r24
	ADCSRA |= (1 << ADSC); // initiate next ADC
     bd6:	80 91 7a 00 	lds	r24, 0x007A
     bda:	80 64       	ori	r24, 0x40	; 64
     bdc:	80 93 7a 00 	sts	0x007A, r24
	// Bubble Logic - A bubble has occurred when:
	// 1. bubble delay has passed since last bubble occurrence
	// 2. ADC sample below minThreshold has been detected, then
	// 3. ADC sample above maxThreshold has been detected, then
	// 4. ADC sample below minThreshold has been detected again
	if(_readyForBubble)
     be0:	80 91 fc 01 	lds	r24, 0x01FC
     be4:	88 23       	and	r24, r24
     be6:	09 f4       	brne	.+2      	; 0xbea <__vector_18+0x42>
     be8:	5d c0       	rjmp	.+186    	; 0xca4 <__vector_18+0xfc>
	{
		// wait for first low reading after the delay has elapsed
		if(_bubbleLow1Detected == 0 && _adcValue < _adcLowThreshold)
     bea:	80 91 e8 01 	lds	r24, 0x01E8
     bee:	81 11       	cpse	r24, r1
     bf0:	09 c0       	rjmp	.+18     	; 0xc04 <__vector_18+0x5c>
     bf2:	90 91 f9 01 	lds	r25, 0x01F9
     bf6:	80 91 08 02 	lds	r24, 0x0208
     bfa:	98 17       	cp	r25, r24
     bfc:	18 f4       	brcc	.+6      	; 0xc04 <__vector_18+0x5c>
		{
			_bubbleLow1Detected = 1;
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	80 93 e8 01 	sts	0x01E8, r24
		}
		
		// wait for first high reading after first low reading
		if(_bubbleLow1Detected && _bubbleHighDetected == 0 && _adcValue > _adcHighThreshold)
     c04:	80 91 e8 01 	lds	r24, 0x01E8
     c08:	88 23       	and	r24, r24
     c0a:	09 f4       	brne	.+2      	; 0xc0e <__vector_18+0x66>
     c0c:	4b c0       	rjmp	.+150    	; 0xca4 <__vector_18+0xfc>
     c0e:	80 91 e9 01 	lds	r24, 0x01E9
     c12:	81 11       	cpse	r24, r1
     c14:	09 c0       	rjmp	.+18     	; 0xc28 <__vector_18+0x80>
     c16:	90 91 f9 01 	lds	r25, 0x01F9
     c1a:	80 91 f7 01 	lds	r24, 0x01F7
     c1e:	89 17       	cp	r24, r25
     c20:	18 f4       	brcc	.+6      	; 0xc28 <__vector_18+0x80>
		{
			_bubbleHighDetected = 1;
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	80 93 e9 01 	sts	0x01E9, r24
		}
		
		// wait for next low reading after the high reading
		if(_bubbleLow1Detected && _bubbleHighDetected && _bubbleLow2Detected == 0 && _adcValue < _adcLowThreshold)
     c28:	80 91 e9 01 	lds	r24, 0x01E9
     c2c:	88 23       	and	r24, r24
     c2e:	d1 f1       	breq	.+116    	; 0xca4 <__vector_18+0xfc>
     c30:	80 91 f3 01 	lds	r24, 0x01F3
     c34:	88 23       	and	r24, r24
     c36:	f1 f1       	breq	.+124    	; 0xcb4 <__vector_18+0x10c>
		{
			_bubbleLow2Detected = 1;
		}
		
		// check if bubble occurred
		if(_bubbleLow1Detected && _bubbleHighDetected && _bubbleLow2Detected)
     c38:	80 91 f3 01 	lds	r24, 0x01F3
     c3c:	88 23       	and	r24, r24
     c3e:	91 f1       	breq	.+100    	; 0xca4 <__vector_18+0xfc>
		{
			_recordBubbleCount++; // increment the bubble count
     c40:	80 91 e4 01 	lds	r24, 0x01E4
     c44:	90 91 e5 01 	lds	r25, 0x01E5
     c48:	01 96       	adiw	r24, 0x01	; 1
     c4a:	90 93 e5 01 	sts	0x01E5, r25
     c4e:	80 93 e4 01 	sts	0x01E4, r24
			_usbBubbleCount++; // increment the bubble count
     c52:	80 91 fd 01 	lds	r24, 0x01FD
     c56:	90 91 fe 01 	lds	r25, 0x01FE
     c5a:	01 96       	adiw	r24, 0x01	; 1
     c5c:	90 93 fe 01 	sts	0x01FE, r25
     c60:	80 93 fd 01 	sts	0x01FD, r24
			_bubbleLow1Detected = 0;
     c64:	10 92 e8 01 	sts	0x01E8, r1
			_bubbleHighDetected = 0;
     c68:	10 92 e9 01 	sts	0x01E9, r1
			_bubbleLow2Detected = 0;
     c6c:	10 92 f3 01 	sts	0x01F3, r1
			_readyForBubble = 0;
     c70:	10 92 fc 01 	sts	0x01FC, r1
			
			// turn on bubble LED and update bubble status flag
			output_high(BUBBLE_LED_PORT, BUBBLE_LED_PIN);
     c74:	2c 9a       	sbi	0x05, 4	; 5
			_bubbleOccurring = 1;  // 1 means bubble is occurring
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	80 93 07 02 	sts	0x0207, r24
			
			// enable oc1c interrupt which will re-enable bubble sensing later
			// set up the timer compare register
			OCR1C = TCNT1 + _bubbleDelay;
     c7c:	80 91 84 00 	lds	r24, 0x0084
     c80:	90 91 85 00 	lds	r25, 0x0085
     c84:	20 91 e1 01 	lds	r18, 0x01E1
     c88:	30 91 e2 01 	lds	r19, 0x01E2
     c8c:	82 0f       	add	r24, r18
     c8e:	93 1f       	adc	r25, r19
     c90:	90 93 8d 00 	sts	0x008D, r25
     c94:	80 93 8c 00 	sts	0x008C, r24
			// clear the interrupt that would send us straight to the TIMER1_COMPC_vect
			TIFR1 |= (1 << OCF1C);
     c98:	b3 9a       	sbi	0x16, 3	; 22
			// enable the interrupt
			TIMSK1 |= (1 << OCIE1C);
     c9a:	80 91 6f 00 	lds	r24, 0x006F
     c9e:	88 60       	ori	r24, 0x08	; 8
     ca0:	80 93 6f 00 	sts	0x006F, r24
		}
	}
	if(_fastStreaming)
     ca4:	80 91 dd 01 	lds	r24, 0x01DD
     ca8:	88 23       	and	r24, r24
     caa:	79 f0       	breq	.+30     	; 0xcca <__vector_18+0x122>
	{
		_sendSampleFlag = 1;
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	80 93 f6 01 	sts	0x01F6, r24
     cb2:	0b c0       	rjmp	.+22     	; 0xcca <__vector_18+0x122>
		{
			_bubbleHighDetected = 1;
		}
		
		// wait for next low reading after the high reading
		if(_bubbleLow1Detected && _bubbleHighDetected && _bubbleLow2Detected == 0 && _adcValue < _adcLowThreshold)
     cb4:	90 91 f9 01 	lds	r25, 0x01F9
     cb8:	80 91 08 02 	lds	r24, 0x0208
     cbc:	98 17       	cp	r25, r24
     cbe:	08 f0       	brcs	.+2      	; 0xcc2 <__vector_18+0x11a>
     cc0:	bb cf       	rjmp	.-138    	; 0xc38 <__vector_18+0x90>
		{
			_bubbleLow2Detected = 1;
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	80 93 f3 01 	sts	0x01F3, r24
     cc8:	b7 cf       	rjmp	.-146    	; 0xc38 <__vector_18+0x90>
	}
	if(_fastStreaming)
	{
		_sendSampleFlag = 1;
	}
}
     cca:	9f 91       	pop	r25
     ccc:	8f 91       	pop	r24
     cce:	3f 91       	pop	r19
     cd0:	2f 91       	pop	r18
     cd2:	0f 90       	pop	r0
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	0f 90       	pop	r0
     cd8:	1f 90       	pop	r1
     cda:	18 95       	reti

00000cdc <__vector_19>:

// This interrupt occurs "bubbledelay" after a bubble
ISR(TIMER1_COMPC_vect)
{	
     cdc:	1f 92       	push	r1
     cde:	0f 92       	push	r0
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	0f 92       	push	r0
     ce4:	11 24       	eor	r1, r1
     ce6:	8f 93       	push	r24
     ce8:	ef 93       	push	r30
     cea:	ff 93       	push	r31
	// turn off bubble LED
	output_low(BUBBLE_LED_PORT, BUBBLE_LED_PIN);
     cec:	2c 98       	cbi	0x05, 4	; 5
	
	// 0 means bubble is finished
	_bubbleOccurring = 0;
     cee:	10 92 07 02 	sts	0x0207, r1
	
	// allow sensing of next bubble
	_readyForBubble = 1;
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	80 93 fc 01 	sts	0x01FC, r24

	// disable oc1c interrupt
	TIMSK1 &= ~(1 << OCIE1C);
     cf8:	ef e6       	ldi	r30, 0x6F	; 111
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	87 7f       	andi	r24, 0xF7	; 247
     d00:	80 83       	st	Z, r24
}
     d02:	ff 91       	pop	r31
     d04:	ef 91       	pop	r30
     d06:	8f 91       	pop	r24
     d08:	0f 90       	pop	r0
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	0f 90       	pop	r0
     d0e:	1f 90       	pop	r1
     d10:	18 95       	reti

00000d12 <EVENT_USB_Device_Connect>:

// Event handler for the library USB Connection event.
void EVENT_USB_Device_Connect(void)
{
     d12:	08 95       	ret

00000d14 <EVENT_USB_Device_Disconnect>:
}

// Event handler for the library USB Disconnection event.
void EVENT_USB_Device_Disconnect(void)
{
	_fastStreaming = 0;
     d14:	10 92 dd 01 	sts	0x01DD, r1
     d18:	08 95       	ret

00000d1a <EVENT_USB_Device_ConfigurationChanged>:

// Event handler for the library USB Configuration Changed event.
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;
	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	91 e0       	ldi	r25, 0x01	; 1
     d1e:	0e 94 f6 10 	call	0x21ec	; 0x21ec <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     d22:	e2 ee       	ldi	r30, 0xE2	; 226
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	84 60       	ori	r24, 0x04	; 4
     d2a:	80 83       	st	Z, r24
     d2c:	08 95       	ret

00000d2e <EVENT_USB_Device_ControlRequest>:
}

// Event handler for the library USB Control Request reception event.
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Generic_HID_Interface);
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <HID_Device_ProcessControlRequest>

00000d36 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     d36:	80 91 0e 01 	lds	r24, 0x010E
     d3a:	90 91 0f 01 	lds	r25, 0x010F
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	29 f0       	breq	.+10     	; 0xd4c <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     d42:	01 97       	sbiw	r24, 0x01	; 1
     d44:	90 93 0f 01 	sts	0x010F, r25
     d48:	80 93 0e 01 	sts	0x010E, r24
     d4c:	08 95       	ret

00000d4e <CALLBACK_HID_Device_CreateHIDReport>:
	HID_Device_MillisecondElapsed(&Generic_HID_Interface);
}

// if _dataReady is set, sends _usbArg* values and clears _dataReady flag
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo, uint8_t* const ReportID, const uint8_t ReportType, void* ReportData, uint16_t* const ReportSize)
{
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	f9 01       	movw	r30, r18
	uint8_t* Data = (uint8_t*)ReportData;
	if(_dataReady)
     d54:	80 91 fb 01 	lds	r24, 0x01FB
     d58:	88 23       	and	r24, r24
     d5a:	09 f1       	breq	.+66     	; 0xd9e <CALLBACK_HID_Device_CreateHIDReport+0x50>
	{
		*ReportSize = GENERIC_REPORT_SIZE;
     d5c:	88 e0       	ldi	r24, 0x08	; 8
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	d8 01       	movw	r26, r16
     d62:	8d 93       	st	X+, r24
     d64:	9c 93       	st	X, r25
		Data[0] = _usbArg0;
     d66:	80 91 e7 01 	lds	r24, 0x01E7
     d6a:	80 83       	st	Z, r24
		Data[1] = _usbArg1;
     d6c:	80 91 1b 02 	lds	r24, 0x021B
     d70:	81 83       	std	Z+1, r24	; 0x01
		Data[2] = _usbArg2;
     d72:	80 91 fa 01 	lds	r24, 0x01FA
     d76:	82 83       	std	Z+2, r24	; 0x02
		Data[3] = _usbArg3;
     d78:	80 91 03 02 	lds	r24, 0x0203
     d7c:	83 83       	std	Z+3, r24	; 0x03
		Data[4] = _usbArg4;
     d7e:	80 91 ed 01 	lds	r24, 0x01ED
     d82:	84 83       	std	Z+4, r24	; 0x04
		Data[5] = _usbArg5;
     d84:	80 91 e0 01 	lds	r24, 0x01E0
     d88:	85 83       	std	Z+5, r24	; 0x05
		Data[6] = _usbArg6;
     d8a:	80 91 01 02 	lds	r24, 0x0201
     d8e:	86 83       	std	Z+6, r24	; 0x06
		Data[7] = _usbArg7;
     d90:	80 91 df 01 	lds	r24, 0x01DF
     d94:	87 83       	std	Z+7, r24	; 0x07
		_dataReady = 0;
     d96:	10 92 fb 01 	sts	0x01FB, r1
		return true;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	01 c0       	rjmp	.+2      	; 0xda0 <CALLBACK_HID_Device_CreateHIDReport+0x52>
	}
	return false;
     d9e:	80 e0       	ldi	r24, 0x00	; 0
}
     da0:	1f 91       	pop	r17
     da2:	0f 91       	pop	r16
     da4:	08 95       	ret

00000da6 <CALLBACK_HID_Device_ProcessHIDReport>:

// Stores _arg* values and starts appropriate action
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo, const uint8_t ReportID, const uint8_t ReportType, const void* ReportData, const uint16_t ReportSize)
{
     da6:	cf 93       	push	r28
     da8:	f9 01       	movw	r30, r18
	// store report data
	uint8_t* Data = (uint8_t*)ReportData;
	_usbArg0 = Data[0];
     daa:	80 81       	ld	r24, Z
     dac:	80 93 e7 01 	sts	0x01E7, r24
	_usbArg1 = Data[1];
     db0:	61 81       	ldd	r22, Z+1	; 0x01
     db2:	60 93 1b 02 	sts	0x021B, r22
	_usbArg2 = Data[2];
     db6:	92 81       	ldd	r25, Z+2	; 0x02
     db8:	90 93 fa 01 	sts	0x01FA, r25
	_usbArg3 = Data[3];
     dbc:	93 81       	ldd	r25, Z+3	; 0x03
     dbe:	90 93 03 02 	sts	0x0203, r25
	_usbArg4 = Data[4];
     dc2:	94 81       	ldd	r25, Z+4	; 0x04
     dc4:	90 93 ed 01 	sts	0x01ED, r25
	_usbArg5 = Data[5];
     dc8:	95 81       	ldd	r25, Z+5	; 0x05
     dca:	90 93 e0 01 	sts	0x01E0, r25
	_usbArg6 = Data[6];
     dce:	96 81       	ldd	r25, Z+6	; 0x06
     dd0:	90 93 01 02 	sts	0x0201, r25
	_usbArg7 = Data[7];
     dd4:	97 81       	ldd	r25, Z+7	; 0x07
     dd6:	90 93 df 01 	sts	0x01DF, r25
	
	// process instruction
	switch(_usbArg0)
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	fc 01       	movw	r30, r24
     dde:	31 97       	sbiw	r30, 0x01	; 1
     de0:	e9 30       	cpi	r30, 0x09	; 9
     de2:	f1 05       	cpc	r31, r1
     de4:	08 f0       	brcs	.+2      	; 0xde8 <CALLBACK_HID_Device_ProcessHIDReport+0x42>
     de6:	af c0       	rjmp	.+350    	; 0xf46 <CALLBACK_HID_Device_ProcessHIDReport+0x1a0>
     de8:	ea 5a       	subi	r30, 0xAA	; 170
     dea:	ff 4f       	sbci	r31, 0xFF	; 255
     dec:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__tablejump2__>
	{
		case START_FAST_STREAMING :
		{
			_fastStreaming = 1;
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	80 93 dd 01 	sts	0x01DD, r24
     df6:	a5 c0       	rjmp	.+330    	; 0xf42 <CALLBACK_HID_Device_ProcessHIDReport+0x19c>
			_dataReady = 1; // echo back the command
			break;
		}
		case STOP_FAST_STREAMING :
		{
			_fastStreaming = 0;
     df8:	10 92 dd 01 	sts	0x01DD, r1
     dfc:	a1 c0       	rjmp	.+322    	; 0xf40 <CALLBACK_HID_Device_ProcessHIDReport+0x19a>
			_dataReady = 1; // echo back the command
			break;
		}
		case CLEAR_MEMORY :
		{
			_clearMemoryFlag = 1;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	80 93 de 01 	sts	0x01DE, r24
     e04:	9e c0       	rjmp	.+316    	; 0xf42 <CALLBACK_HID_Device_ProcessHIDReport+0x19c>
			break;
		}
		case READ_MEMORY :
		{
			// flash the record led, turn it off later
			output_high(RECORD_LED_PORT, RECORD_LED_PIN);
     e06:	2d 9a       	sbi	0x05, 5	; 5
			TIMSK0 |= (1 << OCIE0A);
     e08:	80 91 6e 00 	lds	r24, 0x006E
     e0c:	82 60       	ori	r24, 0x02	; 2
     e0e:	80 93 6e 00 	sts	0x006E, r24
			uint16_t addressWord = (_usbArg1 * 256) + _usbArg2;
     e12:	80 91 1b 02 	lds	r24, 0x021B
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	98 2f       	mov	r25, r24
     e1a:	88 27       	eor	r24, r24
     e1c:	20 91 fa 01 	lds	r18, 0x01FA
			Sample sample1 = LC32_ReadSample(addressWord);
     e20:	82 0f       	add	r24, r18
     e22:	91 1d       	adc	r25, r1
     e24:	34 d3       	rcall	.+1640   	; 0x148e <LC32_ReadSample>
     e26:	70 93 03 02 	sts	0x0203, r23
			_usbArg3 = sample1.temperature / 256;
     e2a:	60 93 ed 01 	sts	0x01ED, r22
			_usbArg4 = sample1.temperature % 256;
     e2e:	90 93 e0 01 	sts	0x01E0, r25
			_usbArg5 = sample1.bubbles / 256;
     e32:	80 93 01 02 	sts	0x0201, r24
			_usbArg6 = sample1.bubbles % 256;
     e36:	84 c0       	rjmp	.+264    	; 0xf40 <CALLBACK_HID_Device_ProcessHIDReport+0x19a>
     e38:	c0 91 dd 01 	lds	r28, 0x01DD
			_dataReady = 1; // send back response
			break;
		}
		case SET_CONFIG :
		{
			uint8_t previouslyStreaming = _fastStreaming;
     e3c:	10 92 dd 01 	sts	0x01DD, r1
			_fastStreaming = 0; // stop fast streaming
     e40:	8a e0       	ldi	r24, 0x0A	; 10
			eeprom_update_byte((uint8_t*)ADC_HIGH_VALUE, _usbArg1);
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__eeupd_byte_m32u4>
     e48:	80 91 1b 02 	lds	r24, 0x021B
			_adcHighThreshold = _usbArg1;
     e4c:	80 93 f7 01 	sts	0x01F7, r24
     e50:	60 91 fa 01 	lds	r22, 0x01FA
			eeprom_update_byte((uint8_t*)ADC_LOW_VALUE, _usbArg2);
     e54:	88 e0       	ldi	r24, 0x08	; 8
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__eeupd_byte_m32u4>
     e5c:	80 91 fa 01 	lds	r24, 0x01FA
			_adcLowThreshold = _usbArg2;
     e60:	80 93 08 02 	sts	0x0208, r24
     e64:	60 91 03 02 	lds	r22, 0x0203
			eeprom_update_byte((uint8_t*)BUBBLE_DELAY_HIGH, _usbArg3);
     e68:	8e e0       	ldi	r24, 0x0E	; 14
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__eeupd_byte_m32u4>
     e70:	80 91 03 02 	lds	r24, 0x0203
			_bubbleDelay = _usbArg3;
     e74:	10 92 e1 01 	sts	0x01E1, r1
			_bubbleDelay *= 256;
     e78:	80 93 e2 01 	sts	0x01E2, r24
     e7c:	60 91 ed 01 	lds	r22, 0x01ED
			eeprom_update_byte((uint8_t*)BUBBLE_DELAY_LOW, _usbArg4);
     e80:	8c e0       	ldi	r24, 0x0C	; 12
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__eeupd_byte_m32u4>
     e88:	20 91 ed 01 	lds	r18, 0x01ED
			_bubbleDelay += _usbArg4;
     e8c:	80 91 e1 01 	lds	r24, 0x01E1
     e90:	90 91 e2 01 	lds	r25, 0x01E2
     e94:	82 0f       	add	r24, r18
     e96:	91 1d       	adc	r25, r1
     e98:	90 93 e2 01 	sts	0x01E2, r25
     e9c:	80 93 e1 01 	sts	0x01E1, r24
     ea0:	81 e0       	ldi	r24, 0x01	; 1
			_dataReady = 1; // send back response
     ea2:	80 93 fb 01 	sts	0x01FB, r24
     ea6:	c0 93 dd 01 	sts	0x01DD, r28
			_fastStreaming = previouslyStreaming; // resume fast streaming if we were doing that
     eaa:	4d c0       	rjmp	.+154    	; 0xf46 <CALLBACK_HID_Device_ProcessHIDReport+0x1a0>
			break;
     eac:	10 92 dd 01 	sts	0x01DD, r1
		}
		case GET_CONFIG :
		{
			_fastStreaming = 0; // stop fast streaming
     eb0:	80 91 f7 01 	lds	r24, 0x01F7
			_usbArg1 = _adcHighThreshold;
     eb4:	80 93 1b 02 	sts	0x021B, r24
     eb8:	80 91 08 02 	lds	r24, 0x0208
			_usbArg2 = _adcLowThreshold;
     ebc:	80 93 fa 01 	sts	0x01FA, r24
     ec0:	80 91 e1 01 	lds	r24, 0x01E1
			_usbArg3 = (uint8_t)(_bubbleDelay / 256);
     ec4:	90 91 e2 01 	lds	r25, 0x01E2
     ec8:	90 93 03 02 	sts	0x0203, r25
     ecc:	80 93 ed 01 	sts	0x01ED, r24
			_usbArg4 = (uint8_t)(_bubbleDelay % 256);
     ed0:	80 91 e6 01 	lds	r24, 0x01E6
			_usbArg5 = _compactionCount;
     ed4:	80 93 e0 01 	sts	0x01E0, r24
     ed8:	80 91 ea 01 	lds	r24, 0x01EA
			_usbArg6 = (uint8_t)(_nextMemoryPosition / 256);
     edc:	90 91 eb 01 	lds	r25, 0x01EB
     ee0:	90 93 01 02 	sts	0x0201, r25
     ee4:	2b c0       	rjmp	.+86     	; 0xf3c <CALLBACK_HID_Device_ProcessHIDReport+0x196>
     ee6:	91 e0       	ldi	r25, 0x01	; 1
			_dataReady = 1; // send back response
			break;
		}
		case GET_VERSION :
		{
			_usbArg1 = VERSION_MAJOR;
     ee8:	90 93 1b 02 	sts	0x021B, r25
     eec:	84 e0       	ldi	r24, 0x04	; 4
			_usbArg2 = VERSION_MINOR;
     eee:	80 93 fa 01 	sts	0x01FA, r24
     ef2:	83 e6       	ldi	r24, 0x63	; 99
			_usbArg3 = 99;
     ef4:	80 93 03 02 	sts	0x0203, r24
     ef8:	80 93 ed 01 	sts	0x01ED, r24
			_usbArg4 = 99;
     efc:	80 93 e0 01 	sts	0x01E0, r24
			_usbArg5 = 99;
     f00:	80 93 01 02 	sts	0x0201, r24
			_usbArg6 = 99;
     f04:	80 93 df 01 	sts	0x01DF, r24
			_usbArg7 = 99;
     f08:	90 93 fb 01 	sts	0x01FB, r25
			_dataReady = 1; // send back response
     f0c:	1c c0       	rjmp	.+56     	; 0xf46 <CALLBACK_HID_Device_ProcessHIDReport+0x1a0>
			break;
     f0e:	80 91 e6 01 	lds	r24, 0x01E6
		}
		case DEBUG_VARIABLES :
		{
			_usbArg1 = _compactionCount;
     f12:	80 93 1b 02 	sts	0x021B, r24
     f16:	80 91 f4 01 	lds	r24, 0x01F4
			_usbArg2 = _divisorCounter / 256;
     f1a:	90 91 f5 01 	lds	r25, 0x01F5
     f1e:	90 93 fa 01 	sts	0x01FA, r25
     f22:	80 93 03 02 	sts	0x0203, r24
			_usbArg3 = _divisorCounter % 256;
     f26:	80 91 ea 01 	lds	r24, 0x01EA
			_usbArg4 = _nextMemoryPosition / 256;
     f2a:	90 91 eb 01 	lds	r25, 0x01EB
     f2e:	90 93 ed 01 	sts	0x01ED, r25
     f32:	80 93 e0 01 	sts	0x01E0, r24
			_usbArg5 = _nextMemoryPosition % 256;
     f36:	83 e6       	ldi	r24, 0x63	; 99
			_usbArg6 = 99;
     f38:	80 93 01 02 	sts	0x0201, r24
     f3c:	80 93 df 01 	sts	0x01DF, r24
			_usbArg7 = 99;
     f40:	81 e0       	ldi	r24, 0x01	; 1
			_dataReady = 1; // send back response
     f42:	80 93 fb 01 	sts	0x01FB, r24
     f46:	cf 91       	pop	r28
			break;
		}
	}
}
     f48:	08 95       	ret

00000f4a <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     f4a:	29 2f       	mov	r18, r25
     f4c:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     f4e:	23 30       	cpi	r18, 0x03	; 3
     f50:	31 05       	cpc	r19, r1
     f52:	b9 f0       	breq	.+46     	; 0xf82 <CALLBACK_USB_GetDescriptor+0x38>
     f54:	5c f4       	brge	.+22     	; 0xf6c <CALLBACK_USB_GetDescriptor+0x22>
     f56:	21 30       	cpi	r18, 0x01	; 1
     f58:	31 05       	cpc	r19, r1
     f5a:	69 f1       	breq	.+90     	; 0xfb6 <CALLBACK_USB_GetDescriptor+0x6c>
     f5c:	22 30       	cpi	r18, 0x02	; 2
     f5e:	31 05       	cpc	r19, r1
     f60:	79 f5       	brne	.+94     	; 0xfc0 <CALLBACK_USB_GetDescriptor+0x76>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     f62:	82 e2       	ldi	r24, 0x22	; 34
     f64:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     f66:	2e e9       	ldi	r18, 0x9E	; 158
     f68:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     f6a:	2e c0       	rjmp	.+92     	; 0xfc8 <CALLBACK_USB_GetDescriptor+0x7e>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     f6c:	21 32       	cpi	r18, 0x21	; 33
     f6e:	31 05       	cpc	r19, r1
     f70:	e9 f0       	breq	.+58     	; 0xfac <CALLBACK_USB_GetDescriptor+0x62>
     f72:	22 32       	cpi	r18, 0x22	; 34
     f74:	31 05       	cpc	r19, r1
     f76:	21 f5       	brne	.+72     	; 0xfc0 <CALLBACK_USB_GetDescriptor+0x76>
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
     f78:	80 e2       	ldi	r24, 0x20	; 32
     f7a:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
     f7c:	22 ed       	ldi	r18, 0xD2	; 210
     f7e:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(GenericReport);
			break;
     f80:	23 c0       	rjmp	.+70     	; 0xfc8 <CALLBACK_USB_GetDescriptor+0x7e>
     f82:	99 27       	eor	r25, r25
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	91 05       	cpc	r25, r1
     f88:	41 f0       	breq	.+16     	; 0xf9a <CALLBACK_USB_GetDescriptor+0x50>
     f8a:	82 30       	cpi	r24, 0x02	; 2
     f8c:	91 05       	cpc	r25, r1
     f8e:	41 f0       	breq	.+16     	; 0xfa0 <CALLBACK_USB_GetDescriptor+0x56>
     f90:	89 2b       	or	r24, r25
     f92:	b1 f4       	brne	.+44     	; 0xfc0 <CALLBACK_USB_GetDescriptor+0x76>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     f94:	ea e9       	ldi	r30, 0x9A	; 154
     f96:	f1 e0       	ldi	r31, 0x01	; 1
     f98:	05 c0       	rjmp	.+10     	; 0xfa4 <CALLBACK_USB_GetDescriptor+0x5a>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     f9a:	e6 e7       	ldi	r30, 0x76	; 118
     f9c:	f1 e0       	ldi	r31, 0x01	; 1
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <CALLBACK_USB_GetDescriptor+0x5a>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     fa0:	e4 e5       	ldi	r30, 0x54	; 84
     fa2:	f1 e0       	ldi	r31, 0x01	; 1
     fa4:	84 91       	lpm	r24, Z
     fa6:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
     fa8:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     faa:	0e c0       	rjmp	.+28     	; 0xfc8 <CALLBACK_USB_GetDescriptor+0x7e>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     fac:	89 e0       	ldi	r24, 0x09	; 9
     fae:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
     fb0:	20 eb       	ldi	r18, 0xB0	; 176
     fb2:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     fb4:	09 c0       	rjmp	.+18     	; 0xfc8 <CALLBACK_USB_GetDescriptor+0x7e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     fb6:	82 e1       	ldi	r24, 0x12	; 18
     fb8:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     fba:	20 ec       	ldi	r18, 0xC0	; 192
     fbc:	31 e0       	ldi	r19, 0x01	; 1
     fbe:	04 c0       	rjmp	.+8      	; 0xfc8 <CALLBACK_USB_GetDescriptor+0x7e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
     fc8:	fa 01       	movw	r30, r20
     fca:	31 83       	std	Z+1, r19	; 0x01
     fcc:	20 83       	st	Z, r18
	return Size;
}
     fce:	08 95       	ret

00000fd0 <ow_input_pin_state>:

#endif

uint8_t ow_input_pin_state()
{
	return OW_GET_IN();
     fd0:	e0 91 20 02 	lds	r30, 0x0220
     fd4:	f0 91 21 02 	lds	r31, 0x0221
     fd8:	90 81       	ld	r25, Z
     fda:	80 91 1f 02 	lds	r24, 0x021F
}
     fde:	89 23       	and	r24, r25
     fe0:	08 95       	ret

00000fe2 <ow_parasite_enable>:

void ow_parasite_enable(void)
{
	OW_OUT_HIGH();
     fe2:	e0 91 1d 02 	lds	r30, 0x021D
     fe6:	f0 91 1e 02 	lds	r31, 0x021E
     fea:	80 81       	ld	r24, Z
     fec:	90 91 1f 02 	lds	r25, 0x021F
     ff0:	89 2b       	or	r24, r25
     ff2:	80 83       	st	Z, r24
	OW_DIR_OUT();
     ff4:	e0 91 22 02 	lds	r30, 0x0222
     ff8:	f0 91 23 02 	lds	r31, 0x0223
     ffc:	80 81       	ld	r24, Z
     ffe:	90 91 1f 02 	lds	r25, 0x021F
    1002:	89 2b       	or	r24, r25
    1004:	80 83       	st	Z, r24
    1006:	08 95       	ret

00001008 <ow_bit_io_intern>:
   cycles than the constant ones so the delays had to be shortened 
   to achive a 15uS overall delay 
   Setting/clearing a bit in I/O Register needs 1 cyle in OW_ONE_BUS
   but around 14 cyles in configureable bus (us-Delay is 4 cyles per uS) */
static uint8_t ow_bit_io_intern( uint8_t b, uint8_t with_parasite_enable )
{
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	1f 92       	push	r1
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1014:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1016:	f8 94       	cli
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_LOW();
#endif
		OW_DIR_OUT();    // drive bus low
    1018:	e0 91 22 02 	lds	r30, 0x0222
    101c:	f0 91 23 02 	lds	r31, 0x0223
    1020:	90 81       	ld	r25, Z
    1022:	20 91 1f 02 	lds	r18, 0x021F
    1026:	92 2b       	or	r25, r18
    1028:	90 83       	st	Z, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    102a:	9a e0       	ldi	r25, 0x0A	; 10
    102c:	9a 95       	dec	r25
    102e:	f1 f7       	brne	.-4      	; 0x102c <ow_bit_io_intern+0x24>
    1030:	00 c0       	rjmp	.+0      	; 0x1032 <ow_bit_io_intern+0x2a>
		_delay_us(2);    // T_INT > 1usec accoding to timing-diagramm
		if ( b ) {
    1032:	88 23       	and	r24, r24
    1034:	51 f0       	breq	.+20     	; 0x104a <ow_bit_io_intern+0x42>
			OW_DIR_IN(); // to write "1" release bus, resistor pulls high
    1036:	e0 91 22 02 	lds	r30, 0x0222
    103a:	f0 91 23 02 	lds	r31, 0x0223
    103e:	20 81       	ld	r18, Z
    1040:	90 91 1f 02 	lds	r25, 0x021F
    1044:	90 95       	com	r25
    1046:	92 23       	and	r25, r18
    1048:	90 83       	st	Z, r25
    104a:	e5 e4       	ldi	r30, 0x45	; 69
    104c:	ea 95       	dec	r30
    104e:	f1 f7       	brne	.-4      	; 0x104c <ow_bit_io_intern+0x44>
    1050:	00 00       	nop
		// edge that initiated the read time slot. Therefore, the master must 
		// release the bus and then sample the bus state within 15ussec from 
		// the start of the slot."
		_delay_us(15-2-OW_CONF_DELAYOFFSET);
		
		if( OW_GET_IN() == 0 ) {
    1052:	e0 91 20 02 	lds	r30, 0x0220
    1056:	f0 91 21 02 	lds	r31, 0x0221
    105a:	90 81       	ld	r25, Z
    105c:	20 91 1f 02 	lds	r18, 0x021F
    1060:	92 23       	and	r25, r18
    1062:	09 f4       	brne	.+2      	; 0x1066 <ow_bit_io_intern+0x5e>
			b = 0;  // sample at end of read-timeslot
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	f5 ee       	ldi	r31, 0xE5	; 229
    1068:	fa 95       	dec	r31
    106a:	f1 f7       	brne	.-4      	; 0x1068 <ow_bit_io_intern+0x60>
    106c:	00 00       	nop
	
		_delay_us(60-15-2+OW_CONF_DELAYOFFSET);
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
#endif
		OW_DIR_IN();
    106e:	e0 91 22 02 	lds	r30, 0x0222
    1072:	f0 91 23 02 	lds	r31, 0x0223
    1076:	20 81       	ld	r18, Z
    1078:	90 91 1f 02 	lds	r25, 0x021F
    107c:	90 95       	com	r25
    107e:	92 23       	and	r25, r18
    1080:	90 83       	st	Z, r25
	
		if ( with_parasite_enable ) {
    1082:	66 23       	and	r22, r22
    1084:	19 f0       	breq	.+6      	; 0x108c <ow_bit_io_intern+0x84>
			ow_parasite_enable();
    1086:	89 83       	std	Y+1, r24	; 0x01
    1088:	ac df       	rcall	.-168    	; 0xfe2 <ow_parasite_enable>
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	1f bf       	out	0x3f, r17	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    108e:	9a e6       	ldi	r25, 0x6A	; 106
    1090:	9a 95       	dec	r25
    1092:	f1 f7       	brne	.-4      	; 0x1090 <ow_bit_io_intern+0x88>
    1094:	00 c0       	rjmp	.+0      	; 0x1096 <ow_bit_io_intern+0x8e>
    1096:	0f 90       	pop	r0
	} /* ATOMIC_BLOCK */

	_delay_us(OW_RECOVERY_TIME); // may be increased for longer wires

	return b;
}
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	08 95       	ret

000010a0 <ow_reset>:
    10a0:	e0 91 1d 02 	lds	r30, 0x021D

uint8_t ow_reset(void)
{
	uint8_t err;
	
	OW_OUT_LOW();
    10a4:	f0 91 1e 02 	lds	r31, 0x021E
    10a8:	90 81       	ld	r25, Z
    10aa:	80 91 1f 02 	lds	r24, 0x021F
    10ae:	80 95       	com	r24
    10b0:	89 23       	and	r24, r25
    10b2:	80 83       	st	Z, r24
	OW_DIR_OUT();            // pull OW-Pin low for 480us
    10b4:	e0 91 22 02 	lds	r30, 0x0222
    10b8:	f0 91 23 02 	lds	r31, 0x0223
    10bc:	80 81       	ld	r24, Z
    10be:	90 91 1f 02 	lds	r25, 0x021F
    10c2:	89 2b       	or	r24, r25
    10c4:	80 83       	st	Z, r24
    10c6:	8f e7       	ldi	r24, 0x7F	; 127
    10c8:	97 e0       	ldi	r25, 0x07	; 7
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	f1 f7       	brne	.-4      	; 0x10ca <ow_reset+0x2a>
    10ce:	00 c0       	rjmp	.+0      	; 0x10d0 <ow_reset+0x30>
    10d0:	00 00       	nop
	_delay_us(480);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    10d2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10d4:	f8 94       	cli
		// set Pin as input - wait for clients to pull low
		OW_DIR_IN(); // input
    10d6:	e0 91 22 02 	lds	r30, 0x0222
    10da:	f0 91 23 02 	lds	r31, 0x0223
    10de:	20 81       	ld	r18, Z
    10e0:	80 91 1f 02 	lds	r24, 0x021F
    10e4:	80 95       	com	r24
    10e6:	82 23       	and	r24, r18
    10e8:	80 83       	st	Z, r24
    10ea:	ef ef       	ldi	r30, 0xFF	; 255
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	31 97       	sbiw	r30, 0x01	; 1
    10f0:	f1 f7       	brne	.-4      	; 0x10ee <ow_reset+0x4e>
    10f2:	00 c0       	rjmp	.+0      	; 0x10f4 <ow_reset+0x54>
    10f4:	00 00       	nop
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
#endif
	
		_delay_us(64);       // was 66
		err = OW_GET_IN();   // no presence detect
    10f6:	e0 91 20 02 	lds	r30, 0x0220
    10fa:	f0 91 21 02 	lds	r31, 0x0221
    10fe:	20 81       	ld	r18, Z
    1100:	80 91 1f 02 	lds	r24, 0x021F
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1104:	9f bf       	out	0x3f, r25	; 63
    1106:	ef e7       	ldi	r30, 0x7F	; 127
    1108:	f6 e0       	ldi	r31, 0x06	; 6
    110a:	31 97       	sbiw	r30, 0x01	; 1
    110c:	f1 f7       	brne	.-4      	; 0x110a <ow_reset+0x6a>
    110e:	00 c0       	rjmp	.+0      	; 0x1110 <ow_reset+0x70>
    1110:	00 00       	nop
	}
	
	// after a delay the clients should release the line
	// and input-pin gets back to high by pull-up-resistor
	_delay_us(480 - 64);       // was 480-66
	if( OW_GET_IN() == 0 ) {
    1112:	e0 91 20 02 	lds	r30, 0x0220
    1116:	f0 91 21 02 	lds	r31, 0x0221
    111a:	90 81       	ld	r25, Z
    111c:	30 91 1f 02 	lds	r19, 0x021F
    1120:	93 23       	and	r25, r19
    1122:	11 f0       	breq	.+4      	; 0x1128 <ow_reset+0x88>
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
#endif
	
		_delay_us(64);       // was 66
		err = OW_GET_IN();   // no presence detect
    1124:	82 23       	and	r24, r18
    1126:	08 95       	ret
	
	// after a delay the clients should release the line
	// and input-pin gets back to high by pull-up-resistor
	_delay_us(480 - 64);       // was 480-66
	if( OW_GET_IN() == 0 ) {
		err = 1;             // short circuit, expected low but got high
    1128:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return err;
}
    112a:	08 95       	ret

0000112c <ow_set_bus>:
void ow_set_bus(volatile uint8_t* in,
	volatile uint8_t* out,
	volatile uint8_t* ddr,
	uint8_t pin)
{
	OW_DDR=ddr;
    112c:	50 93 23 02 	sts	0x0223, r21
    1130:	40 93 22 02 	sts	0x0222, r20
	OW_OUT=out;
    1134:	70 93 1e 02 	sts	0x021E, r23
    1138:	60 93 1d 02 	sts	0x021D, r22
	OW_IN=in;
    113c:	90 93 21 02 	sts	0x0221, r25
    1140:	80 93 20 02 	sts	0x0220, r24
	OW_PIN_MASK = (1 << pin);
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	01 c0       	rjmp	.+2      	; 0x114a <ow_set_bus+0x1e>
    1148:	88 0f       	add	r24, r24
    114a:	2a 95       	dec	r18
    114c:	ea f7       	brpl	.-6      	; 0x1148 <ow_set_bus+0x1c>
    114e:	80 93 1f 02 	sts	0x021F, r24
	ow_reset();
    1152:	a6 cf       	rjmp	.-180    	; 0x10a0 <ow_reset>

00001154 <ow_bit_io>:
    1154:	60 e0       	ldi	r22, 0x00	; 0
	return b;
}

uint8_t ow_bit_io( uint8_t b )
{
	return ow_bit_io_intern( b & 1, 0 );
    1156:	81 70       	andi	r24, 0x01	; 1
    1158:	57 cf       	rjmp	.-338    	; 0x1008 <ow_bit_io_intern>

0000115a <ow_byte_wr>:
    115a:	cf 93       	push	r28
}

uint8_t ow_byte_wr( uint8_t b )
{
    115c:	df 93       	push	r29
    115e:	c8 2f       	mov	r28, r24
    1160:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t i = 8, j;
	
	do {
		j = ow_bit_io( b & 1 );
    1162:	8c 2f       	mov	r24, r28
    1164:	81 70       	andi	r24, 0x01	; 1
    1166:	f6 df       	rcall	.-20     	; 0x1154 <ow_bit_io>
    1168:	c6 95       	lsr	r28
		b >>= 1;
    116a:	81 11       	cpse	r24, r1
		if( j ) {
    116c:	c0 68       	ori	r28, 0x80	; 128
			b |= 0x80;
    116e:	d1 50       	subi	r29, 0x01	; 1
    1170:	c1 f7       	brne	.-16     	; 0x1162 <ow_byte_wr+0x8>
		}
	} while( --i );
    1172:	8c 2f       	mov	r24, r28
	
	return b;
}
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	08 95       	ret

0000117a <ow_byte_wr_with_parasite_enable>:
    117a:	cf 93       	push	r28

uint8_t ow_byte_wr_with_parasite_enable( uint8_t b )
{
    117c:	df 93       	push	r29
    117e:	c8 2f       	mov	r28, r24
	uint8_t i = 8, j;
    1180:	d8 e0       	ldi	r29, 0x08	; 8
    1182:	8c 2f       	mov	r24, r28
    1184:	81 70       	andi	r24, 0x01	; 1
	
	do {
		if ( i != 1 ) {
    1186:	d1 30       	cpi	r29, 0x01	; 1
    1188:	11 f0       	breq	.+4      	; 0x118e <ow_byte_wr_with_parasite_enable+0x14>
			j = ow_bit_io_intern( b & 1, 0 );
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	01 c0       	rjmp	.+2      	; 0x1190 <ow_byte_wr_with_parasite_enable+0x16>
		} else {
			j = ow_bit_io_intern( b & 1, 1 );
    118e:	61 e0       	ldi	r22, 0x01	; 1
    1190:	3b df       	rcall	.-394    	; 0x1008 <ow_bit_io_intern>
    1192:	c6 95       	lsr	r28
		}
		b >>= 1;
    1194:	81 11       	cpse	r24, r1
		if( j ) {
    1196:	c0 68       	ori	r28, 0x80	; 128
			b |= 0x80;
    1198:	d1 50       	subi	r29, 0x01	; 1
		}
	} while( --i );
    119a:	99 f7       	brne	.-26     	; 0x1182 <ow_byte_wr_with_parasite_enable+0x8>
    119c:	8c 2f       	mov	r24, r28
	
	return b;
}
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	08 95       	ret

000011a4 <ow_command_intern>:
    11a4:	ef 92       	push	r14
	return next_diff;                   // to continue search
}


static void ow_command_intern( uint8_t command, uint8_t *id, uint8_t with_parasite_enable )
{
    11a6:	ff 92       	push	r15
    11a8:	0f 93       	push	r16
    11aa:	1f 93       	push	r17
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	f8 2e       	mov	r15, r24
    11b2:	eb 01       	movw	r28, r22
    11b4:	e4 2e       	mov	r14, r20
	uint8_t i;

	ow_reset();
    11b6:	74 df       	rcall	.-280    	; 0x10a0 <ow_reset>
    11b8:	20 97       	sbiw	r28, 0x00	; 0

	if( id ) {
    11ba:	59 f0       	breq	.+22     	; 0x11d2 <ow_command_intern+0x2e>
    11bc:	85 e5       	ldi	r24, 0x55	; 85
		ow_byte_wr( OW_MATCH_ROM );     // to a single device
    11be:	cd df       	rcall	.-102    	; 0x115a <ow_byte_wr>
    11c0:	8e 01       	movw	r16, r28
    11c2:	08 5f       	subi	r16, 0xF8	; 248
    11c4:	1f 4f       	sbci	r17, 0xFF	; 255
    11c6:	89 91       	ld	r24, Y+
    11c8:	c8 df       	rcall	.-112    	; 0x115a <ow_byte_wr>
		i = OW_ROMCODE_SIZE;
		do {
			ow_byte_wr( *id );
    11ca:	c0 17       	cp	r28, r16
    11cc:	d1 07       	cpc	r29, r17
    11ce:	d9 f7       	brne	.-10     	; 0x11c6 <ow_command_intern+0x22>
			id++;
		} while( --i );
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <ow_command_intern+0x32>
    11d2:	8c ec       	ldi	r24, 0xCC	; 204
    11d4:	c2 df       	rcall	.-124    	; 0x115a <ow_byte_wr>
    11d6:	8f 2d       	mov	r24, r15
	} 
	else {
		ow_byte_wr( OW_SKIP_ROM );      // to all devices
    11d8:	ee 20       	and	r14, r14
    11da:	39 f0       	breq	.+14     	; 0x11ea <ow_command_intern+0x46>
    11dc:	df 91       	pop	r29
	}
	
	if ( with_parasite_enable  ) {
		ow_byte_wr_with_parasite_enable( command );
    11de:	cf 91       	pop	r28
	} 
	else {
		ow_byte_wr( OW_SKIP_ROM );      // to all devices
	}
	
	if ( with_parasite_enable  ) {
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
		ow_byte_wr_with_parasite_enable( command );
	} else {
		ow_byte_wr( command );
	}
}
    11e4:	ff 90       	pop	r15
    11e6:	ef 90       	pop	r14
    11e8:	c8 cf       	rjmp	.-112    	; 0x117a <ow_byte_wr_with_parasite_enable>
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	1f 91       	pop	r17
	else {
		ow_byte_wr( OW_SKIP_ROM );      // to all devices
	}
	
	if ( with_parasite_enable  ) {
		ow_byte_wr_with_parasite_enable( command );
    11f0:	0f 91       	pop	r16
    11f2:	ff 90       	pop	r15
	} else {
		ow_byte_wr( command );
	}
}
    11f4:	ef 90       	pop	r14
    11f6:	b1 cf       	rjmp	.-158    	; 0x115a <ow_byte_wr>

000011f8 <ow_byte_rd>:
    11f8:	8f ef       	ldi	r24, 0xFF	; 255
    11fa:	af cf       	rjmp	.-162    	; 0x115a <ow_byte_wr>

000011fc <ow_command>:
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	d2 cf       	rjmp	.-92     	; 0x11a4 <ow_command_intern>

00001200 <ow_command_with_parasite_enable>:
	}
	
	if ( with_parasite_enable  ) {
		ow_byte_wr_with_parasite_enable( command );
	} else {
		ow_byte_wr( command );
    1200:	41 e0       	ldi	r20, 0x01	; 1
    1202:	d0 cf       	rjmp	.-96     	; 0x11a4 <ow_command_intern>

00001204 <read_scratchpad.constprop.0>:
uint8_t DS18X20_conversion_in_progress(void)
{
	return ow_bit_io( 1 ) ? DS18X20_CONVERSION_DONE : DS18X20_CONVERTING;
}

static uint8_t read_scratchpad( uint8_t id[], uint8_t sp[], uint8_t n )
    1204:	ff 92       	push	r15
    1206:	0f 93       	push	r16
    1208:	1f 93       	push	r17
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	06 2f       	mov	r16, r22
    1210:	f7 2e       	mov	r15, r23
{
	uint8_t i;
	uint8_t ret;

	ow_command( DS18X20_READ, id );
    1212:	bc 01       	movw	r22, r24
    1214:	8e eb       	ldi	r24, 0xBE	; 190
    1216:	f2 df       	rcall	.-28     	; 0x11fc <ow_command>
    1218:	c0 2f       	mov	r28, r16
    121a:	df 2d       	mov	r29, r15
    121c:	19 e0       	ldi	r17, 0x09	; 9
    121e:	ec df       	rcall	.-40     	; 0x11f8 <ow_byte_rd>
	for ( i = 0; i < n; i++ ) {
		sp[i] = ow_byte_rd();
    1220:	89 93       	st	Y+, r24
    1222:	11 50       	subi	r17, 0x01	; 1
    1224:	e1 f7       	brne	.-8      	; 0x121e <read_scratchpad.constprop.0+0x1a>
    1226:	69 e0       	ldi	r22, 0x09	; 9
{
	uint8_t i;
	uint8_t ret;

	ow_command( DS18X20_READ, id );
	for ( i = 0; i < n; i++ ) {
    1228:	70 e0       	ldi	r23, 0x00	; 0
		sp[i] = ow_byte_rd();
	}
	if ( crc8( &sp[0], DS18X20_SP_SIZE ) ) {
    122a:	80 2f       	mov	r24, r16
    122c:	9f 2d       	mov	r25, r15
    122e:	4e d0       	rcall	.+156    	; 0x12cc <crc8>
    1230:	88 23       	and	r24, r24
    1232:	11 f0       	breq	.+4      	; 0x1238 <read_scratchpad.constprop.0+0x34>
    1234:	83 e0       	ldi	r24, 0x03	; 3
    1236:	01 c0       	rjmp	.+2      	; 0x123a <read_scratchpad.constprop.0+0x36>
    1238:	80 e0       	ldi	r24, 0x00	; 0
		ret = DS18X20_ERROR_CRC;
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
	} else {
		ret = DS18X20_OK;
    123e:	1f 91       	pop	r17
	}

	return ret;
}
    1240:	0f 91       	pop	r16
    1242:	ff 90       	pop	r15
    1244:	08 95       	ret

00001246 <DS18X20_start_meas>:
    1246:	1f 93       	push	r17
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
}

/* start measurement (CONVERT_T) for all sensors if input id==NULL 
   or for single sensor where id is the rom-code */
uint8_t DS18X20_start_meas( uint8_t with_power_extern, uint8_t id[])
{
    124c:	00 d0       	rcall	.+0      	; 0x124e <DS18X20_start_meas+0x8>
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	18 2f       	mov	r17, r24
	uint8_t ret;

	ow_reset();
    1254:	69 83       	std	Y+1, r22	; 0x01
    1256:	7a 83       	std	Y+2, r23	; 0x02
    1258:	23 df       	rcall	.-442    	; 0x10a0 <ow_reset>
    125a:	ba de       	rcall	.-652    	; 0xfd0 <ow_input_pin_state>
	if( ow_input_pin_state() ) { // only send if bus is "idle" = high
    125c:	69 81       	ldd	r22, Y+1	; 0x01
    125e:	7a 81       	ldd	r23, Y+2	; 0x02
    1260:	88 23       	and	r24, r24
    1262:	41 f0       	breq	.+16     	; 0x1274 <DS18X20_start_meas+0x2e>
    1264:	84 e4       	ldi	r24, 0x44	; 68
    1266:	11 30       	cpi	r17, 0x01	; 1
		if ( with_power_extern != DS18X20_POWER_EXTERN ) {
			ow_command_with_parasite_enable( DS18X20_CONVERT_T, id );
    1268:	11 f0       	breq	.+4      	; 0x126e <DS18X20_start_meas+0x28>
{
	uint8_t ret;

	ow_reset();
	if( ow_input_pin_state() ) { // only send if bus is "idle" = high
		if ( with_power_extern != DS18X20_POWER_EXTERN ) {
    126a:	ca df       	rcall	.-108    	; 0x1200 <ow_command_with_parasite_enable>
    126c:	01 c0       	rjmp	.+2      	; 0x1270 <DS18X20_start_meas+0x2a>
			ow_command_with_parasite_enable( DS18X20_CONVERT_T, id );
    126e:	c6 df       	rcall	.-116    	; 0x11fc <ow_command>
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	01 c0       	rjmp	.+2      	; 0x1276 <DS18X20_start_meas+0x30>
			/* not longer needed: ow_parasite_enable(); */
		} else {
			ow_command( DS18X20_CONVERT_T, id );
    1274:	82 e0       	ldi	r24, 0x02	; 2
    1276:	0f 90       	pop	r0
		}
		ret = DS18X20_OK;
    1278:	0f 90       	pop	r0
    127a:	df 91       	pop	r29
	} 
	else { 
		// DS18X20_start_meas: Short Circuit!
		ret = DS18X20_START_FAIL;
    127c:	cf 91       	pop	r28
	}

	return ret;
}
    127e:	1f 91       	pop	r17
    1280:	08 95       	ret

00001282 <DS18X20_read_raw_single>:
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
	return ret;
}

// just give me the data, let me do the math in c# land.
uint16_t DS18X20_read_raw_single()
{
    128a:	29 97       	sbiw	r28, 0x09	; 9
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	f8 94       	cli
    1290:	de bf       	out	0x3e, r29	; 62
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	cd bf       	out	0x3d, r28	; 61
	uint8_t sp[DS18X20_SP_SIZE];
	
	// fill the scratchpad with glorious raw data
	if (read_scratchpad( NULL, sp, DS18X20_SP_SIZE ) != DS18X20_OK ) 
    1296:	be 01       	movw	r22, r28
    1298:	6f 5f       	subi	r22, 0xFF	; 255
    129a:	7f 4f       	sbci	r23, 0xFF	; 255
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	b1 df       	rcall	.-158    	; 0x1204 <read_scratchpad.constprop.0>
    12a2:	81 11       	cpse	r24, r1
    12a4:	08 c0       	rjmp	.+16     	; 0x12b6 <DS18X20_read_raw_single+0x34>
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
	{
		return 0;		
	}
		
	uint16_t rawTemp = (sp[1] * 256) + sp[0];
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	98 2f       	mov	r25, r24
    12ac:	88 27       	eor	r24, r24
    12ae:	29 81       	ldd	r18, Y+1	; 0x01
    12b0:	82 0f       	add	r24, r18
    12b2:	91 1d       	adc	r25, r1
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DS18X20_read_raw_single+0x38>
	return rawTemp;
    12b6:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t sp[DS18X20_SP_SIZE];
	
	// fill the scratchpad with glorious raw data
	if (read_scratchpad( NULL, sp, DS18X20_SP_SIZE ) != DS18X20_OK ) 
	{
		return 0;		
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	29 96       	adiw	r28, 0x09	; 9
	}
		
	uint16_t rawTemp = (sp[1] * 256) + sp[0];
	return rawTemp;
}
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	de bf       	out	0x3e, r29	; 62
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	cd bf       	out	0x3d, r28	; 61
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	08 95       	ret

000012cc <crc8>:

#define CRC8INIT    0x00
#define CRC8POLY    0x18              //0X18 = X^8+X^5+X^4+X^0

uint8_t crc8( uint8_t *data, uint16_t number_of_bytes_in_data )
{
    12cc:	fc 01       	movw	r30, r24
    12ce:	68 0f       	add	r22, r24
    12d0:	79 1f       	adc	r23, r25
	uint16_t loop_count;
	uint8_t  bit_counter;
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;
    12d2:	80 e0       	ldi	r24, 0x00	; 0
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ b) & 0x01;
	
			if ( feedback_bit == 0x01 ) {
				crc = crc ^ CRC8POLY;
    12d4:	48 e1       	ldi	r20, 0x18	; 24
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
    12d6:	e6 17       	cp	r30, r22
    12d8:	f7 07       	cpc	r31, r23
    12da:	81 f0       	breq	.+32     	; 0x12fc <crc8+0x30>
	{
		b = data[loop_count];
    12dc:	21 91       	ld	r18, Z+
    12de:	98 e0       	ldi	r25, 0x08	; 8
		
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ b) & 0x01;
    12e0:	32 2f       	mov	r19, r18
    12e2:	38 27       	eor	r19, r24
	
			if ( feedback_bit == 0x01 ) {
    12e4:	53 2f       	mov	r21, r19
    12e6:	51 70       	andi	r21, 0x01	; 1
    12e8:	30 fd       	sbrc	r19, 0
				crc = crc ^ CRC8POLY;
    12ea:	84 27       	eor	r24, r20
			}
			crc = (crc >> 1) & 0x7F;
    12ec:	86 95       	lsr	r24
			if ( feedback_bit == 0x01 ) {
    12ee:	51 30       	cpi	r21, 0x01	; 1
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <crc8+0x28>
				crc = crc | 0x80;
    12f2:	80 68       	ori	r24, 0x80	; 128
			}
		
			b = b >> 1;
    12f4:	26 95       	lsr	r18
    12f6:	91 50       	subi	r25, 0x01	; 1
			bit_counter--;
		
		} while (bit_counter > 0);
    12f8:	99 f7       	brne	.-26     	; 0x12e0 <crc8+0x14>
    12fa:	ed cf       	rjmp	.-38     	; 0x12d6 <crc8+0xa>
	}
	
	return crc;
}
    12fc:	08 95       	ret

000012fe <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    12fe:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    1302:	88 e4       	ldi	r24, 0x48	; 72
    1304:	80 93 b8 00 	sts	0x00B8, r24
    1308:	08 95       	ret

0000130a <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    130a:	94 ea       	ldi	r25, 0xA4	; 164
    130c:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)))	{}
    1310:	90 91 bc 00 	lds	r25, 0x00BC
    1314:	97 ff       	sbrs	r25, 7
    1316:	fc cf       	rjmp	.-8      	; 0x1310 <i2c_start+0x6>
	
	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1318:	90 91 b9 00 	lds	r25, 0x00B9
    131c:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    131e:	98 30       	cpi	r25, 0x08	; 8
    1320:	21 f0       	breq	.+8      	; 0x132a <i2c_start+0x20>
    1322:	90 31       	cpi	r25, 0x10	; 16
    1324:	11 f0       	breq	.+4      	; 0x132a <i2c_start+0x20>
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	08 95       	ret

	// send device address
	TWDR = address;
    132a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    132e:	84 e8       	ldi	r24, 0x84	; 132
    1330:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1334:	80 91 bc 00 	lds	r24, 0x00BC
    1338:	87 ff       	sbrs	r24, 7
    133a:	fc cf       	rjmp	.-8      	; 0x1334 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    133c:	80 91 b9 00 	lds	r24, 0x00B9
    1340:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    1342:	88 31       	cpi	r24, 0x18	; 24
    1344:	11 f0       	breq	.+4      	; 0x134a <i2c_start+0x40>
    1346:	80 34       	cpi	r24, 0x40	; 64
    1348:	71 f7       	brne	.-36     	; 0x1326 <i2c_start+0x1c>

	return 0;
    134a:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    134c:	08 95       	ret

0000134e <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    134e:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1350:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1352:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1354:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1358:	90 91 bc 00 	lds	r25, 0x00BC
    135c:	97 ff       	sbrs	r25, 7
    135e:	fc cf       	rjmp	.-8      	; 0x1358 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1360:	90 91 b9 00 	lds	r25, 0x00B9
    1364:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    1366:	98 30       	cpi	r25, 0x08	; 8
    1368:	11 f0       	breq	.+4      	; 0x136e <i2c_start_wait+0x20>
    136a:	90 31       	cpi	r25, 0x10	; 16
    136c:	99 f7       	brne	.-26     	; 0x1354 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    136e:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1372:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1376:	90 91 bc 00 	lds	r25, 0x00BC
    137a:	97 ff       	sbrs	r25, 7
    137c:	fc cf       	rjmp	.-8      	; 0x1376 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    137e:	90 91 b9 00 	lds	r25, 0x00B9
    1382:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    1384:	90 32       	cpi	r25, 0x20	; 32
    1386:	11 f0       	breq	.+4      	; 0x138c <i2c_start_wait+0x3e>
    1388:	98 35       	cpi	r25, 0x58	; 88
    138a:	39 f4       	brne	.+14     	; 0x139a <i2c_start_wait+0x4c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    138c:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    1390:	90 91 bc 00 	lds	r25, 0x00BC
    1394:	94 fd       	sbrc	r25, 4
    1396:	fc cf       	rjmp	.-8      	; 0x1390 <i2c_start_wait+0x42>
    1398:	dd cf       	rjmp	.-70     	; 0x1354 <i2c_start_wait+0x6>
    139a:	08 95       	ret

0000139c <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    139c:	b6 cf       	rjmp	.-148    	; 0x130a <i2c_start>

0000139e <i2c_stop>:
    139e:	84 e9       	ldi	r24, 0x94	; 148
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    13a0:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    13a4:	80 91 bc 00 	lds	r24, 0x00BC
    13a8:	84 fd       	sbrc	r24, 4
    13aa:	fc cf       	rjmp	.-8      	; 0x13a4 <i2c_stop+0x6>

}/* i2c_stop */
    13ac:	08 95       	ret

000013ae <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    13ae:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    13b2:	84 e8       	ldi	r24, 0x84	; 132
    13b4:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    13b8:	80 91 bc 00 	lds	r24, 0x00BC
    13bc:	87 ff       	sbrs	r24, 7
    13be:	fc cf       	rjmp	.-8      	; 0x13b8 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    13c0:	90 91 b9 00 	lds	r25, 0x00B9
    13c4:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	98 32       	cpi	r25, 0x28	; 40
    13ca:	09 f4       	brne	.+2      	; 0x13ce <i2c_write+0x20>
    13cc:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    13ce:	08 95       	ret

000013d0 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    13d0:	84 ec       	ldi	r24, 0xC4	; 196
    13d2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    13d6:	80 91 bc 00 	lds	r24, 0x00BC
    13da:	87 ff       	sbrs	r24, 7
    13dc:	fc cf       	rjmp	.-8      	; 0x13d6 <i2c_readAck+0x6>

    return TWDR;
    13de:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    13e2:	08 95       	ret

000013e4 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    13e4:	84 e8       	ldi	r24, 0x84	; 132
    13e6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    13ea:	80 91 bc 00 	lds	r24, 0x00BC
    13ee:	87 ff       	sbrs	r24, 7
    13f0:	fc cf       	rjmp	.-8      	; 0x13ea <i2c_readNak+0x6>
	
    return TWDR;
    13f2:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    13f6:	08 95       	ret

000013f8 <LC32_Init>:
#include "memory.h"
#include "i2cmaster.h"

void LC32_Init(void)
{
	i2c_init();
    13f8:	82 cf       	rjmp	.-252    	; 0x12fe <i2c_init>

000013fa <LC32_Clear>:
    13fa:	1f 93       	push	r17
}

void LC32_Clear(void)
{	
    13fc:	cf 93       	push	r28
    13fe:	df 93       	push	r29
    1400:	c0 e0       	ldi	r28, 0x00	; 0
    1402:	d0 e0       	ldi	r29, 0x00	; 0
	// break up the address into bytes
	for (uint16_t i = 0; i < 128; i++)
	{		
		// set device address and write mode
		i2c_start_wait(LC32_ADDRESS + I2C_WRITE);
    1404:	80 ea       	ldi	r24, 0xA0	; 160
    1406:	a3 df       	rcall	.-186    	; 0x134e <i2c_start_wait>
    1408:	8d 2f       	mov	r24, r29
		// calculate address bytes
		uint8_t addressh = (uint8_t)((i * 32) / 256);
		uint8_t addressl = (uint8_t)((i * 32) % 256);
		
		// send address
		i2c_write(addressh);
    140a:	d1 df       	rcall	.-94     	; 0x13ae <i2c_write>
    140c:	8c 2f       	mov	r24, r28
    140e:	cf df       	rcall	.-98     	; 0x13ae <i2c_write>
		i2c_write(addressl);
    1410:	18 e0       	ldi	r17, 0x08	; 8
    1412:	8f ef       	ldi	r24, 0xFF	; 255
    1414:	cc df       	rcall	.-104    	; 0x13ae <i2c_write>
    1416:	8f ef       	ldi	r24, 0xFF	; 255
		
		// send data
		for(uint8_t j = 0; j < 8; j++)
		{
			i2c_write(0xFF);//th
    1418:	ca df       	rcall	.-108    	; 0x13ae <i2c_write>
    141a:	8f ef       	ldi	r24, 0xFF	; 255
    141c:	c8 df       	rcall	.-112    	; 0x13ae <i2c_write>
			i2c_write(0xFF);//tl
    141e:	8f ef       	ldi	r24, 0xFF	; 255
    1420:	c6 df       	rcall	.-116    	; 0x13ae <i2c_write>
    1422:	11 50       	subi	r17, 0x01	; 1
			i2c_write(0xFF);//bh
    1424:	b1 f7       	brne	.-20     	; 0x1412 <LC32_Clear+0x18>
    1426:	bb df       	rcall	.-138    	; 0x139e <i2c_stop>
    1428:	a0 96       	adiw	r28, 0x20	; 32
			i2c_write(0xFF);//bl
    142a:	c1 15       	cp	r28, r1
    142c:	80 e1       	ldi	r24, 0x10	; 16
    142e:	d8 07       	cpc	r29, r24
    1430:	49 f7       	brne	.-46     	; 0x1404 <LC32_Clear+0xa>
		// send address
		i2c_write(addressh);
		i2c_write(addressl);
		
		// send data
		for(uint8_t j = 0; j < 8; j++)
    1432:	df 91       	pop	r29
			i2c_write(0xFF);//bh
			i2c_write(0xFF);//bl
		}
		
		// set stop condition = release bus
		i2c_stop();
    1434:	cf 91       	pop	r28
    1436:	1f 91       	pop	r17
    1438:	08 95       	ret

0000143a <LC32_WriteSample>:
}

void LC32_Clear(void)
{	
	// break up the address into bytes
	for (uint16_t i = 0; i < 128; i++)
    143a:	1f 93       	push	r17
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	00 d0       	rcall	.+0      	; 0x1442 <LC32_WriteSample+0x8>
		}
		
		// set stop condition = release bus
		i2c_stop();
	}
}
    1442:	00 d0       	rcall	.+0      	; 0x1444 <LC32_WriteSample+0xa>
    1444:	1f 92       	push	r1
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62

void LC32_WriteSample(uint16_t address, Sample sample)
{
    144a:	18 2f       	mov	r17, r24
	// set device address and write mode
	i2c_start_wait(LC32_ADDRESS + I2C_WRITE);
    144c:	80 ea       	ldi	r24, 0xA0	; 160
    144e:	4b 83       	std	Y+3, r20	; 0x03
    1450:	5a 83       	std	Y+2, r21	; 0x02
    1452:	6d 83       	std	Y+5, r22	; 0x05
    1454:	7c 83       	std	Y+4, r23	; 0x04
    1456:	99 83       	std	Y+1, r25	; 0x01
    1458:	7a df       	rcall	.-268    	; 0x134e <i2c_start_wait>
    145a:	99 81       	ldd	r25, Y+1	; 0x01
	// break up the address into bytes
	uint8_t addressh = address / 256;
	uint8_t addressl = address % 256;
	
	// send address
	i2c_write(addressh);
    145c:	89 2f       	mov	r24, r25
    145e:	a7 df       	rcall	.-178    	; 0x13ae <i2c_write>
    1460:	81 2f       	mov	r24, r17
    1462:	a5 df       	rcall	.-182    	; 0x13ae <i2c_write>
	i2c_write(addressl);
    1464:	5a 81       	ldd	r21, Y+2	; 0x02
    1466:	85 2f       	mov	r24, r21
    1468:	a2 df       	rcall	.-188    	; 0x13ae <i2c_write>
	
	// send data
	i2c_write(sample.temperature / 256);
    146a:	4b 81       	ldd	r20, Y+3	; 0x03
    146c:	84 2f       	mov	r24, r20
    146e:	9f df       	rcall	.-194    	; 0x13ae <i2c_write>
    1470:	7c 81       	ldd	r23, Y+4	; 0x04
	i2c_write(sample.temperature % 256);
    1472:	87 2f       	mov	r24, r23
    1474:	9c df       	rcall	.-200    	; 0x13ae <i2c_write>
    1476:	6d 81       	ldd	r22, Y+5	; 0x05
    1478:	86 2f       	mov	r24, r22
	i2c_write(sample.bubbles / 256);
    147a:	99 df       	rcall	.-206    	; 0x13ae <i2c_write>
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
	i2c_write(sample.bubbles % 256);
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	df 91       	pop	r29
    1488:	cf 91       	pop	r28
	
	// set stop condition = release bus
	i2c_stop();
}
    148a:	1f 91       	pop	r17
    148c:	88 cf       	rjmp	.-240    	; 0x139e <i2c_stop>

0000148e <LC32_ReadSample>:
    148e:	ef 92       	push	r14
    1490:	ff 92       	push	r15
    1492:	0f 93       	push	r16
    1494:	1f 93       	push	r17
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
	i2c_write(sample.temperature % 256);
	i2c_write(sample.bubbles / 256);
	i2c_write(sample.bubbles % 256);
	
	// set stop condition = release bus
	i2c_stop();
    149a:	1f 92       	push	r1
    149c:	cd b7       	in	r28, 0x3d	; 61

	return dataResponse;
}

Sample LC32_ReadSample(uint16_t address)
{
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	18 2f       	mov	r17, r24
	// set device address and write mode
	i2c_start_wait(LC32_ADDRESS + I2C_WRITE);
    14a2:	80 ea       	ldi	r24, 0xA0	; 160
    14a4:	99 83       	std	Y+1, r25	; 0x01
    14a6:	53 df       	rcall	.-346    	; 0x134e <i2c_start_wait>
    14a8:	99 81       	ldd	r25, Y+1	; 0x01
	// break up the address into bytes
	uint8_t addressh = address / 256;
	uint8_t addressl = address % 256;
	
	// send address
	i2c_write(addressh);
    14aa:	89 2f       	mov	r24, r25
    14ac:	80 df       	rcall	.-256    	; 0x13ae <i2c_write>
    14ae:	81 2f       	mov	r24, r17
    14b0:	7e df       	rcall	.-260    	; 0x13ae <i2c_write>
	i2c_write(addressl);
    14b2:	81 ea       	ldi	r24, 0xA1	; 161
    14b4:	73 df       	rcall	.-282    	; 0x139c <i2c_rep_start>
    14b6:	8c df       	rcall	.-232    	; 0x13d0 <i2c_readAck>
		
	// initiate read
	i2c_rep_start(LC32_ADDRESS + I2C_READ);	
    14b8:	08 2f       	mov	r16, r24
    14ba:	8a df       	rcall	.-236    	; 0x13d0 <i2c_readAck>
    14bc:	10 e0       	ldi	r17, 0x00	; 0
	
	// read data
	Sample sample;
	sample.temperature = i2c_readAck() * 256;
    14be:	10 2f       	mov	r17, r16
    14c0:	00 27       	eor	r16, r16
    14c2:	08 0f       	add	r16, r24
	sample.temperature += i2c_readAck();
    14c4:	11 1d       	adc	r17, r1
    14c6:	84 df       	rcall	.-248    	; 0x13d0 <i2c_readAck>
	// initiate read
	i2c_rep_start(LC32_ADDRESS + I2C_READ);	
	
	// read data
	Sample sample;
	sample.temperature = i2c_readAck() * 256;
    14c8:	e8 2e       	mov	r14, r24
    14ca:	8c df       	rcall	.-232    	; 0x13e4 <i2c_readNak>
    14cc:	f1 2c       	mov	r15, r1
	sample.temperature += i2c_readAck();
    14ce:	fe 2c       	mov	r15, r14
    14d0:	ee 24       	eor	r14, r14
	sample.bubbles = i2c_readAck() * 256;
    14d2:	e8 0e       	add	r14, r24
    14d4:	f1 1c       	adc	r15, r1
    14d6:	63 df       	rcall	.-314    	; 0x139e <i2c_stop>
	sample.bubbles += i2c_readNak();
    14d8:	b8 01       	movw	r22, r16
    14da:	c7 01       	movw	r24, r14
	
	// read data
	Sample sample;
	sample.temperature = i2c_readAck() * 256;
	sample.temperature += i2c_readAck();
	sample.bubbles = i2c_readAck() * 256;
    14dc:	0f 90       	pop	r0
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
	sample.bubbles += i2c_readNak();
    14e2:	1f 91       	pop	r17
    14e4:	0f 91       	pop	r16
	
	// set stop condition to release bus
	i2c_stop(); 
    14e6:	ff 90       	pop	r15
    14e8:	ef 90       	pop	r14
	
	return sample;
    14ea:	08 95       	ret

000014ec <LC32_WritePage>:
    14ec:	ef 92       	push	r14
}
    14ee:	ff 92       	push	r15
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <LC32_WritePage+0xe>
    14fa:	1f 92       	push	r1
    14fc:	cd b7       	in	r28, 0x3d	; 61

void LC32_WritePage(uint16_t address, Sample samples[])
{
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	18 2f       	mov	r17, r24
	// set device address and write mode
	i2c_start_wait(LC32_ADDRESS + I2C_WRITE);
    1502:	80 ea       	ldi	r24, 0xA0	; 160
    1504:	6a 83       	std	Y+2, r22	; 0x02
    1506:	7b 83       	std	Y+3, r23	; 0x03
    1508:	99 83       	std	Y+1, r25	; 0x01
    150a:	21 df       	rcall	.-446    	; 0x134e <i2c_start_wait>
    150c:	99 81       	ldd	r25, Y+1	; 0x01
	// break up the address into bytes
	uint8_t addressh = address / 256;
	uint8_t addressl = address % 256;
	
	// send address
	i2c_write(addressh);
    150e:	89 2f       	mov	r24, r25
    1510:	4e df       	rcall	.-356    	; 0x13ae <i2c_write>
    1512:	81 2f       	mov	r24, r17
    1514:	4c df       	rcall	.-360    	; 0x13ae <i2c_write>
	i2c_write(addressl);
    1516:	6a 81       	ldd	r22, Y+2	; 0x02
    1518:	e6 2e       	mov	r14, r22
    151a:	7b 81       	ldd	r23, Y+3	; 0x03
    151c:	f7 2e       	mov	r15, r23
    151e:	00 e0       	ldi	r16, 0x00	; 0
    1520:	10 e0       	ldi	r17, 0x00	; 0
    1522:	f7 01       	movw	r30, r14
		
	// send data
	for(int i = 0; i < 8; i++)
    1524:	81 81       	ldd	r24, Z+1	; 0x01
    1526:	43 df       	rcall	.-378    	; 0x13ae <i2c_write>
	{
		i2c_write(samples[i].temperature / 256);
    1528:	f7 01       	movw	r30, r14
    152a:	80 81       	ld	r24, Z
    152c:	40 df       	rcall	.-384    	; 0x13ae <i2c_write>
    152e:	f7 01       	movw	r30, r14
		i2c_write(samples[i].temperature % 256);
    1530:	83 81       	ldd	r24, Z+3	; 0x03
    1532:	3d df       	rcall	.-390    	; 0x13ae <i2c_write>
    1534:	f7 01       	movw	r30, r14
    1536:	82 81       	ldd	r24, Z+2	; 0x02
		i2c_write(samples[i].bubbles / 256);
    1538:	3a df       	rcall	.-396    	; 0x13ae <i2c_write>
    153a:	0f 5f       	subi	r16, 0xFF	; 255
    153c:	1f 4f       	sbci	r17, 0xFF	; 255
    153e:	f4 e0       	ldi	r31, 0x04	; 4
		i2c_write(samples[i].bubbles % 256);
    1540:	ef 0e       	add	r14, r31
    1542:	f1 1c       	adc	r15, r1
    1544:	08 30       	cpi	r16, 0x08	; 8
    1546:	11 05       	cpc	r17, r1
	// send address
	i2c_write(addressh);
	i2c_write(addressl);
		
	// send data
	for(int i = 0; i < 8; i++)
    1548:	61 f7       	brne	.-40     	; 0x1522 <LC32_WritePage+0x36>
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	1f 91       	pop	r17
    1556:	0f 91       	pop	r16
		i2c_write(samples[i].bubbles % 256);
	}
		
	// set stop condition to release bus
	i2c_stop();
    1558:	ff 90       	pop	r15
    155a:	ef 90       	pop	r14
    155c:	20 cf       	rjmp	.-448    	; 0x139e <i2c_stop>

0000155e <__vector_25>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    155e:	1f 92       	push	r1
    1560:	0f 92       	push	r0
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	0f 92       	push	r0
    1566:	11 24       	eor	r1, r1
    1568:	2f 93       	push	r18
    156a:	8f 93       	push	r24
    156c:	9f 93       	push	r25
    156e:	ef 93       	push	r30
    1570:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
    1572:	80 91 c8 00 	lds	r24, 0x00C8
    data = UART0_DATA;
    1576:	90 91 ce 00 	lds	r25, 0x00CE
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
#elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0)|_BV(DOR0)|_BV(UPE0) );
#elif defined(FE1) && defined(DOR1) && defined(UPE1)
    lastRxError = usr & (_BV(FE1)|_BV(DOR1)|_BV(UPE1) );
    157a:	8c 71       	andi	r24, 0x1C	; 28
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    157c:	e0 91 9a 01 	lds	r30, 0x019A
    1580:	ef 5f       	subi	r30, 0xFF	; 255
    1582:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
    1584:	20 91 99 01 	lds	r18, 0x0199
    1588:	e2 17       	cp	r30, r18
    158a:	39 f0       	breq	.+14     	; 0x159a <__vector_25+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    158c:	e0 93 9a 01 	sts	0x019A, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	e3 56       	subi	r30, 0x63	; 99
    1594:	fe 4f       	sbci	r31, 0xFE	; 254
    1596:	90 83       	st	Z, r25
    1598:	01 c0       	rjmp	.+2      	; 0x159c <__vector_25+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    159a:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
    159c:	90 91 98 01 	lds	r25, 0x0198
    15a0:	98 2b       	or	r25, r24
    15a2:	90 93 98 01 	sts	0x0198, r25
}
    15a6:	ff 91       	pop	r31
    15a8:	ef 91       	pop	r30
    15aa:	9f 91       	pop	r25
    15ac:	8f 91       	pop	r24
    15ae:	2f 91       	pop	r18
    15b0:	0f 90       	pop	r0
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	0f 90       	pop	r0
    15b6:	1f 90       	pop	r1
    15b8:	18 95       	reti

000015ba <__vector_26>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    15ba:	1f 92       	push	r1
    15bc:	0f 92       	push	r0
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	0f 92       	push	r0
    15c2:	11 24       	eor	r1, r1
    15c4:	8f 93       	push	r24
    15c6:	9f 93       	push	r25
    15c8:	ef 93       	push	r30
    15ca:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    15cc:	90 91 9c 01 	lds	r25, 0x019C
    15d0:	80 91 9b 01 	lds	r24, 0x019B
    15d4:	98 17       	cp	r25, r24
    15d6:	69 f0       	breq	.+26     	; 0x15f2 <__vector_26+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    15d8:	e0 91 9b 01 	lds	r30, 0x019B
    15dc:	ef 5f       	subi	r30, 0xFF	; 255
    15de:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
    15e0:	e0 93 9b 01 	sts	0x019B, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	e3 54       	subi	r30, 0x43	; 67
    15e8:	fe 4f       	sbci	r31, 0xFE	; 254
    15ea:	80 81       	ld	r24, Z
    15ec:	80 93 ce 00 	sts	0x00CE, r24
    15f0:	05 c0       	rjmp	.+10     	; 0x15fc <__vector_26+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    15f2:	80 91 c9 00 	lds	r24, 0x00C9
    15f6:	8f 7d       	andi	r24, 0xDF	; 223
    15f8:	80 93 c9 00 	sts	0x00C9, r24
    }
}
    15fc:	ff 91       	pop	r31
    15fe:	ef 91       	pop	r30
    1600:	9f 91       	pop	r25
    1602:	8f 91       	pop	r24
    1604:	0f 90       	pop	r0
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	0f 90       	pop	r0
    160a:	1f 90       	pop	r1
    160c:	18 95       	reti

0000160e <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
    160e:	10 92 9c 01 	sts	0x019C, r1
    UART_TxTail = 0;
    1612:	10 92 9b 01 	sts	0x019B, r1
    UART_RxHead = 0;
    1616:	10 92 9a 01 	sts	0x019A, r1
    UART_RxTail = 0;
    161a:	10 92 99 01 	sts	0x0199, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
    161e:	97 ff       	sbrs	r25, 7
    1620:	03 c0       	rjmp	.+6      	; 0x1628 <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
    1622:	22 e0       	ldi	r18, 0x02	; 2
    1624:	20 93 c8 00 	sts	0x00C8, r18
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
    1628:	90 78       	andi	r25, 0x80	; 128
    162a:	90 93 cd 00 	sts	0x00CD, r25
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
    162e:	80 93 cc 00 	sts	0x00CC, r24
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
    1632:	88 e9       	ldi	r24, 0x98	; 152
    1634:	80 93 c9 00 	sts	0x00C9, r24
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    1638:	86 e0       	ldi	r24, 0x06	; 6
    163a:	80 93 ca 00 	sts	0x00CA, r24
    163e:	08 95       	ret

00001640 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    1640:	90 91 9c 01 	lds	r25, 0x019C
    1644:	9f 5f       	subi	r25, 0xFF	; 255
    1646:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    1648:	20 91 9b 01 	lds	r18, 0x019B
    164c:	92 17       	cp	r25, r18
    164e:	e1 f3       	breq	.-8      	; 0x1648 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    1650:	e9 2f       	mov	r30, r25
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	e3 54       	subi	r30, 0x43	; 67
    1656:	fe 4f       	sbci	r31, 0xFE	; 254
    1658:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    165a:	90 93 9c 01 	sts	0x019C, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    165e:	80 91 c9 00 	lds	r24, 0x00C9
    1662:	80 62       	ori	r24, 0x20	; 32
    1664:	80 93 c9 00 	sts	0x00C9, r24
    1668:	08 95       	ret

0000166a <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	ec 01       	movw	r28, r24
    while (*s) 
    1670:	89 91       	ld	r24, Y+
    1672:	88 23       	and	r24, r24
    1674:	11 f0       	breq	.+4      	; 0x167a <uart_puts+0x10>
      uart_putc(*s++);
    1676:	e4 df       	rcall	.-56     	; 0x1640 <uart_putc>
    1678:	fb cf       	rjmp	.-10     	; 0x1670 <uart_puts+0x6>
    167a:	df 91       	pop	r29

}/* uart_puts */
    167c:	cf 91       	pop	r28
    167e:	08 95       	ret

00001680 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1680:	98 2f       	mov	r25, r24
    1682:	97 30       	cpi	r25, 0x07	; 7
    1684:	58 f5       	brcc	.+86     	; 0x16dc <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1686:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    168a:	98 17       	cp	r25, r24
    168c:	39 f0       	breq	.+14     	; 0x169c <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    168e:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1692:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1696:	50 91 f0 00 	lds	r21, 0x00F0
    169a:	03 c0       	rjmp	.+6      	; 0x16a2 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    169c:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    169e:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    16a0:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    16a2:	21 ff       	sbrs	r18, 1
    16a4:	19 c0       	rjmp	.+50     	; 0x16d8 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    16a6:	30 91 eb 00 	lds	r19, 0x00EB
    16aa:	3e 7f       	andi	r19, 0xFE	; 254
    16ac:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    16b0:	30 91 ed 00 	lds	r19, 0x00ED
    16b4:	3d 7f       	andi	r19, 0xFD	; 253
    16b6:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    16ba:	30 91 eb 00 	lds	r19, 0x00EB
    16be:	31 60       	ori	r19, 0x01	; 1
    16c0:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    16c4:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    16c8:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    16cc:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    16d0:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    16d4:	27 ff       	sbrs	r18, 7
    16d6:	07 c0       	rjmp	.+14     	; 0x16e6 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    16d8:	9f 5f       	subi	r25, 0xFF	; 255
    16da:	d3 cf       	rjmp	.-90     	; 0x1682 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16dc:	8f 70       	andi	r24, 0x0F	; 15
    16de:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    16e6:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    16e8:	08 95       	ret

000016ea <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    16ea:	0f 93       	push	r16
    16ec:	1f 93       	push	r17
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	06 2f       	mov	r16, r22
    16f4:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < Entries; i++)
    16f6:	10 e0       	ldi	r17, 0x00	; 0
    16f8:	10 17       	cp	r17, r16
    16fa:	71 f1       	breq	.+92     	; 0x1758 <Endpoint_ConfigureEndpointTable+0x6e>
	{
		if (!(Table[i].Address))
    16fc:	98 81       	ld	r25, Y
    16fe:	99 23       	and	r25, r25
    1700:	41 f1       	breq	.+80     	; 0x1752 <Endpoint_ConfigureEndpointTable+0x68>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1702:	2c 81       	ldd	r18, Y+4	; 0x04
    1704:	e9 81       	ldd	r30, Y+1	; 0x01
    1706:	fa 81       	ldd	r31, Y+2	; 0x02
    1708:	7b 81       	ldd	r23, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    170a:	89 2f       	mov	r24, r25
    170c:	8f 70       	andi	r24, 0x0F	; 15
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    170e:	87 30       	cpi	r24, 0x07	; 7
    1710:	10 f0       	brcs	.+4      	; 0x1716 <Endpoint_ConfigureEndpointTable+0x2c>
		  return false;
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	22 c0       	rjmp	.+68     	; 0x175a <Endpoint_ConfigureEndpointTable+0x70>
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1716:	22 30       	cpi	r18, 0x02	; 2
    1718:	10 f0       	brcs	.+4      	; 0x171e <Endpoint_ConfigureEndpointTable+0x34>
    171a:	56 e0       	ldi	r21, 0x06	; 6
    171c:	01 c0       	rjmp	.+2      	; 0x1720 <Endpoint_ConfigureEndpointTable+0x36>
    171e:	52 e0       	ldi	r21, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    1720:	28 e0       	ldi	r18, 0x08	; 8
    1722:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1724:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1726:	2e 17       	cp	r18, r30
    1728:	3f 07       	cpc	r19, r31
    172a:	20 f4       	brcc	.+8      	; 0x1734 <Endpoint_ConfigureEndpointTable+0x4a>
				{
					MaskVal++;
    172c:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    172e:	22 0f       	add	r18, r18
    1730:	33 1f       	adc	r19, r19
    1732:	f9 cf       	rjmp	.-14     	; 0x1726 <Endpoint_ConfigureEndpointTable+0x3c>
				}

				return (MaskVal << EPSIZE0);
    1734:	42 95       	swap	r20
    1736:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1738:	45 2b       	or	r20, r21
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    173a:	69 2f       	mov	r22, r25
    173c:	66 1f       	adc	r22, r22
    173e:	66 27       	eor	r22, r22
    1740:	66 1f       	adc	r22, r22
    1742:	90 e4       	ldi	r25, 0x40	; 64
    1744:	79 9f       	mul	r23, r25
    1746:	90 01       	movw	r18, r0
    1748:	11 24       	eor	r1, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    174a:	62 2b       	or	r22, r18
    174c:	99 df       	rcall	.-206    	; 0x1680 <Endpoint_ConfigureEndpoint_Prv>
    174e:	88 23       	and	r24, r24
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1750:	01 f3       	breq	.-64     	; 0x1712 <Endpoint_ConfigureEndpointTable+0x28>
    1752:	1f 5f       	subi	r17, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1754:	25 96       	adiw	r28, 0x05	; 5
    1756:	d0 cf       	rjmp	.-96     	; 0x16f8 <Endpoint_ConfigureEndpointTable+0xe>
    1758:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
    175a:	df 91       	pop	r29
}
    175c:	cf 91       	pop	r28
    175e:	1f 91       	pop	r17
    1760:	0f 91       	pop	r16
    1762:	08 95       	ret

00001764 <Endpoint_ClearStatusStage>:
    1764:	80 91 29 02 	lds	r24, 0x0229
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1768:	87 fd       	sbrc	r24, 7
    176a:	05 c0       	rjmp	.+10     	; 0x1776 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    176c:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1770:	80 ff       	sbrs	r24, 0
    1772:	0e c0       	rjmp	.+28     	; 0x1790 <Endpoint_ClearStatusStage+0x2c>
    1774:	12 c0       	rjmp	.+36     	; 0x179a <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1776:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    177a:	82 fd       	sbrc	r24, 2
    177c:	05 c0       	rjmp	.+10     	; 0x1788 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    177e:	80 91 28 02 	lds	r24, 0x0228
    1782:	81 11       	cpse	r24, r1
    1784:	f8 cf       	rjmp	.-16     	; 0x1776 <Endpoint_ClearStatusStage+0x12>
    1786:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1788:	80 91 e8 00 	lds	r24, 0x00E8
    178c:	8b 77       	andi	r24, 0x7B	; 123
    178e:	08 c0       	rjmp	.+16     	; 0x17a0 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1790:	80 91 28 02 	lds	r24, 0x0228
    1794:	81 11       	cpse	r24, r1
    1796:	ea cf       	rjmp	.-44     	; 0x176c <Endpoint_ClearStatusStage+0x8>
    1798:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    179a:	80 91 e8 00 	lds	r24, 0x00E8
    179e:	8e 77       	andi	r24, 0x7E	; 126
    17a0:	80 93 e8 00 	sts	0x00E8, r24
    17a4:	08 95       	ret

000017a6 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    17a6:	80 91 e4 00 	lds	r24, 0x00E4
    17aa:	90 91 e5 00 	lds	r25, 0x00E5
    17ae:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    17b0:	20 91 ec 00 	lds	r18, 0x00EC
    17b4:	20 ff       	sbrs	r18, 0
    17b6:	21 c0       	rjmp	.+66     	; 0x17fa <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    17b8:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    17bc:	20 fd       	sbrc	r18, 0
    17be:	21 c0       	rjmp	.+66     	; 0x1802 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    17c0:	20 91 28 02 	lds	r18, 0x0228

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    17c4:	22 23       	and	r18, r18
    17c6:	89 f0       	breq	.+34     	; 0x17ea <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    17c8:	25 30       	cpi	r18, 0x05	; 5
    17ca:	89 f0       	breq	.+34     	; 0x17ee <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    17cc:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    17d0:	25 fd       	sbrc	r18, 5
    17d2:	0f c0       	rjmp	.+30     	; 0x17f2 <Endpoint_WaitUntilReady+0x4c>
    17d4:	20 91 e4 00 	lds	r18, 0x00E4
    17d8:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    17dc:	28 17       	cp	r18, r24
    17de:	39 07       	cpc	r19, r25
    17e0:	39 f3       	breq	.-50     	; 0x17b0 <Endpoint_WaitUntilReady+0xa>
    17e2:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    17e4:	41 f0       	breq	.+16     	; 0x17f6 <Endpoint_WaitUntilReady+0x50>
    17e6:	c9 01       	movw	r24, r18
    17e8:	e3 cf       	rjmp	.-58     	; 0x17b0 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    17ea:	82 e0       	ldi	r24, 0x02	; 2
    17ec:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    17ee:	83 e0       	ldi	r24, 0x03	; 3
    17f0:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    17f6:	84 e0       	ldi	r24, 0x04	; 4
    17f8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    17fa:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    17fe:	22 ff       	sbrs	r18, 2
    1800:	df cf       	rjmp	.-66     	; 0x17c0 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	08 95       	ret

00001806 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    1806:	0f 93       	push	r16
    1808:	1f 93       	push	r17
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    180e:	46 d0       	rcall	.+140    	; 0x189c <USB_INT_DisableAllInterrupts>
    1810:	4d d0       	rcall	.+154    	; 0x18ac <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1812:	c8 ed       	ldi	r28, 0xD8	; 216
    1814:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1816:	88 81       	ld	r24, Y
    1818:	8f 77       	andi	r24, 0x7F	; 127
    181a:	88 83       	st	Y, r24
    181c:	88 81       	ld	r24, Y
    181e:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    1820:	88 83       	st	Y, r24
    1822:	88 81       	ld	r24, Y
    1824:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1826:	88 83       	st	Y, r24
    1828:	19 bc       	out	0x29, r1	; 41
    182a:	10 92 28 02 	sts	0x0228, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    182e:	10 92 24 02 	sts	0x0224, r1
	USB_Device_ConfigurationNumber  = 0;
    1832:	10 92 26 02 	sts	0x0226, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1836:	10 92 25 02 	sts	0x0225, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    183a:	00 ee       	ldi	r16, 0xE0	; 224
    183c:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    183e:	f8 01       	movw	r30, r16
    1840:	80 81       	ld	r24, Z
    1842:	8b 7f       	andi	r24, 0xFB	; 251
    1844:	80 83       	st	Z, r24
    1846:	88 81       	ld	r24, Y
    1848:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    184a:	88 83       	st	Y, r24
    184c:	42 e0       	ldi	r20, 0x02	; 2
    184e:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	16 df       	rcall	.-468    	; 0x1680 <Endpoint_ConfigureEndpoint_Prv>
    1854:	e1 ee       	ldi	r30, 0xE1	; 225
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    185a:	8e 7f       	andi	r24, 0xFE	; 254
    185c:	80 83       	st	Z, r24
    185e:	e2 ee       	ldi	r30, 0xE2	; 226
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1864:	81 60       	ori	r24, 0x01	; 1
    1866:	80 83       	st	Z, r24
    1868:	80 81       	ld	r24, Z
    186a:	88 60       	ori	r24, 0x08	; 8
    186c:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    186e:	f8 01       	movw	r30, r16
    1870:	80 81       	ld	r24, Z
    1872:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1874:	80 83       	st	Z, r24
    1876:	88 81       	ld	r24, Y
    1878:	80 61       	ori	r24, 0x10	; 16
    187a:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1882:	0f 91       	pop	r16
    1884:	08 95       	ret

00001886 <USB_Init>:
    1886:	e7 ed       	ldi	r30, 0xD7	; 215
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    188c:	81 60       	ori	r24, 0x01	; 1
    188e:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1890:	84 e0       	ldi	r24, 0x04	; 4
    1892:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	80 93 27 02 	sts	0x0227, r24

	USB_ResetInterface();
    189a:	b5 cf       	rjmp	.-150    	; 0x1806 <USB_ResetInterface>

0000189c <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    189c:	e8 ed       	ldi	r30, 0xD8	; 216
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	8e 7f       	andi	r24, 0xFE	; 254
    18a4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    18a6:	10 92 e2 00 	sts	0x00E2, r1
    18aa:	08 95       	ret

000018ac <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    18ac:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    18b0:	10 92 e1 00 	sts	0x00E1, r1
    18b4:	08 95       	ret

000018b6 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    18b6:	1f 92       	push	r1
    18b8:	0f 92       	push	r0
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	0f 92       	push	r0
    18be:	11 24       	eor	r1, r1
    18c0:	2f 93       	push	r18
    18c2:	3f 93       	push	r19
    18c4:	4f 93       	push	r20
    18c6:	5f 93       	push	r21
    18c8:	6f 93       	push	r22
    18ca:	7f 93       	push	r23
    18cc:	8f 93       	push	r24
    18ce:	9f 93       	push	r25
    18d0:	af 93       	push	r26
    18d2:	bf 93       	push	r27
    18d4:	ef 93       	push	r30
    18d6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    18d8:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    18dc:	82 ff       	sbrs	r24, 2
    18de:	0a c0       	rjmp	.+20     	; 0x18f4 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    18e0:	80 91 e2 00 	lds	r24, 0x00E2
    18e4:	82 ff       	sbrs	r24, 2
    18e6:	06 c0       	rjmp	.+12     	; 0x18f4 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    18e8:	80 91 e1 00 	lds	r24, 0x00E1
    18ec:	8b 7f       	andi	r24, 0xFB	; 251
    18ee:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    18f2:	21 da       	rcall	.-3006   	; 0xd36 <EVENT_USB_Device_StartOfFrame>
    18f4:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    18f8:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    18fa:	1d c0       	rjmp	.+58     	; 0x1936 <__vector_10+0x80>
    18fc:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1900:	80 ff       	sbrs	r24, 0
    1902:	19 c0       	rjmp	.+50     	; 0x1936 <__vector_10+0x80>
    1904:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1908:	8e 7f       	andi	r24, 0xFE	; 254
    190a:	80 93 da 00 	sts	0x00DA, r24
    190e:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1912:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1914:	0c c0       	rjmp	.+24     	; 0x192e <__vector_10+0x78>
    1916:	80 e1       	ldi	r24, 0x10	; 16

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1918:	89 bd       	out	0x29, r24	; 41
    191a:	82 e1       	ldi	r24, 0x12	; 18
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    191c:	89 bd       	out	0x29, r24	; 41
    191e:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1920:	00 fe       	sbrs	r0, 0
    1922:	fd cf       	rjmp	.-6      	; 0x191e <__vector_10+0x68>
    1924:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1926:	80 93 28 02 	sts	0x0228, r24
    192a:	f3 d9       	rcall	.-3098   	; 0xd12 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
    192c:	04 c0       	rjmp	.+8      	; 0x1936 <__vector_10+0x80>
    192e:	19 bc       	out	0x29, r1	; 41
    1930:	10 92 28 02 	sts	0x0228, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1934:	ef d9       	rcall	.-3106   	; 0xd14 <EVENT_USB_Device_Disconnect>
    1936:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
    193a:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    193c:	18 c0       	rjmp	.+48     	; 0x196e <__vector_10+0xb8>
    193e:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1942:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1944:	14 c0       	rjmp	.+40     	; 0x196e <__vector_10+0xb8>
    1946:	80 91 e2 00 	lds	r24, 0x00E2
    194a:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    194c:	80 93 e2 00 	sts	0x00E2, r24
    1950:	80 91 e2 00 	lds	r24, 0x00E2
    1954:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1956:	80 93 e2 00 	sts	0x00E2, r24
    195a:	80 91 d8 00 	lds	r24, 0x00D8
    195e:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1960:	80 93 d8 00 	sts	0x00D8, r24
    1964:	19 bc       	out	0x29, r1	; 41
    1966:	85 e0       	ldi	r24, 0x05	; 5
    1968:	80 93 28 02 	sts	0x0228, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    196c:	f2 d2       	rcall	.+1508   	; 0x1f52 <USB_Event_Stub>
    196e:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
    1972:	84 ff       	sbrs	r24, 4
    1974:	2d c0       	rjmp	.+90     	; 0x19d0 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1976:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    197a:	84 ff       	sbrs	r24, 4
    197c:	29 c0       	rjmp	.+82     	; 0x19d0 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    197e:	80 e1       	ldi	r24, 0x10	; 16
    1980:	89 bd       	out	0x29, r24	; 41
    1982:	82 e1       	ldi	r24, 0x12	; 18
    1984:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1986:	09 b4       	in	r0, 0x29	; 41
    1988:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    198a:	fd cf       	rjmp	.-6      	; 0x1986 <__vector_10+0xd0>
    198c:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1990:	8f 7d       	andi	r24, 0xDF	; 223
    1992:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1996:	80 91 e1 00 	lds	r24, 0x00E1
    199a:	8f 7e       	andi	r24, 0xEF	; 239
    199c:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    19a0:	80 91 e2 00 	lds	r24, 0x00E2
    19a4:	8f 7e       	andi	r24, 0xEF	; 239
    19a6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    19aa:	80 91 e2 00 	lds	r24, 0x00E2
    19ae:	81 60       	ori	r24, 0x01	; 1
    19b0:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    19b4:	80 91 24 02 	lds	r24, 0x0224
    19b8:	81 11       	cpse	r24, r1
    19ba:	04 c0       	rjmp	.+8      	; 0x19c4 <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    19bc:	80 91 e3 00 	lds	r24, 0x00E3
    19c0:	87 ff       	sbrs	r24, 7
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <__vector_10+0x112>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    19c4:	84 e0       	ldi	r24, 0x04	; 4
    19c6:	01 c0       	rjmp	.+2      	; 0x19ca <__vector_10+0x114>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	80 93 28 02 	sts	0x0228, r24
    19ce:	c1 d2       	rcall	.+1410   	; 0x1f52 <USB_Event_Stub>
    19d0:	80 91 e1 00 	lds	r24, 0x00E1
    19d4:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    19d6:	22 c0       	rjmp	.+68     	; 0x1a1c <__vector_10+0x166>
    19d8:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    19dc:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    19de:	1e c0       	rjmp	.+60     	; 0x1a1c <__vector_10+0x166>
    19e0:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    19e4:	87 7f       	andi	r24, 0xF7	; 247
    19e6:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    19ea:	82 e0       	ldi	r24, 0x02	; 2
    19ec:	80 93 28 02 	sts	0x0228, r24
    19f0:	10 92 24 02 	sts	0x0224, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    19f4:	80 91 e1 00 	lds	r24, 0x00E1
    19f8:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
    19fa:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    19fe:	80 91 e2 00 	lds	r24, 0x00E2
    1a02:	8e 7f       	andi	r24, 0xFE	; 254
    1a04:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1a08:	80 91 e2 00 	lds	r24, 0x00E2
    1a0c:	80 61       	ori	r24, 0x10	; 16
    1a0e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1a12:	42 e0       	ldi	r20, 0x02	; 2
    1a14:	60 e0       	ldi	r22, 0x00	; 0
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	33 de       	rcall	.-922    	; 0x1680 <Endpoint_ConfigureEndpoint_Prv>
    1a1a:	9b d2       	rcall	.+1334   	; 0x1f52 <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1a1c:	ff 91       	pop	r31
    1a1e:	ef 91       	pop	r30
    1a20:	bf 91       	pop	r27
    1a22:	af 91       	pop	r26
    1a24:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1a26:	8f 91       	pop	r24
    1a28:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1a2a:	6f 91       	pop	r22
    1a2c:	5f 91       	pop	r21
    1a2e:	4f 91       	pop	r20
    1a30:	3f 91       	pop	r19
    1a32:	2f 91       	pop	r18
    1a34:	0f 90       	pop	r0
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	0f 90       	pop	r0
    1a3a:	1f 90       	pop	r1
    1a3c:	18 95       	reti

00001a3e <Endpoint_Write_Stream_LE>:

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1a3e:	cf 92       	push	r12
    1a40:	df 92       	push	r13
    1a42:	ef 92       	push	r14
    1a44:	ff 92       	push	r15
    1a46:	0f 93       	push	r16
    1a48:	1f 93       	push	r17
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	7c 01       	movw	r14, r24
    1a50:	8b 01       	movw	r16, r22
    1a52:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1a54:	a8 de       	rcall	.-688    	; 0x17a6 <Endpoint_WaitUntilReady>
    1a56:	81 11       	cpse	r24, r1
    1a58:	31 c0       	rjmp	.+98     	; 0x1abc <Endpoint_Write_Stream_LE+0x7e>
    1a5a:	20 97       	sbiw	r28, 0x00	; 0
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1a5c:	31 f0       	breq	.+12     	; 0x1a6a <Endpoint_Write_Stream_LE+0x2c>
    1a5e:	88 81       	ld	r24, Y
	{
		Length -= *BytesProcessed;
    1a60:	99 81       	ldd	r25, Y+1	; 0x01
    1a62:	08 1b       	sub	r16, r24
    1a64:	19 0b       	sbc	r17, r25
    1a66:	e8 0e       	add	r14, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1a68:	f9 1e       	adc	r15, r25
    1a6a:	c1 2c       	mov	r12, r1
// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1a6c:	d1 2c       	mov	r13, r1
    1a6e:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1a70:	11 05       	cpc	r17, r1
    1a72:	19 f1       	breq	.+70     	; 0x1aba <Endpoint_Write_Stream_LE+0x7c>
    1a74:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1a78:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1a7a:	14 c0       	rjmp	.+40     	; 0x1aa4 <Endpoint_Write_Stream_LE+0x66>
    1a7c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a80:	8e 77       	andi	r24, 0x7E	; 126
    1a82:	80 93 e8 00 	sts	0x00E8, r24
    1a86:	66 d2       	rcall	.+1228   	; 0x1f54 <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    1a88:	20 97       	sbiw	r28, 0x00	; 0
    1a8a:	41 f0       	breq	.+16     	; 0x1a9c <Endpoint_Write_Stream_LE+0x5e>
			#endif

			if (BytesProcessed != NULL)
    1a8c:	88 81       	ld	r24, Y
    1a8e:	99 81       	ldd	r25, Y+1	; 0x01
			{
				*BytesProcessed += BytesInTransfer;
    1a90:	8c 0d       	add	r24, r12
    1a92:	9d 1d       	adc	r25, r13
    1a94:	99 83       	std	Y+1, r25	; 0x01
    1a96:	88 83       	st	Y, r24
    1a98:	85 e0       	ldi	r24, 0x05	; 5
    1a9a:	10 c0       	rjmp	.+32     	; 0x1abc <Endpoint_Write_Stream_LE+0x7e>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1a9c:	84 de       	rcall	.-760    	; 0x17a6 <Endpoint_WaitUntilReady>
    1a9e:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1aa0:	31 f3       	breq	.-52     	; 0x1a6e <Endpoint_Write_Stream_LE+0x30>
    1aa2:	0c c0       	rjmp	.+24     	; 0x1abc <Endpoint_Write_Stream_LE+0x7e>
    1aa4:	f7 01       	movw	r30, r14
    1aa6:	81 91       	ld	r24, Z+
    1aa8:	7f 01       	movw	r14, r30
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1aaa:	80 93 f1 00 	sts	0x00F1, r24
    1aae:	01 50       	subi	r16, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1ab0:	11 09       	sbc	r17, r1
    1ab2:	ff ef       	ldi	r31, 0xFF	; 255
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1ab4:	cf 1a       	sub	r12, r31
    1ab6:	df 0a       	sbc	r13, r31
			BytesInTransfer++;
    1ab8:	da cf       	rjmp	.-76     	; 0x1a6e <Endpoint_Write_Stream_LE+0x30>
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	df 91       	pop	r29
    1abe:	cf 91       	pop	r28
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    1ac0:	1f 91       	pop	r17
}
    1ac2:	0f 91       	pop	r16
    1ac4:	ff 90       	pop	r15
    1ac6:	ef 90       	pop	r14
    1ac8:	df 90       	pop	r13
    1aca:	cf 90       	pop	r12
    1acc:	08 95       	ret

00001ace <Endpoint_Write_Control_Stream_LE>:
    1ace:	20 91 2f 02 	lds	r18, 0x022F
    1ad2:	30 91 30 02 	lds	r19, 0x0230
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1ad6:	26 17       	cp	r18, r22
    1ad8:	37 07       	cpc	r19, r23
    1ada:	48 f0       	brcs	.+18     	; 0x1aee <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1adc:	61 15       	cp	r22, r1
    1ade:	71 05       	cpc	r23, r1
    1ae0:	39 f4       	brne	.+14     	; 0x1af0 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ae2:	20 91 e8 00 	lds	r18, 0x00E8
    1ae6:	2e 77       	andi	r18, 0x7E	; 126
    1ae8:	20 93 e8 00 	sts	0x00E8, r18
    1aec:	01 c0       	rjmp	.+2      	; 0x1af0 <Endpoint_Write_Control_Stream_LE+0x22>
    1aee:	b9 01       	movw	r22, r18
    1af0:	fc 01       	movw	r30, r24
    1af2:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1af4:	61 15       	cp	r22, r1
    1af6:	71 05       	cpc	r23, r1
    1af8:	a9 f1       	breq	.+106    	; 0x1b64 <Endpoint_Write_Control_Stream_LE+0x96>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1afa:	80 91 28 02 	lds	r24, 0x0228

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1afe:	88 23       	and	r24, r24
    1b00:	e9 f1       	breq	.+122    	; 0x1b7c <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b02:	85 30       	cpi	r24, 0x05	; 5
    1b04:	e9 f1       	breq	.+122    	; 0x1b80 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b06:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1b0a:	83 fd       	sbrc	r24, 3
    1b0c:	35 c0       	rjmp	.+106    	; 0x1b78 <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b0e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1b12:	82 ff       	sbrs	r24, 2
    1b14:	06 c0       	rjmp	.+12     	; 0x1b22 <Endpoint_Write_Control_Stream_LE+0x54>
    1b16:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1b1a:	82 ff       	sbrs	r24, 2
    1b1c:	26 c0       	rjmp	.+76     	; 0x1b6a <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b22:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    1b26:	80 ff       	sbrs	r24, 0
    1b28:	e5 cf       	rjmp	.-54     	; 0x1af4 <Endpoint_Write_Control_Stream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1b2a:	20 91 f3 00 	lds	r18, 0x00F3
    1b2e:	80 91 f2 00 	lds	r24, 0x00F2
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1b36:	61 15       	cp	r22, r1
    1b38:	71 05       	cpc	r23, r1
    1b3a:	51 f0       	breq	.+20     	; 0x1b50 <Endpoint_Write_Control_Stream_LE+0x82>
    1b3c:	88 30       	cpi	r24, 0x08	; 8
    1b3e:	91 05       	cpc	r25, r1
    1b40:	38 f4       	brcc	.+14     	; 0x1b50 <Endpoint_Write_Control_Stream_LE+0x82>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1b42:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1b44:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1b48:	61 50       	subi	r22, 0x01	; 1
    1b4a:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1b4c:	01 96       	adiw	r24, 0x01	; 1
    1b4e:	f3 cf       	rjmp	.-26     	; 0x1b36 <Endpoint_Write_Control_Stream_LE+0x68>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1b50:	21 e0       	ldi	r18, 0x01	; 1
    1b52:	08 97       	sbiw	r24, 0x08	; 8
    1b54:	09 f0       	breq	.+2      	; 0x1b58 <Endpoint_Write_Control_Stream_LE+0x8a>
    1b56:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b58:	80 91 e8 00 	lds	r24, 0x00E8
    1b5c:	8e 77       	andi	r24, 0x7E	; 126
    1b5e:	80 93 e8 00 	sts	0x00E8, r24
    1b62:	c8 cf       	rjmp	.-112    	; 0x1af4 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1b64:	21 11       	cpse	r18, r1
    1b66:	c9 cf       	rjmp	.-110    	; 0x1afa <Endpoint_Write_Control_Stream_LE+0x2c>
    1b68:	d6 cf       	rjmp	.-84     	; 0x1b16 <Endpoint_Write_Control_Stream_LE+0x48>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b6a:	80 91 28 02 	lds	r24, 0x0228

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b6e:	88 23       	and	r24, r24
    1b70:	29 f0       	breq	.+10     	; 0x1b7c <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b72:	85 30       	cpi	r24, 0x05	; 5
    1b74:	81 f6       	brne	.-96     	; 0x1b16 <Endpoint_Write_Control_Stream_LE+0x48>
    1b76:	04 c0       	rjmp	.+8      	; 0x1b80 <Endpoint_Write_Control_Stream_LE+0xb2>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1b7c:	82 e0       	ldi	r24, 0x02	; 2
    1b7e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1b80:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1b82:	08 95       	ret

00001b84 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    1b84:	61 15       	cp	r22, r1
    1b86:	71 05       	cpc	r23, r1
    1b88:	29 f4       	brne	.+10     	; 0x1b94 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1b8a:	20 91 e8 00 	lds	r18, 0x00E8
    1b8e:	2b 77       	andi	r18, 0x7B	; 123
    1b90:	20 93 e8 00 	sts	0x00E8, r18
	  Endpoint_ClearOUT();

	while (Length)
    1b94:	61 15       	cp	r22, r1
    1b96:	71 05       	cpc	r23, r1
    1b98:	41 f1       	breq	.+80     	; 0x1bea <Endpoint_Read_Control_Stream_LE+0x66>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b9a:	20 91 28 02 	lds	r18, 0x0228

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b9e:	22 23       	and	r18, r18
    1ba0:	69 f1       	breq	.+90     	; 0x1bfc <Endpoint_Read_Control_Stream_LE+0x78>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1ba2:	25 30       	cpi	r18, 0x05	; 5
    1ba4:	69 f1       	breq	.+90     	; 0x1c00 <Endpoint_Read_Control_Stream_LE+0x7c>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1ba6:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1baa:	23 fd       	sbrc	r18, 3
    1bac:	23 c0       	rjmp	.+70     	; 0x1bf4 <Endpoint_Read_Control_Stream_LE+0x70>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1bae:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    1bb2:	22 ff       	sbrs	r18, 2
    1bb4:	f2 cf       	rjmp	.-28     	; 0x1b9a <Endpoint_Read_Control_Stream_LE+0x16>
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	cf 01       	movw	r24, r30
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1bba:	40 91 f3 00 	lds	r20, 0x00F3
    1bbe:	20 91 f2 00 	lds	r18, 0x00F2
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	34 2b       	or	r19, r20
		{
			while (Length && Endpoint_BytesInEndpoint())
    1bc6:	23 2b       	or	r18, r19
    1bc8:	01 f3       	breq	.-64     	; 0x1b8a <Endpoint_Read_Control_Stream_LE+0x6>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1bca:	80 91 f1 00 	lds	r24, 0x00F1
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1bce:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1bd0:	cf 01       	movw	r24, r30
				Length--;
    1bd2:	61 50       	subi	r22, 0x01	; 1
    1bd4:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    1bd6:	61 15       	cp	r22, r1
    1bd8:	71 05       	cpc	r23, r1
    1bda:	71 f7       	brne	.-36     	; 0x1bb8 <Endpoint_Read_Control_Stream_LE+0x34>
    1bdc:	d6 cf       	rjmp	.-84     	; 0x1b8a <Endpoint_Read_Control_Stream_LE+0x6>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1bde:	80 91 28 02 	lds	r24, 0x0228

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1be2:	88 23       	and	r24, r24
    1be4:	59 f0       	breq	.+22     	; 0x1bfc <Endpoint_Read_Control_Stream_LE+0x78>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1be6:	85 30       	cpi	r24, 0x05	; 5
    1be8:	59 f0       	breq	.+22     	; 0x1c00 <Endpoint_Read_Control_Stream_LE+0x7c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1bea:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    1bee:	80 ff       	sbrs	r24, 0
    1bf0:	f6 cf       	rjmp	.-20     	; 0x1bde <Endpoint_Read_Control_Stream_LE+0x5a>
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <Endpoint_Read_Control_Stream_LE+0x74>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1bfc:	82 e0       	ldi	r24, 0x02	; 2
    1bfe:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1c00:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1c02:	08 95       	ret

00001c04 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1c04:	20 91 2f 02 	lds	r18, 0x022F
    1c08:	30 91 30 02 	lds	r19, 0x0230
    1c0c:	26 17       	cp	r18, r22
    1c0e:	37 07       	cpc	r19, r23
    1c10:	48 f0       	brcs	.+18     	; 0x1c24 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1c12:	61 15       	cp	r22, r1
    1c14:	71 05       	cpc	r23, r1
    1c16:	39 f4       	brne	.+14     	; 0x1c26 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c18:	20 91 e8 00 	lds	r18, 0x00E8
    1c1c:	2e 77       	andi	r18, 0x7E	; 126
    1c1e:	20 93 e8 00 	sts	0x00E8, r18
    1c22:	01 c0       	rjmp	.+2      	; 0x1c26 <Endpoint_Write_Control_PStream_LE+0x22>
    1c24:	b9 01       	movw	r22, r18
    1c26:	fc 01       	movw	r30, r24
    1c28:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1c2a:	61 15       	cp	r22, r1
    1c2c:	71 05       	cpc	r23, r1
    1c2e:	c1 f1       	breq	.+112    	; 0x1ca0 <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1c30:	80 91 28 02 	lds	r24, 0x0228

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1c34:	88 23       	and	r24, r24
    1c36:	09 f4       	brne	.+2      	; 0x1c3a <Endpoint_Write_Control_PStream_LE+0x36>
    1c38:	3f c0       	rjmp	.+126    	; 0x1cb8 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1c3a:	85 30       	cpi	r24, 0x05	; 5
    1c3c:	09 f4       	brne	.+2      	; 0x1c40 <Endpoint_Write_Control_PStream_LE+0x3c>
    1c3e:	3e c0       	rjmp	.+124    	; 0x1cbc <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1c40:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1c44:	83 fd       	sbrc	r24, 3
    1c46:	36 c0       	rjmp	.+108    	; 0x1cb4 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c48:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1c4c:	82 ff       	sbrs	r24, 2
    1c4e:	06 c0       	rjmp	.+12     	; 0x1c5c <Endpoint_Write_Control_PStream_LE+0x58>
    1c50:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1c54:	82 ff       	sbrs	r24, 2
    1c56:	27 c0       	rjmp	.+78     	; 0x1ca6 <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c5c:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    1c60:	80 ff       	sbrs	r24, 0
    1c62:	e3 cf       	rjmp	.-58     	; 0x1c2a <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1c64:	20 91 f3 00 	lds	r18, 0x00F3
    1c68:	80 91 f2 00 	lds	r24, 0x00F2
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1c70:	61 15       	cp	r22, r1
    1c72:	71 05       	cpc	r23, r1
    1c74:	59 f0       	breq	.+22     	; 0x1c8c <Endpoint_Write_Control_PStream_LE+0x88>
    1c76:	88 30       	cpi	r24, 0x08	; 8
    1c78:	91 05       	cpc	r25, r1
    1c7a:	40 f4       	brcc	.+16     	; 0x1c8c <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1c7c:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1c7e:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1c82:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1c84:	61 50       	subi	r22, 0x01	; 1
    1c86:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1c88:	01 96       	adiw	r24, 0x01	; 1
    1c8a:	f2 cf       	rjmp	.-28     	; 0x1c70 <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1c8c:	21 e0       	ldi	r18, 0x01	; 1
    1c8e:	08 97       	sbiw	r24, 0x08	; 8
    1c90:	09 f0       	breq	.+2      	; 0x1c94 <Endpoint_Write_Control_PStream_LE+0x90>
    1c92:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c94:	80 91 e8 00 	lds	r24, 0x00E8
    1c98:	8e 77       	andi	r24, 0x7E	; 126
    1c9a:	80 93 e8 00 	sts	0x00E8, r24
    1c9e:	c5 cf       	rjmp	.-118    	; 0x1c2a <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1ca0:	21 11       	cpse	r18, r1
    1ca2:	c6 cf       	rjmp	.-116    	; 0x1c30 <Endpoint_Write_Control_PStream_LE+0x2c>
    1ca4:	d5 cf       	rjmp	.-86     	; 0x1c50 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1ca6:	80 91 28 02 	lds	r24, 0x0228

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1caa:	88 23       	and	r24, r24
    1cac:	29 f0       	breq	.+10     	; 0x1cb8 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1cae:	85 30       	cpi	r24, 0x05	; 5
    1cb0:	79 f6       	brne	.-98     	; 0x1c50 <Endpoint_Write_Control_PStream_LE+0x4c>
    1cb2:	04 c0       	rjmp	.+8      	; 0x1cbc <Endpoint_Write_Control_PStream_LE+0xb8>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1cb8:	82 e0       	ldi	r24, 0x02	; 2
    1cba:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1cbc:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1cbe:	08 95       	ret

00001cc0 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1cc0:	0f 93       	push	r16
    1cc2:	1f 93       	push	r17
    1cc4:	cf 93       	push	r28
    1cc6:	df 93       	push	r29
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    1ccc:	aa 97       	sbiw	r28, 0x2a	; 42
    1cce:	0f b6       	in	r0, 0x3f	; 63
    1cd0:	f8 94       	cli
    1cd2:	de bf       	out	0x3e, r29	; 62
    1cd4:	0f be       	out	0x3f, r0	; 63
    1cd6:	cd bf       	out	0x3d, r28	; 61
    1cd8:	e9 e2       	ldi	r30, 0x29	; 41
    1cda:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1cdc:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1ce0:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1ce2:	22 e0       	ldi	r18, 0x02	; 2
    1ce4:	e1 33       	cpi	r30, 0x31	; 49
    1ce6:	f2 07       	cpc	r31, r18
    1ce8:	c9 f7       	brne	.-14     	; 0x1cdc <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1cea:	21 d8       	rcall	.-4030   	; 0xd2e <EVENT_USB_Device_ControlRequest>
    1cec:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1cf0:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
    1cf2:	16 c1       	rjmp	.+556    	; 0x1f20 <USB_Device_ProcessControlRequest+0x260>
    1cf4:	20 91 29 02 	lds	r18, 0x0229
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1cf8:	30 91 2a 02 	lds	r19, 0x022A

		switch (USB_ControlRequest.bRequest)
    1cfc:	83 2f       	mov	r24, r19
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	8a 30       	cpi	r24, 0x0A	; 10
    1d02:	91 05       	cpc	r25, r1
    1d04:	08 f0       	brcs	.+2      	; 0x1d08 <USB_Device_ProcessControlRequest+0x48>
    1d06:	0c c1       	rjmp	.+536    	; 0x1f20 <USB_Device_ProcessControlRequest+0x260>
    1d08:	fc 01       	movw	r30, r24
    1d0a:	e1 5a       	subi	r30, 0xA1	; 161
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0e:	3f c3       	rjmp	.+1662   	; 0x238e <__tablejump2__>
    1d10:	20 38       	cpi	r18, 0x80	; 128
    1d12:	81 f0       	breq	.+32     	; 0x1d34 <USB_Device_ProcessControlRequest+0x74>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1d14:	22 38       	cpi	r18, 0x82	; 130
    1d16:	09 f0       	breq	.+2      	; 0x1d1a <USB_Device_ProcessControlRequest+0x5a>
    1d18:	03 c1       	rjmp	.+518    	; 0x1f20 <USB_Device_ProcessControlRequest+0x260>
    1d1a:	80 91 2d 02 	lds	r24, 0x022D
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d1e:	8f 70       	andi	r24, 0x0F	; 15
    1d20:	80 93 e9 00 	sts	0x00E9, r24
    1d24:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1d28:	85 fb       	bst	r24, 5
    1d2a:	88 27       	eor	r24, r24
    1d2c:	80 f9       	bld	r24, 0
    1d2e:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d32:	06 c0       	rjmp	.+12     	; 0x1d40 <USB_Device_ProcessControlRequest+0x80>
    1d34:	80 91 25 02 	lds	r24, 0x0225
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1d38:	90 91 26 02 	lds	r25, 0x0226
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1d3c:	91 11       	cpse	r25, r1
    1d3e:	82 60       	ori	r24, 0x02	; 2
    1d40:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d44:	97 7f       	andi	r25, 0xF7	; 247
    1d46:	90 93 e8 00 	sts	0x00E8, r25
    1d4a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1d4e:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
    1d52:	c2 c0       	rjmp	.+388    	; 0x1ed8 <USB_Device_ProcessControlRequest+0x218>
    1d54:	82 2f       	mov	r24, r18
    1d56:	8d 7f       	andi	r24, 0xFD	; 253
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1d58:	09 f0       	breq	.+2      	; 0x1d5c <USB_Device_ProcessControlRequest+0x9c>
    1d5a:	e2 c0       	rjmp	.+452    	; 0x1f20 <USB_Device_ProcessControlRequest+0x260>
    1d5c:	22 23       	and	r18, r18
    1d5e:	19 f0       	breq	.+6      	; 0x1d66 <USB_Device_ProcessControlRequest+0xa6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1d60:	22 30       	cpi	r18, 0x02	; 2
    1d62:	61 f0       	breq	.+24     	; 0x1d7c <USB_Device_ProcessControlRequest+0xbc>
    1d64:	dd c0       	rjmp	.+442    	; 0x1f20 <USB_Device_ProcessControlRequest+0x260>
    1d66:	80 91 2b 02 	lds	r24, 0x022B
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1d6a:	81 30       	cpi	r24, 0x01	; 1
    1d6c:	09 f0       	breq	.+2      	; 0x1d70 <USB_Device_ProcessControlRequest+0xb0>
    1d6e:	d8 c0       	rjmp	.+432    	; 0x1f20 <USB_Device_ProcessControlRequest+0x260>
    1d70:	33 30       	cpi	r19, 0x03	; 3
    1d72:	09 f0       	breq	.+2      	; 0x1d76 <USB_Device_ProcessControlRequest+0xb6>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	80 93 26 02 	sts	0x0226, r24
    1d7a:	28 c0       	rjmp	.+80     	; 0x1dcc <USB_Device_ProcessControlRequest+0x10c>
    1d7c:	80 91 2b 02 	lds	r24, 0x022B

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1d80:	81 11       	cpse	r24, r1
    1d82:	24 c0       	rjmp	.+72     	; 0x1dcc <USB_Device_ProcessControlRequest+0x10c>
    1d84:	20 91 2d 02 	lds	r18, 0x022D
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1d88:	2f 70       	andi	r18, 0x0F	; 15
    1d8a:	09 f4       	brne	.+2      	; 0x1d8e <USB_Device_ProcessControlRequest+0xce>
    1d8c:	c9 c0       	rjmp	.+402    	; 0x1f20 <USB_Device_ProcessControlRequest+0x260>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1d8e:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d92:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1d96:	80 ff       	sbrs	r24, 0
    1d98:	19 c0       	rjmp	.+50     	; 0x1dcc <USB_Device_ProcessControlRequest+0x10c>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1d9a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1d9e:	33 30       	cpi	r19, 0x03	; 3
    1da0:	11 f4       	brne	.+4      	; 0x1da6 <USB_Device_ProcessControlRequest+0xe6>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1da2:	80 62       	ori	r24, 0x20	; 32
    1da4:	11 c0       	rjmp	.+34     	; 0x1dc8 <USB_Device_ProcessControlRequest+0x108>
    1da6:	80 61       	ori	r24, 0x10	; 16
    1da8:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1db0:	02 2e       	mov	r0, r18
    1db2:	01 c0       	rjmp	.+2      	; 0x1db6 <USB_Device_ProcessControlRequest+0xf6>
    1db4:	88 0f       	add	r24, r24
    1db6:	0a 94       	dec	r0
    1db8:	ea f7       	brpl	.-6      	; 0x1db4 <USB_Device_ProcessControlRequest+0xf4>
    1dba:	80 93 ea 00 	sts	0x00EA, r24
    1dbe:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    1dc2:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1dc6:	88 60       	ori	r24, 0x08	; 8
    1dc8:	80 93 eb 00 	sts	0x00EB, r24
    1dcc:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1dd0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1dd4:	87 7f       	andi	r24, 0xF7	; 247
    1dd6:	83 c0       	rjmp	.+262    	; 0x1ede <USB_Device_ProcessControlRequest+0x21e>
    1dd8:	21 11       	cpse	r18, r1
    1dda:	a2 c0       	rjmp	.+324    	; 0x1f20 <USB_Device_ProcessControlRequest+0x260>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1ddc:	10 91 2b 02 	lds	r17, 0x022B
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    1de0:	1f 77       	andi	r17, 0x7F	; 127
    1de2:	0f b7       	in	r16, 0x3f	; 63
    1de4:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1de6:	80 91 e8 00 	lds	r24, 0x00E8
    1dea:	87 7f       	andi	r24, 0xF7	; 247
    1dec:	80 93 e8 00 	sts	0x00E8, r24
    1df0:	b9 dc       	rcall	.-1678   	; 0x1764 <Endpoint_ClearStatusStage>
    1df2:	80 91 e8 00 	lds	r24, 0x00E8
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1df6:	80 ff       	sbrs	r24, 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1df8:	fc cf       	rjmp	.-8      	; 0x1df2 <USB_Device_ProcessControlRequest+0x132>
    1dfa:	80 91 e3 00 	lds	r24, 0x00E3

	while (!(Endpoint_IsINReady()));
    1dfe:	80 78       	andi	r24, 0x80	; 128
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1e00:	81 2b       	or	r24, r17
    1e02:	80 93 e3 00 	sts	0x00E3, r24
    1e06:	80 68       	ori	r24, 0x80	; 128

				UDADDR = Temp;
    1e08:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    1e0c:	11 23       	and	r17, r17
    1e0e:	11 f0       	breq	.+4      	; 0x1e14 <USB_Device_ProcessControlRequest+0x154>
    1e10:	83 e0       	ldi	r24, 0x03	; 3

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1e12:	01 c0       	rjmp	.+2      	; 0x1e16 <USB_Device_ProcessControlRequest+0x156>
    1e14:	82 e0       	ldi	r24, 0x02	; 2
    1e16:	80 93 28 02 	sts	0x0228, r24
    1e1a:	0f bf       	out	0x3f, r16	; 63
    1e1c:	81 c0       	rjmp	.+258    	; 0x1f20 <USB_Device_ProcessControlRequest+0x260>
    1e1e:	20 58       	subi	r18, 0x80	; 128
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1e20:	22 30       	cpi	r18, 0x02	; 2
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
    1e22:	08 f0       	brcs	.+2      	; 0x1e26 <USB_Device_ProcessControlRequest+0x166>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e24:	7d c0       	rjmp	.+250    	; 0x1f20 <USB_Device_ProcessControlRequest+0x260>
    1e26:	80 91 2b 02 	lds	r24, 0x022B
    1e2a:	90 91 2c 02 	lds	r25, 0x022C
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1e2e:	8c 3d       	cpi	r24, 0xDC	; 220
    1e30:	23 e0       	ldi	r18, 0x03	; 3
    1e32:	92 07       	cpc	r25, r18
    1e34:	71 f5       	brne	.+92     	; 0x1e92 <USB_Device_ProcessControlRequest+0x1d2>
    1e36:	83 e0       	ldi	r24, 0x03	; 3
    1e38:	8a 83       	std	Y+2, r24	; 0x02
    1e3a:	8a e2       	ldi	r24, 0x2A	; 42
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1e3c:	89 83       	std	Y+1, r24	; 0x01
    1e3e:	4f b7       	in	r20, 0x3f	; 63
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1e40:	f8 94       	cli
    1e42:	de 01       	movw	r26, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1e44:	13 96       	adiw	r26, 0x03	; 3
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1e46:	20 e0       	ldi	r18, 0x00	; 0
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1e48:	3e e0       	ldi	r19, 0x0E	; 14
    1e4a:	51 e2       	ldi	r21, 0x21	; 33
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1e4c:	e3 2f       	mov	r30, r19
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1e50:	50 93 57 00 	sts	0x0057, r21
    1e54:	e4 91       	lpm	r30, Z
    1e56:	20 ff       	sbrs	r18, 0
    1e58:	03 c0       	rjmp	.+6      	; 0x1e60 <USB_Device_ProcessControlRequest+0x1a0>
    1e5a:	e2 95       	swap	r30

					if (SerialCharNum & 0x01)
    1e5c:	ef 70       	andi	r30, 0x0F	; 15
    1e5e:	3f 5f       	subi	r19, 0xFF	; 255
					{
						SerialByte >>= 4;
    1e60:	ef 70       	andi	r30, 0x0F	; 15
    1e62:	8e 2f       	mov	r24, r30
						SigReadAddress++;
    1e64:	90 e0       	ldi	r25, 0x00	; 0
					}

					SerialByte &= 0x0F;
    1e66:	ea 30       	cpi	r30, 0x0A	; 10
    1e68:	10 f0       	brcs	.+4      	; 0x1e6e <USB_Device_ProcessControlRequest+0x1ae>
    1e6a:	c7 96       	adiw	r24, 0x37	; 55

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1e6c:	01 c0       	rjmp	.+2      	; 0x1e70 <USB_Device_ProcessControlRequest+0x1b0>
    1e6e:	c0 96       	adiw	r24, 0x30	; 48
    1e70:	8d 93       	st	X+, r24
    1e72:	9d 93       	st	X+, r25
    1e74:	2f 5f       	subi	r18, 0xFF	; 255
    1e76:	24 31       	cpi	r18, 0x14	; 20
    1e78:	49 f7       	brne	.-46     	; 0x1e4c <USB_Device_ProcessControlRequest+0x18c>
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1e7a:	4f bf       	out	0x3f, r20	; 63
    1e7c:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1e80:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e82:	80 93 e8 00 	sts	0x00E8, r24
    1e86:	6a e2       	ldi	r22, 0x2A	; 42
    1e88:	70 e0       	ldi	r23, 0x00	; 0
    1e8a:	ce 01       	movw	r24, r28

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1e8c:	01 96       	adiw	r24, 0x01	; 1
    1e8e:	1f de       	rcall	.-962    	; 0x1ace <Endpoint_Write_Control_Stream_LE>
    1e90:	12 c0       	rjmp	.+36     	; 0x1eb6 <USB_Device_ProcessControlRequest+0x1f6>
    1e92:	ae 01       	movw	r20, r28
    1e94:	4f 5f       	subi	r20, 0xFF	; 255
    1e96:	5f 4f       	sbci	r21, 0xFF	; 255
    1e98:	60 91 2d 02 	lds	r22, 0x022D
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1e9c:	56 d8       	rcall	.-3924   	; 0xf4a <CALLBACK_USB_GetDescriptor>
    1e9e:	00 97       	sbiw	r24, 0x00	; 0
    1ea0:	09 f4       	brne	.+2      	; 0x1ea4 <USB_Device_ProcessControlRequest+0x1e4>
    1ea2:	3e c0       	rjmp	.+124    	; 0x1f20 <USB_Device_ProcessControlRequest+0x260>
    1ea4:	20 91 e8 00 	lds	r18, 0x00E8
    1ea8:	27 7f       	andi	r18, 0xF7	; 247
    1eaa:	20 93 e8 00 	sts	0x00E8, r18
    1eae:	bc 01       	movw	r22, r24
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb4:	a7 de       	rcall	.-690    	; 0x1c04 <Endpoint_Write_Control_PStream_LE>
    1eb6:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1eba:	8b 77       	andi	r24, 0x7B	; 123
    1ebc:	80 93 e8 00 	sts	0x00E8, r24
    1ec0:	2f c0       	rjmp	.+94     	; 0x1f20 <USB_Device_ProcessControlRequest+0x260>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1ec2:	20 38       	cpi	r18, 0x80	; 128
    1ec4:	69 f5       	brne	.+90     	; 0x1f20 <USB_Device_ProcessControlRequest+0x260>
    1ec6:	80 91 e8 00 	lds	r24, 0x00E8
    1eca:	87 7f       	andi	r24, 0xF7	; 247
    1ecc:	80 93 e8 00 	sts	0x00E8, r24
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1ed0:	80 91 24 02 	lds	r24, 0x0224
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ed4:	80 93 f1 00 	sts	0x00F1, r24
    1ed8:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1edc:	8e 77       	andi	r24, 0x7E	; 126
    1ede:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1ee2:	40 dc       	rcall	.-1920   	; 0x1764 <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ee4:	1d c0       	rjmp	.+58     	; 0x1f20 <USB_Device_ProcessControlRequest+0x260>
    1ee6:	21 11       	cpse	r18, r1
    1ee8:	1b c0       	rjmp	.+54     	; 0x1f20 <USB_Device_ProcessControlRequest+0x260>
    1eea:	90 91 2b 02 	lds	r25, 0x022B
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1eee:	92 30       	cpi	r25, 0x02	; 2
    1ef0:	b8 f4       	brcc	.+46     	; 0x1f20 <USB_Device_ProcessControlRequest+0x260>
    1ef2:	80 91 e8 00 	lds	r24, 0x00E8
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1ef6:	87 7f       	andi	r24, 0xF7	; 247
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1ef8:	80 93 e8 00 	sts	0x00E8, r24
    1efc:	90 93 24 02 	sts	0x0224, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f00:	31 dc       	rcall	.-1950   	; 0x1764 <Endpoint_ClearStatusStage>
    1f02:	80 91 24 02 	lds	r24, 0x0224
    1f06:	81 11       	cpse	r24, r1
    1f08:	04 c0       	rjmp	.+8      	; 0x1f12 <USB_Device_ProcessControlRequest+0x252>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1f0a:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
    1f0e:	87 ff       	sbrs	r24, 7
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <USB_Device_ProcessControlRequest+0x256>

	if (USB_Device_ConfigurationNumber)
    1f12:	84 e0       	ldi	r24, 0x04	; 4
    1f14:	01 c0       	rjmp	.+2      	; 0x1f18 <USB_Device_ProcessControlRequest+0x258>
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	80 93 28 02 	sts	0x0228, r24
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1f1c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1f20:	80 91 e8 00 	lds	r24, 0x00E8
    1f24:	83 ff       	sbrs	r24, 3
    1f26:	0a c0       	rjmp	.+20     	; 0x1f3c <USB_Device_ProcessControlRequest+0x27c>
    1f28:	80 91 eb 00 	lds	r24, 0x00EB

	EVENT_USB_Device_ConfigurationChanged();
    1f2c:	80 62       	ori	r24, 0x20	; 32
    1f2e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1f32:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1f36:	87 7f       	andi	r24, 0xF7	; 247
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1f38:	80 93 e8 00 	sts	0x00E8, r24
    1f3c:	aa 96       	adiw	r28, 0x2a	; 42
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f42:	de bf       	out	0x3e, r29	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	cd bf       	out	0x3d, r28	; 61
    1f48:	df 91       	pop	r29
    1f4a:	cf 91       	pop	r28
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    1f4c:	1f 91       	pop	r17
    1f4e:	0f 91       	pop	r16
    1f50:	08 95       	ret

00001f52 <USB_Event_Stub>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

// cppcheck-suppress unusedFunction
void USB_Event_Stub(void)
{
    1f52:	08 95       	ret

00001f54 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1f54:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    1f56:	80 91 28 02 	lds	r24, 0x0228
    1f5a:	88 23       	and	r24, r24
    1f5c:	a9 f0       	breq	.+42     	; 0x1f88 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1f5e:	80 91 e9 00 	lds	r24, 0x00E9
    1f62:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1f64:	90 91 ec 00 	lds	r25, 0x00EC
    1f68:	90 ff       	sbrs	r25, 0
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <USB_USBTask+0x1c>
    1f6c:	90 e8       	ldi	r25, 0x80	; 128
    1f6e:	01 c0       	rjmp	.+2      	; 0x1f72 <USB_USBTask+0x1e>
    1f70:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1f72:	c9 2f       	mov	r28, r25
    1f74:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f76:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1f7a:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    1f7e:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
    1f80:	9f de       	rcall	.-706    	; 0x1cc0 <USB_Device_ProcessControlRequest>
    1f82:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f84:	c0 93 e9 00 	sts	0x00E9, r28
    1f88:	cf 91       	pop	r28
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
    1f8a:	08 95       	ret

00001f8c <HID_Device_ProcessControlRequest>:
    1f8c:	6f 92       	push	r6
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1f8e:	7f 92       	push	r7
    1f90:	8f 92       	push	r8
    1f92:	9f 92       	push	r9
    1f94:	af 92       	push	r10
    1f96:	bf 92       	push	r11
    1f98:	cf 92       	push	r12
    1f9a:	df 92       	push	r13
    1f9c:	ef 92       	push	r14
    1f9e:	ff 92       	push	r15
    1fa0:	0f 93       	push	r16
    1fa2:	1f 93       	push	r17
    1fa4:	cf 93       	push	r28
    1fa6:	df 93       	push	r29
    1fa8:	00 d0       	rcall	.+0      	; 0x1faa <HID_Device_ProcessControlRequest+0x1e>
    1faa:	1f 92       	push	r1
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
    1fb0:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1fb2:	ad b6       	in	r10, 0x3d	; 61
    1fb4:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1fb6:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    1fba:	83 ff       	sbrs	r24, 3
    1fbc:	00 c1       	rjmp	.+512    	; 0x21be <HID_Device_ProcessControlRequest+0x232>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    1fbe:	f7 01       	movw	r30, r14
    1fc0:	80 81       	ld	r24, Z
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	20 91 2d 02 	lds	r18, 0x022D
    1fc8:	30 91 2e 02 	lds	r19, 0x022E
    1fcc:	28 17       	cp	r18, r24
    1fce:	39 07       	cpc	r19, r25
    1fd0:	09 f0       	breq	.+2      	; 0x1fd4 <HID_Device_ProcessControlRequest+0x48>
    1fd2:	f5 c0       	rjmp	.+490    	; 0x21be <HID_Device_ProcessControlRequest+0x232>
	  return;

	switch (USB_ControlRequest.bRequest)
    1fd4:	80 91 2a 02 	lds	r24, 0x022A
    1fd8:	83 30       	cpi	r24, 0x03	; 3
    1fda:	09 f4       	brne	.+2      	; 0x1fde <HID_Device_ProcessControlRequest+0x52>
    1fdc:	97 c0       	rjmp	.+302    	; 0x210c <HID_Device_ProcessControlRequest+0x180>
    1fde:	30 f4       	brcc	.+12     	; 0x1fec <HID_Device_ProcessControlRequest+0x60>
    1fe0:	81 30       	cpi	r24, 0x01	; 1
    1fe2:	71 f0       	breq	.+28     	; 0x2000 <HID_Device_ProcessControlRequest+0x74>
    1fe4:	82 30       	cpi	r24, 0x02	; 2
    1fe6:	09 f4       	brne	.+2      	; 0x1fea <HID_Device_ProcessControlRequest+0x5e>
    1fe8:	ce c0       	rjmp	.+412    	; 0x2186 <HID_Device_ProcessControlRequest+0x1fa>
    1fea:	e9 c0       	rjmp	.+466    	; 0x21be <HID_Device_ProcessControlRequest+0x232>
    1fec:	8a 30       	cpi	r24, 0x0A	; 10
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <HID_Device_ProcessControlRequest+0x66>
    1ff0:	b2 c0       	rjmp	.+356    	; 0x2156 <HID_Device_ProcessControlRequest+0x1ca>
    1ff2:	8b 30       	cpi	r24, 0x0B	; 11
    1ff4:	09 f4       	brne	.+2      	; 0x1ff8 <HID_Device_ProcessControlRequest+0x6c>
    1ff6:	9b c0       	rjmp	.+310    	; 0x212e <HID_Device_ProcessControlRequest+0x1a2>
    1ff8:	89 30       	cpi	r24, 0x09	; 9
    1ffa:	09 f0       	breq	.+2      	; 0x1ffe <HID_Device_ProcessControlRequest+0x72>
    1ffc:	e0 c0       	rjmp	.+448    	; 0x21be <HID_Device_ProcessControlRequest+0x232>
    1ffe:	48 c0       	rjmp	.+144    	; 0x2090 <HID_Device_ProcessControlRequest+0x104>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    2000:	80 91 29 02 	lds	r24, 0x0229
    2004:	81 3a       	cpi	r24, 0xA1	; 161
    2006:	09 f0       	breq	.+2      	; 0x200a <HID_Device_ProcessControlRequest+0x7e>
    2008:	da c0       	rjmp	.+436    	; 0x21be <HID_Device_ProcessControlRequest+0x232>
    200a:	8d b6       	in	r8, 0x3d	; 61
    200c:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    200e:	1a 82       	std	Y+2, r1	; 0x02
    2010:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    2012:	80 91 2b 02 	lds	r24, 0x022B
    2016:	10 91 2c 02 	lds	r17, 0x022C
    201a:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    201c:	f7 01       	movw	r30, r14
    201e:	40 85       	ldd	r20, Z+8	; 0x08
    2020:	50 e0       	ldi	r21, 0x00	; 0
    2022:	8d b7       	in	r24, 0x3d	; 61
    2024:	9e b7       	in	r25, 0x3e	; 62
    2026:	84 1b       	sub	r24, r20
    2028:	95 0b       	sbc	r25, r21
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	9e bf       	out	0x3e, r25	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	8d bf       	out	0x3d, r24	; 61
    2034:	ed b7       	in	r30, 0x3d	; 61
    2036:	fe b7       	in	r31, 0x3e	; 62
    2038:	31 96       	adiw	r30, 0x01	; 1
    203a:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
    203c:	60 e0       	ldi	r22, 0x00	; 0
    203e:	70 e0       	ldi	r23, 0x00	; 0
    2040:	cf 01       	movw	r24, r30
    2042:	2c d5       	rcall	.+2648   	; 0x2a9c <memset>
    2044:	4f ef       	ldi	r20, 0xFF	; 255
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    2046:	41 0f       	add	r20, r17
    2048:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    204a:	0f 5f       	subi	r16, 0xFF	; 255
    204c:	1f 4f       	sbci	r17, 0xFF	; 255
    204e:	96 01       	movw	r18, r12
    2050:	be 01       	movw	r22, r28
    2052:	6d 5f       	subi	r22, 0xFD	; 253
    2054:	7f 4f       	sbci	r23, 0xFF	; 255
    2056:	c7 01       	movw	r24, r14
    2058:	0e 94 a7 06 	call	0xd4e	; 0xd4e <CALLBACK_HID_Device_CreateHIDReport>
    205c:	f7 01       	movw	r30, r14

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    205e:	86 81       	ldd	r24, Z+6	; 0x06
    2060:	97 81       	ldd	r25, Z+7	; 0x07
    2062:	00 97       	sbiw	r24, 0x00	; 0
    2064:	21 f0       	breq	.+8      	; 0x206e <HID_Device_ProcessControlRequest+0xe2>
    2066:	40 85       	ldd	r20, Z+8	; 0x08
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    2068:	50 e0       	ldi	r21, 0x00	; 0
    206a:	b6 01       	movw	r22, r12
    206c:	0e d5       	rcall	.+2588   	; 0x2a8a <memcpy>
    206e:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2072:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2076:	87 7f       	andi	r24, 0xF7	; 247
    2078:	80 93 e8 00 	sts	0x00E8, r24
    207c:	69 81       	ldd	r22, Y+1	; 0x01
    207e:	7a 81       	ldd	r23, Y+2	; 0x02
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    2080:	c6 01       	movw	r24, r12
    2082:	25 dd       	rcall	.-1462   	; 0x1ace <Endpoint_Write_Control_Stream_LE>
    2084:	80 91 e8 00 	lds	r24, 0x00E8
    2088:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    208a:	80 93 e8 00 	sts	0x00E8, r24
    208e:	38 c0       	rjmp	.+112    	; 0x2100 <HID_Device_ProcessControlRequest+0x174>
    2090:	80 91 29 02 	lds	r24, 0x0229
    2094:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2096:	09 f0       	breq	.+2      	; 0x209a <HID_Device_ProcessControlRequest+0x10e>
    2098:	92 c0       	rjmp	.+292    	; 0x21be <HID_Device_ProcessControlRequest+0x232>
    209a:	8d b6       	in	r8, 0x3d	; 61
    209c:	9e b6       	in	r9, 0x3e	; 62
    209e:	00 91 2f 02 	lds	r16, 0x022F
    20a2:	10 91 30 02 	lds	r17, 0x0230
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    20a6:	70 90 2b 02 	lds	r7, 0x022B
    20aa:	60 90 2c 02 	lds	r6, 0x022C
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    20ae:	8d b7       	in	r24, 0x3d	; 61
    20b0:	9e b7       	in	r25, 0x3e	; 62
    20b2:	80 1b       	sub	r24, r16
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    20b4:	91 0b       	sbc	r25, r17
    20b6:	0f b6       	in	r0, 0x3f	; 63
    20b8:	f8 94       	cli
    20ba:	9e bf       	out	0x3e, r25	; 62
    20bc:	0f be       	out	0x3f, r0	; 63
    20be:	8d bf       	out	0x3d, r24	; 61
    20c0:	ed b7       	in	r30, 0x3d	; 61
    20c2:	fe b7       	in	r31, 0x3e	; 62
    20c4:	31 96       	adiw	r30, 0x01	; 1
    20c6:	6f 01       	movw	r12, r30
    20c8:	80 91 e8 00 	lds	r24, 0x00E8
    20cc:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20ce:	80 93 e8 00 	sts	0x00E8, r24
    20d2:	b8 01       	movw	r22, r16
    20d4:	cf 01       	movw	r24, r30
    20d6:	56 dd       	rcall	.-1364   	; 0x1b84 <Endpoint_Read_Control_Stream_LE>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    20d8:	80 91 e8 00 	lds	r24, 0x00E8
    20dc:	8e 77       	andi	r24, 0x7E	; 126
    20de:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20e2:	21 e0       	ldi	r18, 0x01	; 1
    20e4:	71 10       	cpse	r7, r1
    20e6:	01 c0       	rjmp	.+2      	; 0x20ea <HID_Device_ProcessControlRequest+0x15e>
    20e8:	20 e0       	ldi	r18, 0x00	; 0
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	02 1b       	sub	r16, r18
    20ee:	13 0b       	sbc	r17, r19
    20f0:	2c 0d       	add	r18, r12
    20f2:	3d 1d       	adc	r19, r13
    20f4:	4f ef       	ldi	r20, 0xFF	; 255
    20f6:	46 0d       	add	r20, r6
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    20f8:	67 2d       	mov	r22, r7
    20fa:	c7 01       	movw	r24, r14
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    20fc:	0e 94 d3 06 	call	0xda6	; 0xda6 <CALLBACK_HID_Device_ProcessHIDReport>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    2100:	0f b6       	in	r0, 0x3f	; 63
    2102:	f8 94       	cli
    2104:	9e be       	out	0x3e, r9	; 62
    2106:	0f be       	out	0x3f, r0	; 63
    2108:	8d be       	out	0x3d, r8	; 61
    210a:	59 c0       	rjmp	.+178    	; 0x21be <HID_Device_ProcessControlRequest+0x232>
    210c:	80 91 29 02 	lds	r24, 0x0229
    2110:	81 3a       	cpi	r24, 0xA1	; 161
    2112:	09 f0       	breq	.+2      	; 0x2116 <HID_Device_ProcessControlRequest+0x18a>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    2114:	54 c0       	rjmp	.+168    	; 0x21be <HID_Device_ProcessControlRequest+0x232>
    2116:	80 91 e8 00 	lds	r24, 0x00E8
    211a:	87 7f       	andi	r24, 0xF7	; 247
    211c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2120:	80 91 e8 00 	lds	r24, 0x00E8
    2124:	80 ff       	sbrs	r24, 0
    2126:	fc cf       	rjmp	.-8      	; 0x2120 <HID_Device_ProcessControlRequest+0x194>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2128:	f7 01       	movw	r30, r14
    212a:	81 85       	ldd	r24, Z+9	; 0x09
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    212c:	40 c0       	rjmp	.+128    	; 0x21ae <HID_Device_ProcessControlRequest+0x222>
    212e:	80 91 29 02 	lds	r24, 0x0229
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    2132:	81 32       	cpi	r24, 0x21	; 33
    2134:	09 f0       	breq	.+2      	; 0x2138 <HID_Device_ProcessControlRequest+0x1ac>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2136:	43 c0       	rjmp	.+134    	; 0x21be <HID_Device_ProcessControlRequest+0x232>
    2138:	80 91 e8 00 	lds	r24, 0x00E8
    213c:	87 7f       	andi	r24, 0xF7	; 247
    213e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2142:	10 db       	rcall	.-2528   	; 0x1764 <Endpoint_ClearStatusStage>
    2144:	90 91 2b 02 	lds	r25, 0x022B
    2148:	81 e0       	ldi	r24, 0x01	; 1
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    214a:	91 11       	cpse	r25, r1
    214c:	01 c0       	rjmp	.+2      	; 0x2150 <HID_Device_ProcessControlRequest+0x1c4>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	f7 01       	movw	r30, r14
    2152:	81 87       	std	Z+9, r24	; 0x09
    2154:	34 c0       	rjmp	.+104    	; 0x21be <HID_Device_ProcessControlRequest+0x232>
    2156:	80 91 29 02 	lds	r24, 0x0229
    215a:	81 32       	cpi	r24, 0x21	; 33
    215c:	81 f5       	brne	.+96     	; 0x21be <HID_Device_ProcessControlRequest+0x232>
    215e:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2162:	87 7f       	andi	r24, 0xF7	; 247
    2164:	80 93 e8 00 	sts	0x00E8, r24
    2168:	fd da       	rcall	.-2566   	; 0x1764 <Endpoint_ClearStatusStage>
    216a:	80 91 2b 02 	lds	r24, 0x022B
    216e:	90 91 2c 02 	lds	r25, 0x022C
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2172:	88 27       	eor	r24, r24
    2174:	36 e0       	ldi	r19, 0x06	; 6

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    2176:	96 95       	lsr	r25
    2178:	87 95       	ror	r24
    217a:	3a 95       	dec	r19
    217c:	e1 f7       	brne	.-8      	; 0x2176 <HID_Device_ProcessControlRequest+0x1ea>
    217e:	f7 01       	movw	r30, r14
    2180:	95 87       	std	Z+13, r25	; 0x0d
    2182:	84 87       	std	Z+12, r24	; 0x0c
    2184:	1c c0       	rjmp	.+56     	; 0x21be <HID_Device_ProcessControlRequest+0x232>
    2186:	80 91 29 02 	lds	r24, 0x0229
    218a:	81 3a       	cpi	r24, 0xA1	; 161
    218c:	c1 f4       	brne	.+48     	; 0x21be <HID_Device_ProcessControlRequest+0x232>
    218e:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    2192:	87 7f       	andi	r24, 0xF7	; 247
    2194:	80 93 e8 00 	sts	0x00E8, r24
    2198:	80 91 e8 00 	lds	r24, 0x00E8
    219c:	80 ff       	sbrs	r24, 0
    219e:	fc cf       	rjmp	.-8      	; 0x2198 <HID_Device_ProcessControlRequest+0x20c>
    21a0:	f7 01       	movw	r30, r14
    21a2:	84 85       	ldd	r24, Z+12	; 0x0c
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    21a4:	95 85       	ldd	r25, Z+13	; 0x0d
    21a6:	96 95       	lsr	r25
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    21a8:	87 95       	ror	r24
    21aa:	96 95       	lsr	r25
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    21ac:	87 95       	ror	r24
    21ae:	80 93 f1 00 	sts	0x00F1, r24
    21b2:	80 91 e8 00 	lds	r24, 0x00E8
    21b6:	8e 77       	andi	r24, 0x7E	; 126
    21b8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    21bc:	d3 da       	rcall	.-2650   	; 0x1764 <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	be be       	out	0x3e, r11	; 62
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	ad be       	out	0x3d, r10	; 61
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
			}

			break;
	}
}
    21cc:	0f 90       	pop	r0
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	1f 91       	pop	r17
    21d4:	0f 91       	pop	r16
    21d6:	ff 90       	pop	r15
    21d8:	ef 90       	pop	r14
    21da:	df 90       	pop	r13
    21dc:	cf 90       	pop	r12
    21de:	bf 90       	pop	r11
    21e0:	af 90       	pop	r10
    21e2:	9f 90       	pop	r9
    21e4:	8f 90       	pop	r8
    21e6:	7f 90       	pop	r7
    21e8:	6f 90       	pop	r6
    21ea:	08 95       	ret

000021ec <HID_Device_ConfigureEndpoints>:
    21ec:	fc 01       	movw	r30, r24
    21ee:	39 96       	adiw	r30, 0x09	; 9
    21f0:	27 e0       	ldi	r18, 0x07	; 7
    21f2:	df 01       	movw	r26, r30
    21f4:	1d 92       	st	X+, r1
    21f6:	2a 95       	dec	r18
    21f8:	e9 f7       	brne	.-6      	; 0x21f4 <HID_Device_ConfigureEndpoints+0x8>

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    21fa:	21 e0       	ldi	r18, 0x01	; 1
    21fc:	fc 01       	movw	r30, r24
    21fe:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    2200:	24 ef       	ldi	r18, 0xF4	; 244
    2202:	31 e0       	ldi	r19, 0x01	; 1
    2204:	35 87       	std	Z+13, r19	; 0x0d
    2206:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    2208:	23 e0       	ldi	r18, 0x03	; 3
    220a:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    220c:	61 e0       	ldi	r22, 0x01	; 1
    220e:	01 96       	adiw	r24, 0x01	; 1
    2210:	6c ca       	rjmp	.-2856   	; 0x16ea <Endpoint_ConfigureEndpointTable>

00002212 <HID_Device_USBTask>:
    2212:	5f 92       	push	r5
	
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    2214:	6f 92       	push	r6
    2216:	7f 92       	push	r7
    2218:	8f 92       	push	r8
    221a:	9f 92       	push	r9
    221c:	af 92       	push	r10
    221e:	bf 92       	push	r11
    2220:	cf 92       	push	r12
    2222:	df 92       	push	r13
    2224:	ef 92       	push	r14
    2226:	ff 92       	push	r15
    2228:	0f 93       	push	r16
    222a:	1f 93       	push	r17
    222c:	cf 93       	push	r28
    222e:	df 93       	push	r29
    2230:	00 d0       	rcall	.+0      	; 0x2232 <HID_Device_USBTask+0x20>
    2232:	1f 92       	push	r1
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
    2238:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    223a:	ad b6       	in	r10, 0x3d	; 61
    223c:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    223e:	80 91 28 02 	lds	r24, 0x0228
    2242:	84 30       	cpi	r24, 0x04	; 4
    2244:	09 f0       	breq	.+2      	; 0x2248 <HID_Device_USBTask+0x36>
    2246:	8b c0       	rjmp	.+278    	; 0x235e <HID_Device_USBTask+0x14c>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    2248:	80 91 e4 00 	lds	r24, 0x00E4
    224c:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    2250:	f7 01       	movw	r30, r14
    2252:	22 85       	ldd	r18, Z+10	; 0x0a
    2254:	33 85       	ldd	r19, Z+11	; 0x0b
    2256:	28 17       	cp	r18, r24
    2258:	39 07       	cpc	r19, r25
    225a:	09 f4       	brne	.+2      	; 0x225e <HID_Device_USBTask+0x4c>
    225c:	80 c0       	rjmp	.+256    	; 0x235e <HID_Device_USBTask+0x14c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    225e:	81 81       	ldd	r24, Z+1	; 0x01
    2260:	8f 70       	andi	r24, 0x0F	; 15
    2262:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2266:	80 91 e8 00 	lds	r24, 0x00E8
	  return;
	  
	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    226a:	85 ff       	sbrs	r24, 5
    226c:	78 c0       	rjmp	.+240    	; 0x235e <HID_Device_USBTask+0x14c>
    226e:	8d b6       	in	r8, 0x3d	; 61
    2270:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    2272:	40 85       	ldd	r20, Z+8	; 0x08
    2274:	50 e0       	ldi	r21, 0x00	; 0
    2276:	8d b7       	in	r24, 0x3d	; 61
    2278:	9e b7       	in	r25, 0x3e	; 62
    227a:	84 1b       	sub	r24, r20
    227c:	95 0b       	sbc	r25, r21
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	9e bf       	out	0x3e, r25	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	8d bf       	out	0x3d, r24	; 61
    2288:	ed b7       	in	r30, 0x3d	; 61
    228a:	fe b7       	in	r31, 0x3e	; 62
    228c:	31 96       	adiw	r30, 0x01	; 1
    228e:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    2290:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    2292:	1a 82       	std	Y+2, r1	; 0x02
    2294:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    2296:	60 e0       	ldi	r22, 0x00	; 0
    2298:	70 e0       	ldi	r23, 0x00	; 0
    229a:	cf 01       	movw	r24, r30
    229c:	ff d3       	rcall	.+2046   	; 0x2a9c <memset>
    229e:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    22a0:	0f 5f       	subi	r16, 0xFF	; 255
    22a2:	1f 4f       	sbci	r17, 0xFF	; 255
    22a4:	96 01       	movw	r18, r12
    22a6:	40 e0       	ldi	r20, 0x00	; 0
    22a8:	be 01       	movw	r22, r28
    22aa:	6d 5f       	subi	r22, 0xFD	; 253
    22ac:	7f 4f       	sbci	r23, 0xFF	; 255
    22ae:	c7 01       	movw	r24, r14
    22b0:	0e 94 a7 06 	call	0xd4e	; 0xd4e <CALLBACK_HID_Device_CreateHIDReport>
    22b4:	68 2e       	mov	r6, r24
    22b6:	f7 01       	movw	r30, r14
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    22b8:	84 85       	ldd	r24, Z+12	; 0x0c
    22ba:	95 85       	ldd	r25, Z+13	; 0x0d
    22bc:	89 2b       	or	r24, r25
    22be:	41 f0       	breq	.+16     	; 0x22d0 <HID_Device_USBTask+0xbe>
    22c0:	21 e0       	ldi	r18, 0x01	; 1
    22c2:	86 85       	ldd	r24, Z+14	; 0x0e
    22c4:	97 85       	ldd	r25, Z+15	; 0x0f
    22c6:	89 2b       	or	r24, r25
    22c8:	09 f0       	breq	.+2      	; 0x22cc <HID_Device_USBTask+0xba>
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	72 2e       	mov	r7, r18
    22ce:	01 c0       	rjmp	.+2      	; 0x22d2 <HID_Device_USBTask+0xc0>
    22d0:	71 2c       	mov	r7, r1
    22d2:	f7 01       	movw	r30, r14

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    22d4:	06 81       	ldd	r16, Z+6	; 0x06
    22d6:	17 81       	ldd	r17, Z+7	; 0x07
    22d8:	01 15       	cp	r16, r1
    22da:	11 05       	cpc	r17, r1
    22dc:	89 f0       	breq	.+34     	; 0x2300 <HID_Device_USBTask+0xee>
    22de:	49 81       	ldd	r20, Y+1	; 0x01
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    22e0:	5a 81       	ldd	r21, Y+2	; 0x02
    22e2:	b8 01       	movw	r22, r16
    22e4:	c6 01       	movw	r24, r12
    22e6:	c4 d3       	rcall	.+1928   	; 0x2a70 <memcmp>
    22e8:	55 24       	eor	r5, r5
    22ea:	53 94       	inc	r5
    22ec:	89 2b       	or	r24, r25
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <HID_Device_USBTask+0xe0>
    22f0:	51 2c       	mov	r5, r1
    22f2:	f7 01       	movw	r30, r14
    22f4:	40 85       	ldd	r20, Z+8	; 0x08
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    22f6:	50 e0       	ldi	r21, 0x00	; 0
    22f8:	b6 01       	movw	r22, r12
    22fa:	c8 01       	movw	r24, r16
    22fc:	c6 d3       	rcall	.+1932   	; 0x2a8a <memcpy>
    22fe:	01 c0       	rjmp	.+2      	; 0x2302 <HID_Device_USBTask+0xf0>
    2300:	51 2c       	mov	r5, r1
    2302:	29 81       	ldd	r18, Y+1	; 0x01
    2304:	3a 81       	ldd	r19, Y+2	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    2306:	23 2b       	or	r18, r19
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    2308:	f1 f0       	breq	.+60     	; 0x2346 <HID_Device_USBTask+0x134>
    230a:	61 10       	cpse	r6, r1
    230c:	04 c0       	rjmp	.+8      	; 0x2316 <HID_Device_USBTask+0x104>
    230e:	51 10       	cpse	r5, r1
    2310:	02 c0       	rjmp	.+4      	; 0x2316 <HID_Device_USBTask+0x104>
    2312:	70 fe       	sbrs	r7, 0
    2314:	18 c0       	rjmp	.+48     	; 0x2346 <HID_Device_USBTask+0x134>
    2316:	f7 01       	movw	r30, r14
    2318:	84 85       	ldd	r24, Z+12	; 0x0c
    231a:	95 85       	ldd	r25, Z+13	; 0x0d
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    231c:	97 87       	std	Z+15, r25	; 0x0f
    231e:	86 87       	std	Z+14, r24	; 0x0e
    2320:	81 81       	ldd	r24, Z+1	; 0x01
    2322:	8f 70       	andi	r24, 0x0F	; 15
    2324:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	81 11       	cpse	r24, r1
    232c:	80 93 f1 00 	sts	0x00F1, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    2330:	69 81       	ldd	r22, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2332:	7a 81       	ldd	r23, Y+2	; 0x02
    2334:	40 e0       	ldi	r20, 0x00	; 0
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    2336:	50 e0       	ldi	r21, 0x00	; 0
    2338:	c6 01       	movw	r24, r12
    233a:	81 db       	rcall	.-2302   	; 0x1a3e <Endpoint_Write_Stream_LE>
    233c:	80 91 e8 00 	lds	r24, 0x00E8
    2340:	8e 77       	andi	r24, 0x7E	; 126
    2342:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2346:	80 91 e4 00 	lds	r24, 0x00E4
    234a:	90 91 e5 00 	lds	r25, 0x00E5
    234e:	f7 01       	movw	r30, r14
    2350:	93 87       	std	Z+11, r25	; 0x0b
    2352:	82 87       	std	Z+10, r24	; 0x0a
    2354:	0f b6       	in	r0, 0x3f	; 63

			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    2356:	f8 94       	cli
    2358:	9e be       	out	0x3e, r9	; 62
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	8d be       	out	0x3d, r8	; 61
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	be be       	out	0x3e, r11	; 62
    2364:	0f be       	out	0x3f, r0	; 63
	}
}
    2366:	ad be       	out	0x3d, r10	; 61
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	df 91       	pop	r29
    2370:	cf 91       	pop	r28
    2372:	1f 91       	pop	r17
    2374:	0f 91       	pop	r16
    2376:	ff 90       	pop	r15
    2378:	ef 90       	pop	r14
    237a:	df 90       	pop	r13
    237c:	cf 90       	pop	r12
    237e:	bf 90       	pop	r11
    2380:	af 90       	pop	r10
    2382:	9f 90       	pop	r9
    2384:	8f 90       	pop	r8
    2386:	7f 90       	pop	r7
    2388:	6f 90       	pop	r6
    238a:	5f 90       	pop	r5
    238c:	08 95       	ret

0000238e <__tablejump2__>:
    238e:	ee 0f       	add	r30, r30
    2390:	ff 1f       	adc	r31, r31

00002392 <__tablejump__>:
    2392:	05 90       	lpm	r0, Z+
    2394:	f4 91       	lpm	r31, Z
    2396:	e0 2d       	mov	r30, r0
    2398:	09 94       	ijmp

0000239a <__subsf3>:
    239a:	50 58       	subi	r21, 0x80	; 128

0000239c <__addsf3>:
    239c:	bb 27       	eor	r27, r27
    239e:	aa 27       	eor	r26, r26
    23a0:	0e d0       	rcall	.+28     	; 0x23be <__addsf3x>
    23a2:	dc c0       	rjmp	.+440    	; 0x255c <__fp_round>
    23a4:	cd d0       	rcall	.+410    	; 0x2540 <__fp_pscA>
    23a6:	30 f0       	brcs	.+12     	; 0x23b4 <__addsf3+0x18>
    23a8:	d2 d0       	rcall	.+420    	; 0x254e <__fp_pscB>
    23aa:	20 f0       	brcs	.+8      	; 0x23b4 <__addsf3+0x18>
    23ac:	31 f4       	brne	.+12     	; 0x23ba <__addsf3+0x1e>
    23ae:	9f 3f       	cpi	r25, 0xFF	; 255
    23b0:	11 f4       	brne	.+4      	; 0x23b6 <__addsf3+0x1a>
    23b2:	1e f4       	brtc	.+6      	; 0x23ba <__addsf3+0x1e>
    23b4:	c2 c0       	rjmp	.+388    	; 0x253a <__fp_nan>
    23b6:	0e f4       	brtc	.+2      	; 0x23ba <__addsf3+0x1e>
    23b8:	e0 95       	com	r30
    23ba:	e7 fb       	bst	r30, 7
    23bc:	b8 c0       	rjmp	.+368    	; 0x252e <__fp_inf>

000023be <__addsf3x>:
    23be:	e9 2f       	mov	r30, r25
    23c0:	de d0       	rcall	.+444    	; 0x257e <__fp_split3>
    23c2:	80 f3       	brcs	.-32     	; 0x23a4 <__addsf3+0x8>
    23c4:	ba 17       	cp	r27, r26
    23c6:	62 07       	cpc	r22, r18
    23c8:	73 07       	cpc	r23, r19
    23ca:	84 07       	cpc	r24, r20
    23cc:	95 07       	cpc	r25, r21
    23ce:	18 f0       	brcs	.+6      	; 0x23d6 <__addsf3x+0x18>
    23d0:	71 f4       	brne	.+28     	; 0x23ee <__addsf3x+0x30>
    23d2:	9e f5       	brtc	.+102    	; 0x243a <__addsf3x+0x7c>
    23d4:	f6 c0       	rjmp	.+492    	; 0x25c2 <__fp_zero>
    23d6:	0e f4       	brtc	.+2      	; 0x23da <__addsf3x+0x1c>
    23d8:	e0 95       	com	r30
    23da:	0b 2e       	mov	r0, r27
    23dc:	ba 2f       	mov	r27, r26
    23de:	a0 2d       	mov	r26, r0
    23e0:	0b 01       	movw	r0, r22
    23e2:	b9 01       	movw	r22, r18
    23e4:	90 01       	movw	r18, r0
    23e6:	0c 01       	movw	r0, r24
    23e8:	ca 01       	movw	r24, r20
    23ea:	a0 01       	movw	r20, r0
    23ec:	11 24       	eor	r1, r1
    23ee:	ff 27       	eor	r31, r31
    23f0:	59 1b       	sub	r21, r25
    23f2:	99 f0       	breq	.+38     	; 0x241a <__addsf3x+0x5c>
    23f4:	59 3f       	cpi	r21, 0xF9	; 249
    23f6:	50 f4       	brcc	.+20     	; 0x240c <__addsf3x+0x4e>
    23f8:	50 3e       	cpi	r21, 0xE0	; 224
    23fa:	68 f1       	brcs	.+90     	; 0x2456 <__addsf3x+0x98>
    23fc:	1a 16       	cp	r1, r26
    23fe:	f0 40       	sbci	r31, 0x00	; 0
    2400:	a2 2f       	mov	r26, r18
    2402:	23 2f       	mov	r18, r19
    2404:	34 2f       	mov	r19, r20
    2406:	44 27       	eor	r20, r20
    2408:	58 5f       	subi	r21, 0xF8	; 248
    240a:	f3 cf       	rjmp	.-26     	; 0x23f2 <__addsf3x+0x34>
    240c:	46 95       	lsr	r20
    240e:	37 95       	ror	r19
    2410:	27 95       	ror	r18
    2412:	a7 95       	ror	r26
    2414:	f0 40       	sbci	r31, 0x00	; 0
    2416:	53 95       	inc	r21
    2418:	c9 f7       	brne	.-14     	; 0x240c <__addsf3x+0x4e>
    241a:	7e f4       	brtc	.+30     	; 0x243a <__addsf3x+0x7c>
    241c:	1f 16       	cp	r1, r31
    241e:	ba 0b       	sbc	r27, r26
    2420:	62 0b       	sbc	r22, r18
    2422:	73 0b       	sbc	r23, r19
    2424:	84 0b       	sbc	r24, r20
    2426:	ba f0       	brmi	.+46     	; 0x2456 <__addsf3x+0x98>
    2428:	91 50       	subi	r25, 0x01	; 1
    242a:	a1 f0       	breq	.+40     	; 0x2454 <__addsf3x+0x96>
    242c:	ff 0f       	add	r31, r31
    242e:	bb 1f       	adc	r27, r27
    2430:	66 1f       	adc	r22, r22
    2432:	77 1f       	adc	r23, r23
    2434:	88 1f       	adc	r24, r24
    2436:	c2 f7       	brpl	.-16     	; 0x2428 <__addsf3x+0x6a>
    2438:	0e c0       	rjmp	.+28     	; 0x2456 <__addsf3x+0x98>
    243a:	ba 0f       	add	r27, r26
    243c:	62 1f       	adc	r22, r18
    243e:	73 1f       	adc	r23, r19
    2440:	84 1f       	adc	r24, r20
    2442:	48 f4       	brcc	.+18     	; 0x2456 <__addsf3x+0x98>
    2444:	87 95       	ror	r24
    2446:	77 95       	ror	r23
    2448:	67 95       	ror	r22
    244a:	b7 95       	ror	r27
    244c:	f7 95       	ror	r31
    244e:	9e 3f       	cpi	r25, 0xFE	; 254
    2450:	08 f0       	brcs	.+2      	; 0x2454 <__addsf3x+0x96>
    2452:	b3 cf       	rjmp	.-154    	; 0x23ba <__addsf3+0x1e>
    2454:	93 95       	inc	r25
    2456:	88 0f       	add	r24, r24
    2458:	08 f0       	brcs	.+2      	; 0x245c <__addsf3x+0x9e>
    245a:	99 27       	eor	r25, r25
    245c:	ee 0f       	add	r30, r30
    245e:	97 95       	ror	r25
    2460:	87 95       	ror	r24
    2462:	08 95       	ret

00002464 <__cmpsf2>:
    2464:	40 d0       	rcall	.+128    	; 0x24e6 <__fp_cmp>
    2466:	08 f4       	brcc	.+2      	; 0x246a <__cmpsf2+0x6>
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	08 95       	ret

0000246c <__floatunsisf>:
    246c:	e8 94       	clt
    246e:	09 c0       	rjmp	.+18     	; 0x2482 <__floatsisf+0x12>

00002470 <__floatsisf>:
    2470:	97 fb       	bst	r25, 7
    2472:	3e f4       	brtc	.+14     	; 0x2482 <__floatsisf+0x12>
    2474:	90 95       	com	r25
    2476:	80 95       	com	r24
    2478:	70 95       	com	r23
    247a:	61 95       	neg	r22
    247c:	7f 4f       	sbci	r23, 0xFF	; 255
    247e:	8f 4f       	sbci	r24, 0xFF	; 255
    2480:	9f 4f       	sbci	r25, 0xFF	; 255
    2482:	99 23       	and	r25, r25
    2484:	a9 f0       	breq	.+42     	; 0x24b0 <__floatsisf+0x40>
    2486:	f9 2f       	mov	r31, r25
    2488:	96 e9       	ldi	r25, 0x96	; 150
    248a:	bb 27       	eor	r27, r27
    248c:	93 95       	inc	r25
    248e:	f6 95       	lsr	r31
    2490:	87 95       	ror	r24
    2492:	77 95       	ror	r23
    2494:	67 95       	ror	r22
    2496:	b7 95       	ror	r27
    2498:	f1 11       	cpse	r31, r1
    249a:	f8 cf       	rjmp	.-16     	; 0x248c <__floatsisf+0x1c>
    249c:	fa f4       	brpl	.+62     	; 0x24dc <__floatsisf+0x6c>
    249e:	bb 0f       	add	r27, r27
    24a0:	11 f4       	brne	.+4      	; 0x24a6 <__floatsisf+0x36>
    24a2:	60 ff       	sbrs	r22, 0
    24a4:	1b c0       	rjmp	.+54     	; 0x24dc <__floatsisf+0x6c>
    24a6:	6f 5f       	subi	r22, 0xFF	; 255
    24a8:	7f 4f       	sbci	r23, 0xFF	; 255
    24aa:	8f 4f       	sbci	r24, 0xFF	; 255
    24ac:	9f 4f       	sbci	r25, 0xFF	; 255
    24ae:	16 c0       	rjmp	.+44     	; 0x24dc <__floatsisf+0x6c>
    24b0:	88 23       	and	r24, r24
    24b2:	11 f0       	breq	.+4      	; 0x24b8 <__floatsisf+0x48>
    24b4:	96 e9       	ldi	r25, 0x96	; 150
    24b6:	11 c0       	rjmp	.+34     	; 0x24da <__floatsisf+0x6a>
    24b8:	77 23       	and	r23, r23
    24ba:	21 f0       	breq	.+8      	; 0x24c4 <__floatsisf+0x54>
    24bc:	9e e8       	ldi	r25, 0x8E	; 142
    24be:	87 2f       	mov	r24, r23
    24c0:	76 2f       	mov	r23, r22
    24c2:	05 c0       	rjmp	.+10     	; 0x24ce <__floatsisf+0x5e>
    24c4:	66 23       	and	r22, r22
    24c6:	71 f0       	breq	.+28     	; 0x24e4 <__floatsisf+0x74>
    24c8:	96 e8       	ldi	r25, 0x86	; 134
    24ca:	86 2f       	mov	r24, r22
    24cc:	70 e0       	ldi	r23, 0x00	; 0
    24ce:	60 e0       	ldi	r22, 0x00	; 0
    24d0:	2a f0       	brmi	.+10     	; 0x24dc <__floatsisf+0x6c>
    24d2:	9a 95       	dec	r25
    24d4:	66 0f       	add	r22, r22
    24d6:	77 1f       	adc	r23, r23
    24d8:	88 1f       	adc	r24, r24
    24da:	da f7       	brpl	.-10     	; 0x24d2 <__floatsisf+0x62>
    24dc:	88 0f       	add	r24, r24
    24de:	96 95       	lsr	r25
    24e0:	87 95       	ror	r24
    24e2:	97 f9       	bld	r25, 7
    24e4:	08 95       	ret

000024e6 <__fp_cmp>:
    24e6:	99 0f       	add	r25, r25
    24e8:	00 08       	sbc	r0, r0
    24ea:	55 0f       	add	r21, r21
    24ec:	aa 0b       	sbc	r26, r26
    24ee:	e0 e8       	ldi	r30, 0x80	; 128
    24f0:	fe ef       	ldi	r31, 0xFE	; 254
    24f2:	16 16       	cp	r1, r22
    24f4:	17 06       	cpc	r1, r23
    24f6:	e8 07       	cpc	r30, r24
    24f8:	f9 07       	cpc	r31, r25
    24fa:	c0 f0       	brcs	.+48     	; 0x252c <__fp_cmp+0x46>
    24fc:	12 16       	cp	r1, r18
    24fe:	13 06       	cpc	r1, r19
    2500:	e4 07       	cpc	r30, r20
    2502:	f5 07       	cpc	r31, r21
    2504:	98 f0       	brcs	.+38     	; 0x252c <__fp_cmp+0x46>
    2506:	62 1b       	sub	r22, r18
    2508:	73 0b       	sbc	r23, r19
    250a:	84 0b       	sbc	r24, r20
    250c:	95 0b       	sbc	r25, r21
    250e:	39 f4       	brne	.+14     	; 0x251e <__fp_cmp+0x38>
    2510:	0a 26       	eor	r0, r26
    2512:	61 f0       	breq	.+24     	; 0x252c <__fp_cmp+0x46>
    2514:	23 2b       	or	r18, r19
    2516:	24 2b       	or	r18, r20
    2518:	25 2b       	or	r18, r21
    251a:	21 f4       	brne	.+8      	; 0x2524 <__fp_cmp+0x3e>
    251c:	08 95       	ret
    251e:	0a 26       	eor	r0, r26
    2520:	09 f4       	brne	.+2      	; 0x2524 <__fp_cmp+0x3e>
    2522:	a1 40       	sbci	r26, 0x01	; 1
    2524:	a6 95       	lsr	r26
    2526:	8f ef       	ldi	r24, 0xFF	; 255
    2528:	81 1d       	adc	r24, r1
    252a:	81 1d       	adc	r24, r1
    252c:	08 95       	ret

0000252e <__fp_inf>:
    252e:	97 f9       	bld	r25, 7
    2530:	9f 67       	ori	r25, 0x7F	; 127
    2532:	80 e8       	ldi	r24, 0x80	; 128
    2534:	70 e0       	ldi	r23, 0x00	; 0
    2536:	60 e0       	ldi	r22, 0x00	; 0
    2538:	08 95       	ret

0000253a <__fp_nan>:
    253a:	9f ef       	ldi	r25, 0xFF	; 255
    253c:	80 ec       	ldi	r24, 0xC0	; 192
    253e:	08 95       	ret

00002540 <__fp_pscA>:
    2540:	00 24       	eor	r0, r0
    2542:	0a 94       	dec	r0
    2544:	16 16       	cp	r1, r22
    2546:	17 06       	cpc	r1, r23
    2548:	18 06       	cpc	r1, r24
    254a:	09 06       	cpc	r0, r25
    254c:	08 95       	ret

0000254e <__fp_pscB>:
    254e:	00 24       	eor	r0, r0
    2550:	0a 94       	dec	r0
    2552:	12 16       	cp	r1, r18
    2554:	13 06       	cpc	r1, r19
    2556:	14 06       	cpc	r1, r20
    2558:	05 06       	cpc	r0, r21
    255a:	08 95       	ret

0000255c <__fp_round>:
    255c:	09 2e       	mov	r0, r25
    255e:	03 94       	inc	r0
    2560:	00 0c       	add	r0, r0
    2562:	11 f4       	brne	.+4      	; 0x2568 <__fp_round+0xc>
    2564:	88 23       	and	r24, r24
    2566:	52 f0       	brmi	.+20     	; 0x257c <__fp_round+0x20>
    2568:	bb 0f       	add	r27, r27
    256a:	40 f4       	brcc	.+16     	; 0x257c <__fp_round+0x20>
    256c:	bf 2b       	or	r27, r31
    256e:	11 f4       	brne	.+4      	; 0x2574 <__fp_round+0x18>
    2570:	60 ff       	sbrs	r22, 0
    2572:	04 c0       	rjmp	.+8      	; 0x257c <__fp_round+0x20>
    2574:	6f 5f       	subi	r22, 0xFF	; 255
    2576:	7f 4f       	sbci	r23, 0xFF	; 255
    2578:	8f 4f       	sbci	r24, 0xFF	; 255
    257a:	9f 4f       	sbci	r25, 0xFF	; 255
    257c:	08 95       	ret

0000257e <__fp_split3>:
    257e:	57 fd       	sbrc	r21, 7
    2580:	90 58       	subi	r25, 0x80	; 128
    2582:	44 0f       	add	r20, r20
    2584:	55 1f       	adc	r21, r21
    2586:	59 f0       	breq	.+22     	; 0x259e <__fp_splitA+0x10>
    2588:	5f 3f       	cpi	r21, 0xFF	; 255
    258a:	71 f0       	breq	.+28     	; 0x25a8 <__fp_splitA+0x1a>
    258c:	47 95       	ror	r20

0000258e <__fp_splitA>:
    258e:	88 0f       	add	r24, r24
    2590:	97 fb       	bst	r25, 7
    2592:	99 1f       	adc	r25, r25
    2594:	61 f0       	breq	.+24     	; 0x25ae <__fp_splitA+0x20>
    2596:	9f 3f       	cpi	r25, 0xFF	; 255
    2598:	79 f0       	breq	.+30     	; 0x25b8 <__fp_splitA+0x2a>
    259a:	87 95       	ror	r24
    259c:	08 95       	ret
    259e:	12 16       	cp	r1, r18
    25a0:	13 06       	cpc	r1, r19
    25a2:	14 06       	cpc	r1, r20
    25a4:	55 1f       	adc	r21, r21
    25a6:	f2 cf       	rjmp	.-28     	; 0x258c <__fp_split3+0xe>
    25a8:	46 95       	lsr	r20
    25aa:	f1 df       	rcall	.-30     	; 0x258e <__fp_splitA>
    25ac:	08 c0       	rjmp	.+16     	; 0x25be <__fp_splitA+0x30>
    25ae:	16 16       	cp	r1, r22
    25b0:	17 06       	cpc	r1, r23
    25b2:	18 06       	cpc	r1, r24
    25b4:	99 1f       	adc	r25, r25
    25b6:	f1 cf       	rjmp	.-30     	; 0x259a <__fp_splitA+0xc>
    25b8:	86 95       	lsr	r24
    25ba:	71 05       	cpc	r23, r1
    25bc:	61 05       	cpc	r22, r1
    25be:	08 94       	sec
    25c0:	08 95       	ret

000025c2 <__fp_zero>:
    25c2:	e8 94       	clt

000025c4 <__fp_szero>:
    25c4:	bb 27       	eor	r27, r27
    25c6:	66 27       	eor	r22, r22
    25c8:	77 27       	eor	r23, r23
    25ca:	cb 01       	movw	r24, r22
    25cc:	97 f9       	bld	r25, 7
    25ce:	08 95       	ret

000025d0 <__mulsf3>:
    25d0:	0b d0       	rcall	.+22     	; 0x25e8 <__mulsf3x>
    25d2:	c4 cf       	rjmp	.-120    	; 0x255c <__fp_round>
    25d4:	b5 df       	rcall	.-150    	; 0x2540 <__fp_pscA>
    25d6:	28 f0       	brcs	.+10     	; 0x25e2 <__mulsf3+0x12>
    25d8:	ba df       	rcall	.-140    	; 0x254e <__fp_pscB>
    25da:	18 f0       	brcs	.+6      	; 0x25e2 <__mulsf3+0x12>
    25dc:	95 23       	and	r25, r21
    25de:	09 f0       	breq	.+2      	; 0x25e2 <__mulsf3+0x12>
    25e0:	a6 cf       	rjmp	.-180    	; 0x252e <__fp_inf>
    25e2:	ab cf       	rjmp	.-170    	; 0x253a <__fp_nan>
    25e4:	11 24       	eor	r1, r1
    25e6:	ee cf       	rjmp	.-36     	; 0x25c4 <__fp_szero>

000025e8 <__mulsf3x>:
    25e8:	ca df       	rcall	.-108    	; 0x257e <__fp_split3>
    25ea:	a0 f3       	brcs	.-24     	; 0x25d4 <__mulsf3+0x4>

000025ec <__mulsf3_pse>:
    25ec:	95 9f       	mul	r25, r21
    25ee:	d1 f3       	breq	.-12     	; 0x25e4 <__mulsf3+0x14>
    25f0:	95 0f       	add	r25, r21
    25f2:	50 e0       	ldi	r21, 0x00	; 0
    25f4:	55 1f       	adc	r21, r21
    25f6:	62 9f       	mul	r22, r18
    25f8:	f0 01       	movw	r30, r0
    25fa:	72 9f       	mul	r23, r18
    25fc:	bb 27       	eor	r27, r27
    25fe:	f0 0d       	add	r31, r0
    2600:	b1 1d       	adc	r27, r1
    2602:	63 9f       	mul	r22, r19
    2604:	aa 27       	eor	r26, r26
    2606:	f0 0d       	add	r31, r0
    2608:	b1 1d       	adc	r27, r1
    260a:	aa 1f       	adc	r26, r26
    260c:	64 9f       	mul	r22, r20
    260e:	66 27       	eor	r22, r22
    2610:	b0 0d       	add	r27, r0
    2612:	a1 1d       	adc	r26, r1
    2614:	66 1f       	adc	r22, r22
    2616:	82 9f       	mul	r24, r18
    2618:	22 27       	eor	r18, r18
    261a:	b0 0d       	add	r27, r0
    261c:	a1 1d       	adc	r26, r1
    261e:	62 1f       	adc	r22, r18
    2620:	73 9f       	mul	r23, r19
    2622:	b0 0d       	add	r27, r0
    2624:	a1 1d       	adc	r26, r1
    2626:	62 1f       	adc	r22, r18
    2628:	83 9f       	mul	r24, r19
    262a:	a0 0d       	add	r26, r0
    262c:	61 1d       	adc	r22, r1
    262e:	22 1f       	adc	r18, r18
    2630:	74 9f       	mul	r23, r20
    2632:	33 27       	eor	r19, r19
    2634:	a0 0d       	add	r26, r0
    2636:	61 1d       	adc	r22, r1
    2638:	23 1f       	adc	r18, r19
    263a:	84 9f       	mul	r24, r20
    263c:	60 0d       	add	r22, r0
    263e:	21 1d       	adc	r18, r1
    2640:	82 2f       	mov	r24, r18
    2642:	76 2f       	mov	r23, r22
    2644:	6a 2f       	mov	r22, r26
    2646:	11 24       	eor	r1, r1
    2648:	9f 57       	subi	r25, 0x7F	; 127
    264a:	50 40       	sbci	r21, 0x00	; 0
    264c:	8a f0       	brmi	.+34     	; 0x2670 <__mulsf3_pse+0x84>
    264e:	e1 f0       	breq	.+56     	; 0x2688 <__mulsf3_pse+0x9c>
    2650:	88 23       	and	r24, r24
    2652:	4a f0       	brmi	.+18     	; 0x2666 <__mulsf3_pse+0x7a>
    2654:	ee 0f       	add	r30, r30
    2656:	ff 1f       	adc	r31, r31
    2658:	bb 1f       	adc	r27, r27
    265a:	66 1f       	adc	r22, r22
    265c:	77 1f       	adc	r23, r23
    265e:	88 1f       	adc	r24, r24
    2660:	91 50       	subi	r25, 0x01	; 1
    2662:	50 40       	sbci	r21, 0x00	; 0
    2664:	a9 f7       	brne	.-22     	; 0x2650 <__mulsf3_pse+0x64>
    2666:	9e 3f       	cpi	r25, 0xFE	; 254
    2668:	51 05       	cpc	r21, r1
    266a:	70 f0       	brcs	.+28     	; 0x2688 <__mulsf3_pse+0x9c>
    266c:	60 cf       	rjmp	.-320    	; 0x252e <__fp_inf>
    266e:	aa cf       	rjmp	.-172    	; 0x25c4 <__fp_szero>
    2670:	5f 3f       	cpi	r21, 0xFF	; 255
    2672:	ec f3       	brlt	.-6      	; 0x266e <__mulsf3_pse+0x82>
    2674:	98 3e       	cpi	r25, 0xE8	; 232
    2676:	dc f3       	brlt	.-10     	; 0x266e <__mulsf3_pse+0x82>
    2678:	86 95       	lsr	r24
    267a:	77 95       	ror	r23
    267c:	67 95       	ror	r22
    267e:	b7 95       	ror	r27
    2680:	f7 95       	ror	r31
    2682:	e7 95       	ror	r30
    2684:	9f 5f       	subi	r25, 0xFF	; 255
    2686:	c1 f7       	brne	.-16     	; 0x2678 <__mulsf3_pse+0x8c>
    2688:	fe 2b       	or	r31, r30
    268a:	88 0f       	add	r24, r24
    268c:	91 1d       	adc	r25, r1
    268e:	96 95       	lsr	r25
    2690:	87 95       	ror	r24
    2692:	97 f9       	bld	r25, 7
    2694:	08 95       	ret

00002696 <pow>:
    2696:	fa 01       	movw	r30, r20
    2698:	ee 0f       	add	r30, r30
    269a:	ff 1f       	adc	r31, r31
    269c:	30 96       	adiw	r30, 0x00	; 0
    269e:	21 05       	cpc	r18, r1
    26a0:	31 05       	cpc	r19, r1
    26a2:	99 f1       	breq	.+102    	; 0x270a <pow+0x74>
    26a4:	61 15       	cp	r22, r1
    26a6:	71 05       	cpc	r23, r1
    26a8:	61 f4       	brne	.+24     	; 0x26c2 <pow+0x2c>
    26aa:	80 38       	cpi	r24, 0x80	; 128
    26ac:	bf e3       	ldi	r27, 0x3F	; 63
    26ae:	9b 07       	cpc	r25, r27
    26b0:	49 f1       	breq	.+82     	; 0x2704 <pow+0x6e>
    26b2:	68 94       	set
    26b4:	90 38       	cpi	r25, 0x80	; 128
    26b6:	81 05       	cpc	r24, r1
    26b8:	61 f0       	breq	.+24     	; 0x26d2 <pow+0x3c>
    26ba:	80 38       	cpi	r24, 0x80	; 128
    26bc:	bf ef       	ldi	r27, 0xFF	; 255
    26be:	9b 07       	cpc	r25, r27
    26c0:	41 f0       	breq	.+16     	; 0x26d2 <pow+0x3c>
    26c2:	99 23       	and	r25, r25
    26c4:	42 f5       	brpl	.+80     	; 0x2716 <pow+0x80>
    26c6:	ff 3f       	cpi	r31, 0xFF	; 255
    26c8:	e1 05       	cpc	r30, r1
    26ca:	31 05       	cpc	r19, r1
    26cc:	21 05       	cpc	r18, r1
    26ce:	11 f1       	breq	.+68     	; 0x2714 <pow+0x7e>
    26d0:	e8 94       	clt
    26d2:	08 94       	sec
    26d4:	e7 95       	ror	r30
    26d6:	d9 01       	movw	r26, r18
    26d8:	aa 23       	and	r26, r26
    26da:	29 f4       	brne	.+10     	; 0x26e6 <pow+0x50>
    26dc:	ab 2f       	mov	r26, r27
    26de:	be 2f       	mov	r27, r30
    26e0:	f8 5f       	subi	r31, 0xF8	; 248
    26e2:	d0 f3       	brcs	.-12     	; 0x26d8 <pow+0x42>
    26e4:	10 c0       	rjmp	.+32     	; 0x2706 <pow+0x70>
    26e6:	ff 5f       	subi	r31, 0xFF	; 255
    26e8:	70 f4       	brcc	.+28     	; 0x2706 <pow+0x70>
    26ea:	a6 95       	lsr	r26
    26ec:	e0 f7       	brcc	.-8      	; 0x26e6 <pow+0x50>
    26ee:	f7 39       	cpi	r31, 0x97	; 151
    26f0:	50 f0       	brcs	.+20     	; 0x2706 <pow+0x70>
    26f2:	19 f0       	breq	.+6      	; 0x26fa <pow+0x64>
    26f4:	ff 3a       	cpi	r31, 0xAF	; 175
    26f6:	38 f4       	brcc	.+14     	; 0x2706 <pow+0x70>
    26f8:	9f 77       	andi	r25, 0x7F	; 127
    26fa:	9f 93       	push	r25
    26fc:	0c d0       	rcall	.+24     	; 0x2716 <pow+0x80>
    26fe:	0f 90       	pop	r0
    2700:	07 fc       	sbrc	r0, 7
    2702:	90 58       	subi	r25, 0x80	; 128
    2704:	08 95       	ret
    2706:	3e f0       	brts	.+14     	; 0x2716 <pow+0x80>
    2708:	18 cf       	rjmp	.-464    	; 0x253a <__fp_nan>
    270a:	60 e0       	ldi	r22, 0x00	; 0
    270c:	70 e0       	ldi	r23, 0x00	; 0
    270e:	80 e8       	ldi	r24, 0x80	; 128
    2710:	9f e3       	ldi	r25, 0x3F	; 63
    2712:	08 95       	ret
    2714:	4f e7       	ldi	r20, 0x7F	; 127
    2716:	9f 77       	andi	r25, 0x7F	; 127
    2718:	5f 93       	push	r21
    271a:	4f 93       	push	r20
    271c:	3f 93       	push	r19
    271e:	2f 93       	push	r18
    2720:	9e d0       	rcall	.+316    	; 0x285e <log>
    2722:	2f 91       	pop	r18
    2724:	3f 91       	pop	r19
    2726:	4f 91       	pop	r20
    2728:	5f 91       	pop	r21
    272a:	52 df       	rcall	.-348    	; 0x25d0 <__mulsf3>
    272c:	05 c0       	rjmp	.+10     	; 0x2738 <exp>
    272e:	19 f4       	brne	.+6      	; 0x2736 <pow+0xa0>
    2730:	0e f0       	brts	.+2      	; 0x2734 <pow+0x9e>
    2732:	fd ce       	rjmp	.-518    	; 0x252e <__fp_inf>
    2734:	46 cf       	rjmp	.-372    	; 0x25c2 <__fp_zero>
    2736:	01 cf       	rjmp	.-510    	; 0x253a <__fp_nan>

00002738 <exp>:
    2738:	2a df       	rcall	.-428    	; 0x258e <__fp_splitA>
    273a:	c8 f3       	brcs	.-14     	; 0x272e <pow+0x98>
    273c:	96 38       	cpi	r25, 0x86	; 134
    273e:	c0 f7       	brcc	.-16     	; 0x2730 <pow+0x9a>
    2740:	07 f8       	bld	r0, 7
    2742:	0f 92       	push	r0
    2744:	e8 94       	clt
    2746:	2b e3       	ldi	r18, 0x3B	; 59
    2748:	3a ea       	ldi	r19, 0xAA	; 170
    274a:	48 eb       	ldi	r20, 0xB8	; 184
    274c:	5f e7       	ldi	r21, 0x7F	; 127
    274e:	4e df       	rcall	.-356    	; 0x25ec <__mulsf3_pse>
    2750:	0f 92       	push	r0
    2752:	0f 92       	push	r0
    2754:	0f 92       	push	r0
    2756:	4d b7       	in	r20, 0x3d	; 61
    2758:	5e b7       	in	r21, 0x3e	; 62
    275a:	0f 92       	push	r0
    275c:	c0 d0       	rcall	.+384    	; 0x28de <modf>
    275e:	e2 ed       	ldi	r30, 0xD2	; 210
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	16 d0       	rcall	.+44     	; 0x2790 <__fp_powser>
    2764:	4f 91       	pop	r20
    2766:	5f 91       	pop	r21
    2768:	ef 91       	pop	r30
    276a:	ff 91       	pop	r31
    276c:	e5 95       	asr	r30
    276e:	ee 1f       	adc	r30, r30
    2770:	ff 1f       	adc	r31, r31
    2772:	49 f0       	breq	.+18     	; 0x2786 <exp+0x4e>
    2774:	fe 57       	subi	r31, 0x7E	; 126
    2776:	e0 68       	ori	r30, 0x80	; 128
    2778:	44 27       	eor	r20, r20
    277a:	ee 0f       	add	r30, r30
    277c:	44 1f       	adc	r20, r20
    277e:	fa 95       	dec	r31
    2780:	e1 f7       	brne	.-8      	; 0x277a <exp+0x42>
    2782:	41 95       	neg	r20
    2784:	55 0b       	sbc	r21, r21
    2786:	32 d0       	rcall	.+100    	; 0x27ec <ldexp>
    2788:	0f 90       	pop	r0
    278a:	07 fe       	sbrs	r0, 7
    278c:	26 c0       	rjmp	.+76     	; 0x27da <inverse>
    278e:	08 95       	ret

00002790 <__fp_powser>:
    2790:	df 93       	push	r29
    2792:	cf 93       	push	r28
    2794:	1f 93       	push	r17
    2796:	0f 93       	push	r16
    2798:	ff 92       	push	r15
    279a:	ef 92       	push	r14
    279c:	df 92       	push	r13
    279e:	7b 01       	movw	r14, r22
    27a0:	8c 01       	movw	r16, r24
    27a2:	68 94       	set
    27a4:	05 c0       	rjmp	.+10     	; 0x27b0 <__fp_powser+0x20>
    27a6:	da 2e       	mov	r13, r26
    27a8:	ef 01       	movw	r28, r30
    27aa:	1e df       	rcall	.-452    	; 0x25e8 <__mulsf3x>
    27ac:	fe 01       	movw	r30, r28
    27ae:	e8 94       	clt
    27b0:	a5 91       	lpm	r26, Z+
    27b2:	25 91       	lpm	r18, Z+
    27b4:	35 91       	lpm	r19, Z+
    27b6:	45 91       	lpm	r20, Z+
    27b8:	55 91       	lpm	r21, Z+
    27ba:	ae f3       	brts	.-22     	; 0x27a6 <__fp_powser+0x16>
    27bc:	ef 01       	movw	r28, r30
    27be:	ff dd       	rcall	.-1026   	; 0x23be <__addsf3x>
    27c0:	fe 01       	movw	r30, r28
    27c2:	97 01       	movw	r18, r14
    27c4:	a8 01       	movw	r20, r16
    27c6:	da 94       	dec	r13
    27c8:	79 f7       	brne	.-34     	; 0x27a8 <__fp_powser+0x18>
    27ca:	df 90       	pop	r13
    27cc:	ef 90       	pop	r14
    27ce:	ff 90       	pop	r15
    27d0:	0f 91       	pop	r16
    27d2:	1f 91       	pop	r17
    27d4:	cf 91       	pop	r28
    27d6:	df 91       	pop	r29
    27d8:	08 95       	ret

000027da <inverse>:
    27da:	9b 01       	movw	r18, r22
    27dc:	ac 01       	movw	r20, r24
    27de:	60 e0       	ldi	r22, 0x00	; 0
    27e0:	70 e0       	ldi	r23, 0x00	; 0
    27e2:	80 e8       	ldi	r24, 0x80	; 128
    27e4:	9f e3       	ldi	r25, 0x3F	; 63
    27e6:	ae c0       	rjmp	.+348    	; 0x2944 <__divsf3>
    27e8:	a2 ce       	rjmp	.-700    	; 0x252e <__fp_inf>
    27ea:	14 c1       	rjmp	.+552    	; 0x2a14 <__fp_mpack>

000027ec <ldexp>:
    27ec:	d0 de       	rcall	.-608    	; 0x258e <__fp_splitA>
    27ee:	e8 f3       	brcs	.-6      	; 0x27ea <inverse+0x10>
    27f0:	99 23       	and	r25, r25
    27f2:	d9 f3       	breq	.-10     	; 0x27ea <inverse+0x10>
    27f4:	94 0f       	add	r25, r20
    27f6:	51 1d       	adc	r21, r1
    27f8:	bb f3       	brvs	.-18     	; 0x27e8 <inverse+0xe>
    27fa:	91 50       	subi	r25, 0x01	; 1
    27fc:	50 40       	sbci	r21, 0x00	; 0
    27fe:	94 f0       	brlt	.+36     	; 0x2824 <ldexp+0x38>
    2800:	59 f0       	breq	.+22     	; 0x2818 <ldexp+0x2c>
    2802:	88 23       	and	r24, r24
    2804:	32 f0       	brmi	.+12     	; 0x2812 <ldexp+0x26>
    2806:	66 0f       	add	r22, r22
    2808:	77 1f       	adc	r23, r23
    280a:	88 1f       	adc	r24, r24
    280c:	91 50       	subi	r25, 0x01	; 1
    280e:	50 40       	sbci	r21, 0x00	; 0
    2810:	c1 f7       	brne	.-16     	; 0x2802 <ldexp+0x16>
    2812:	9e 3f       	cpi	r25, 0xFE	; 254
    2814:	51 05       	cpc	r21, r1
    2816:	44 f7       	brge	.-48     	; 0x27e8 <inverse+0xe>
    2818:	88 0f       	add	r24, r24
    281a:	91 1d       	adc	r25, r1
    281c:	96 95       	lsr	r25
    281e:	87 95       	ror	r24
    2820:	97 f9       	bld	r25, 7
    2822:	08 95       	ret
    2824:	5f 3f       	cpi	r21, 0xFF	; 255
    2826:	ac f0       	brlt	.+42     	; 0x2852 <ldexp+0x66>
    2828:	98 3e       	cpi	r25, 0xE8	; 232
    282a:	9c f0       	brlt	.+38     	; 0x2852 <ldexp+0x66>
    282c:	bb 27       	eor	r27, r27
    282e:	86 95       	lsr	r24
    2830:	77 95       	ror	r23
    2832:	67 95       	ror	r22
    2834:	b7 95       	ror	r27
    2836:	08 f4       	brcc	.+2      	; 0x283a <ldexp+0x4e>
    2838:	b1 60       	ori	r27, 0x01	; 1
    283a:	93 95       	inc	r25
    283c:	c1 f7       	brne	.-16     	; 0x282e <ldexp+0x42>
    283e:	bb 0f       	add	r27, r27
    2840:	58 f7       	brcc	.-42     	; 0x2818 <ldexp+0x2c>
    2842:	11 f4       	brne	.+4      	; 0x2848 <ldexp+0x5c>
    2844:	60 ff       	sbrs	r22, 0
    2846:	e8 cf       	rjmp	.-48     	; 0x2818 <ldexp+0x2c>
    2848:	6f 5f       	subi	r22, 0xFF	; 255
    284a:	7f 4f       	sbci	r23, 0xFF	; 255
    284c:	8f 4f       	sbci	r24, 0xFF	; 255
    284e:	9f 4f       	sbci	r25, 0xFF	; 255
    2850:	e3 cf       	rjmp	.-58     	; 0x2818 <ldexp+0x2c>
    2852:	b8 ce       	rjmp	.-656    	; 0x25c4 <__fp_szero>
    2854:	0e f0       	brts	.+2      	; 0x2858 <ldexp+0x6c>
    2856:	de c0       	rjmp	.+444    	; 0x2a14 <__fp_mpack>
    2858:	70 ce       	rjmp	.-800    	; 0x253a <__fp_nan>
    285a:	68 94       	set
    285c:	68 ce       	rjmp	.-816    	; 0x252e <__fp_inf>

0000285e <log>:
    285e:	97 de       	rcall	.-722    	; 0x258e <__fp_splitA>
    2860:	c8 f3       	brcs	.-14     	; 0x2854 <ldexp+0x68>
    2862:	99 23       	and	r25, r25
    2864:	d1 f3       	breq	.-12     	; 0x285a <ldexp+0x6e>
    2866:	c6 f3       	brts	.-16     	; 0x2858 <ldexp+0x6c>
    2868:	df 93       	push	r29
    286a:	cf 93       	push	r28
    286c:	1f 93       	push	r17
    286e:	0f 93       	push	r16
    2870:	ff 92       	push	r15
    2872:	c9 2f       	mov	r28, r25
    2874:	dd 27       	eor	r29, r29
    2876:	88 23       	and	r24, r24
    2878:	2a f0       	brmi	.+10     	; 0x2884 <log+0x26>
    287a:	21 97       	sbiw	r28, 0x01	; 1
    287c:	66 0f       	add	r22, r22
    287e:	77 1f       	adc	r23, r23
    2880:	88 1f       	adc	r24, r24
    2882:	da f7       	brpl	.-10     	; 0x287a <log+0x1c>
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	40 e8       	ldi	r20, 0x80	; 128
    288a:	5f eb       	ldi	r21, 0xBF	; 191
    288c:	9f e3       	ldi	r25, 0x3F	; 63
    288e:	88 39       	cpi	r24, 0x98	; 152
    2890:	20 f0       	brcs	.+8      	; 0x289a <log+0x3c>
    2892:	80 3e       	cpi	r24, 0xE0	; 224
    2894:	30 f0       	brcs	.+12     	; 0x28a2 <log+0x44>
    2896:	21 96       	adiw	r28, 0x01	; 1
    2898:	8f 77       	andi	r24, 0x7F	; 127
    289a:	80 dd       	rcall	.-1280   	; 0x239c <__addsf3>
    289c:	ea ef       	ldi	r30, 0xFA	; 250
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	03 c0       	rjmp	.+6      	; 0x28a8 <log+0x4a>
    28a2:	7c dd       	rcall	.-1288   	; 0x239c <__addsf3>
    28a4:	e7 e2       	ldi	r30, 0x27	; 39
    28a6:	f1 e0       	ldi	r31, 0x01	; 1
    28a8:	73 df       	rcall	.-282    	; 0x2790 <__fp_powser>
    28aa:	8b 01       	movw	r16, r22
    28ac:	be 01       	movw	r22, r28
    28ae:	ec 01       	movw	r28, r24
    28b0:	fb 2e       	mov	r15, r27
    28b2:	6f 57       	subi	r22, 0x7F	; 127
    28b4:	71 09       	sbc	r23, r1
    28b6:	75 95       	asr	r23
    28b8:	77 1f       	adc	r23, r23
    28ba:	88 0b       	sbc	r24, r24
    28bc:	99 0b       	sbc	r25, r25
    28be:	d8 dd       	rcall	.-1104   	; 0x2470 <__floatsisf>
    28c0:	28 e1       	ldi	r18, 0x18	; 24
    28c2:	32 e7       	ldi	r19, 0x72	; 114
    28c4:	41 e3       	ldi	r20, 0x31	; 49
    28c6:	5f e3       	ldi	r21, 0x3F	; 63
    28c8:	8f de       	rcall	.-738    	; 0x25e8 <__mulsf3x>
    28ca:	af 2d       	mov	r26, r15
    28cc:	98 01       	movw	r18, r16
    28ce:	ae 01       	movw	r20, r28
    28d0:	ff 90       	pop	r15
    28d2:	0f 91       	pop	r16
    28d4:	1f 91       	pop	r17
    28d6:	cf 91       	pop	r28
    28d8:	df 91       	pop	r29
    28da:	71 dd       	rcall	.-1310   	; 0x23be <__addsf3x>
    28dc:	3f ce       	rjmp	.-898    	; 0x255c <__fp_round>

000028de <modf>:
    28de:	fa 01       	movw	r30, r20
    28e0:	dc 01       	movw	r26, r24
    28e2:	aa 0f       	add	r26, r26
    28e4:	bb 1f       	adc	r27, r27
    28e6:	9b 01       	movw	r18, r22
    28e8:	ac 01       	movw	r20, r24
    28ea:	bf 57       	subi	r27, 0x7F	; 127
    28ec:	28 f4       	brcc	.+10     	; 0x28f8 <modf+0x1a>
    28ee:	22 27       	eor	r18, r18
    28f0:	33 27       	eor	r19, r19
    28f2:	44 27       	eor	r20, r20
    28f4:	50 78       	andi	r21, 0x80	; 128
    28f6:	1f c0       	rjmp	.+62     	; 0x2936 <modf+0x58>
    28f8:	b7 51       	subi	r27, 0x17	; 23
    28fa:	88 f4       	brcc	.+34     	; 0x291e <modf+0x40>
    28fc:	ab 2f       	mov	r26, r27
    28fe:	00 24       	eor	r0, r0
    2900:	46 95       	lsr	r20
    2902:	37 95       	ror	r19
    2904:	27 95       	ror	r18
    2906:	01 1c       	adc	r0, r1
    2908:	a3 95       	inc	r26
    290a:	d2 f3       	brmi	.-12     	; 0x2900 <modf+0x22>
    290c:	00 20       	and	r0, r0
    290e:	69 f0       	breq	.+26     	; 0x292a <modf+0x4c>
    2910:	22 0f       	add	r18, r18
    2912:	33 1f       	adc	r19, r19
    2914:	44 1f       	adc	r20, r20
    2916:	b3 95       	inc	r27
    2918:	da f3       	brmi	.-10     	; 0x2910 <modf+0x32>
    291a:	0d d0       	rcall	.+26     	; 0x2936 <modf+0x58>
    291c:	3e cd       	rjmp	.-1412   	; 0x239a <__subsf3>
    291e:	61 30       	cpi	r22, 0x01	; 1
    2920:	71 05       	cpc	r23, r1
    2922:	a0 e8       	ldi	r26, 0x80	; 128
    2924:	8a 07       	cpc	r24, r26
    2926:	b9 46       	sbci	r27, 0x69	; 105
    2928:	30 f4       	brcc	.+12     	; 0x2936 <modf+0x58>
    292a:	9b 01       	movw	r18, r22
    292c:	ac 01       	movw	r20, r24
    292e:	66 27       	eor	r22, r22
    2930:	77 27       	eor	r23, r23
    2932:	88 27       	eor	r24, r24
    2934:	90 78       	andi	r25, 0x80	; 128
    2936:	30 96       	adiw	r30, 0x00	; 0
    2938:	21 f0       	breq	.+8      	; 0x2942 <modf+0x64>
    293a:	20 83       	st	Z, r18
    293c:	31 83       	std	Z+1, r19	; 0x01
    293e:	42 83       	std	Z+2, r20	; 0x02
    2940:	53 83       	std	Z+3, r21	; 0x03
    2942:	08 95       	ret

00002944 <__divsf3>:
    2944:	0c d0       	rcall	.+24     	; 0x295e <__divsf3x>
    2946:	0a ce       	rjmp	.-1004   	; 0x255c <__fp_round>
    2948:	02 de       	rcall	.-1020   	; 0x254e <__fp_pscB>
    294a:	40 f0       	brcs	.+16     	; 0x295c <__divsf3+0x18>
    294c:	f9 dd       	rcall	.-1038   	; 0x2540 <__fp_pscA>
    294e:	30 f0       	brcs	.+12     	; 0x295c <__divsf3+0x18>
    2950:	21 f4       	brne	.+8      	; 0x295a <__divsf3+0x16>
    2952:	5f 3f       	cpi	r21, 0xFF	; 255
    2954:	19 f0       	breq	.+6      	; 0x295c <__divsf3+0x18>
    2956:	eb cd       	rjmp	.-1066   	; 0x252e <__fp_inf>
    2958:	51 11       	cpse	r21, r1
    295a:	34 ce       	rjmp	.-920    	; 0x25c4 <__fp_szero>
    295c:	ee cd       	rjmp	.-1060   	; 0x253a <__fp_nan>

0000295e <__divsf3x>:
    295e:	0f de       	rcall	.-994    	; 0x257e <__fp_split3>
    2960:	98 f3       	brcs	.-26     	; 0x2948 <__divsf3+0x4>

00002962 <__divsf3_pse>:
    2962:	99 23       	and	r25, r25
    2964:	c9 f3       	breq	.-14     	; 0x2958 <__divsf3+0x14>
    2966:	55 23       	and	r21, r21
    2968:	b1 f3       	breq	.-20     	; 0x2956 <__divsf3+0x12>
    296a:	95 1b       	sub	r25, r21
    296c:	55 0b       	sbc	r21, r21
    296e:	bb 27       	eor	r27, r27
    2970:	aa 27       	eor	r26, r26
    2972:	62 17       	cp	r22, r18
    2974:	73 07       	cpc	r23, r19
    2976:	84 07       	cpc	r24, r20
    2978:	38 f0       	brcs	.+14     	; 0x2988 <__divsf3_pse+0x26>
    297a:	9f 5f       	subi	r25, 0xFF	; 255
    297c:	5f 4f       	sbci	r21, 0xFF	; 255
    297e:	22 0f       	add	r18, r18
    2980:	33 1f       	adc	r19, r19
    2982:	44 1f       	adc	r20, r20
    2984:	aa 1f       	adc	r26, r26
    2986:	a9 f3       	breq	.-22     	; 0x2972 <__divsf3_pse+0x10>
    2988:	33 d0       	rcall	.+102    	; 0x29f0 <__divsf3_pse+0x8e>
    298a:	0e 2e       	mov	r0, r30
    298c:	3a f0       	brmi	.+14     	; 0x299c <__divsf3_pse+0x3a>
    298e:	e0 e8       	ldi	r30, 0x80	; 128
    2990:	30 d0       	rcall	.+96     	; 0x29f2 <__divsf3_pse+0x90>
    2992:	91 50       	subi	r25, 0x01	; 1
    2994:	50 40       	sbci	r21, 0x00	; 0
    2996:	e6 95       	lsr	r30
    2998:	00 1c       	adc	r0, r0
    299a:	ca f7       	brpl	.-14     	; 0x298e <__divsf3_pse+0x2c>
    299c:	29 d0       	rcall	.+82     	; 0x29f0 <__divsf3_pse+0x8e>
    299e:	fe 2f       	mov	r31, r30
    29a0:	27 d0       	rcall	.+78     	; 0x29f0 <__divsf3_pse+0x8e>
    29a2:	66 0f       	add	r22, r22
    29a4:	77 1f       	adc	r23, r23
    29a6:	88 1f       	adc	r24, r24
    29a8:	bb 1f       	adc	r27, r27
    29aa:	26 17       	cp	r18, r22
    29ac:	37 07       	cpc	r19, r23
    29ae:	48 07       	cpc	r20, r24
    29b0:	ab 07       	cpc	r26, r27
    29b2:	b0 e8       	ldi	r27, 0x80	; 128
    29b4:	09 f0       	breq	.+2      	; 0x29b8 <__divsf3_pse+0x56>
    29b6:	bb 0b       	sbc	r27, r27
    29b8:	80 2d       	mov	r24, r0
    29ba:	bf 01       	movw	r22, r30
    29bc:	ff 27       	eor	r31, r31
    29be:	93 58       	subi	r25, 0x83	; 131
    29c0:	5f 4f       	sbci	r21, 0xFF	; 255
    29c2:	2a f0       	brmi	.+10     	; 0x29ce <__divsf3_pse+0x6c>
    29c4:	9e 3f       	cpi	r25, 0xFE	; 254
    29c6:	51 05       	cpc	r21, r1
    29c8:	68 f0       	brcs	.+26     	; 0x29e4 <__divsf3_pse+0x82>
    29ca:	b1 cd       	rjmp	.-1182   	; 0x252e <__fp_inf>
    29cc:	fb cd       	rjmp	.-1034   	; 0x25c4 <__fp_szero>
    29ce:	5f 3f       	cpi	r21, 0xFF	; 255
    29d0:	ec f3       	brlt	.-6      	; 0x29cc <__divsf3_pse+0x6a>
    29d2:	98 3e       	cpi	r25, 0xE8	; 232
    29d4:	dc f3       	brlt	.-10     	; 0x29cc <__divsf3_pse+0x6a>
    29d6:	86 95       	lsr	r24
    29d8:	77 95       	ror	r23
    29da:	67 95       	ror	r22
    29dc:	b7 95       	ror	r27
    29de:	f7 95       	ror	r31
    29e0:	9f 5f       	subi	r25, 0xFF	; 255
    29e2:	c9 f7       	brne	.-14     	; 0x29d6 <__divsf3_pse+0x74>
    29e4:	88 0f       	add	r24, r24
    29e6:	91 1d       	adc	r25, r1
    29e8:	96 95       	lsr	r25
    29ea:	87 95       	ror	r24
    29ec:	97 f9       	bld	r25, 7
    29ee:	08 95       	ret
    29f0:	e1 e0       	ldi	r30, 0x01	; 1
    29f2:	66 0f       	add	r22, r22
    29f4:	77 1f       	adc	r23, r23
    29f6:	88 1f       	adc	r24, r24
    29f8:	bb 1f       	adc	r27, r27
    29fa:	62 17       	cp	r22, r18
    29fc:	73 07       	cpc	r23, r19
    29fe:	84 07       	cpc	r24, r20
    2a00:	ba 07       	cpc	r27, r26
    2a02:	20 f0       	brcs	.+8      	; 0x2a0c <__divsf3_pse+0xaa>
    2a04:	62 1b       	sub	r22, r18
    2a06:	73 0b       	sbc	r23, r19
    2a08:	84 0b       	sbc	r24, r20
    2a0a:	ba 0b       	sbc	r27, r26
    2a0c:	ee 1f       	adc	r30, r30
    2a0e:	88 f7       	brcc	.-30     	; 0x29f2 <__divsf3_pse+0x90>
    2a10:	e0 95       	com	r30
    2a12:	08 95       	ret

00002a14 <__fp_mpack>:
    2a14:	9f 3f       	cpi	r25, 0xFF	; 255
    2a16:	31 f0       	breq	.+12     	; 0x2a24 <__fp_mpack_finite+0xc>

00002a18 <__fp_mpack_finite>:
    2a18:	91 50       	subi	r25, 0x01	; 1
    2a1a:	20 f4       	brcc	.+8      	; 0x2a24 <__fp_mpack_finite+0xc>
    2a1c:	87 95       	ror	r24
    2a1e:	77 95       	ror	r23
    2a20:	67 95       	ror	r22
    2a22:	b7 95       	ror	r27
    2a24:	88 0f       	add	r24, r24
    2a26:	91 1d       	adc	r25, r1
    2a28:	96 95       	lsr	r25
    2a2a:	87 95       	ror	r24
    2a2c:	97 f9       	bld	r25, 7
    2a2e:	08 95       	ret

00002a30 <dtostrf>:
    2a30:	ef 92       	push	r14
    2a32:	0f 93       	push	r16
    2a34:	1f 93       	push	r17
    2a36:	cf 93       	push	r28
    2a38:	df 93       	push	r29
    2a3a:	e8 01       	movw	r28, r16
    2a3c:	47 ff       	sbrs	r20, 7
    2a3e:	02 c0       	rjmp	.+4      	; 0x2a44 <dtostrf+0x14>
    2a40:	34 e1       	ldi	r19, 0x14	; 20
    2a42:	01 c0       	rjmp	.+2      	; 0x2a46 <dtostrf+0x16>
    2a44:	34 e0       	ldi	r19, 0x04	; 4
    2a46:	e4 2f       	mov	r30, r20
    2a48:	ff 27       	eor	r31, r31
    2a4a:	e7 fd       	sbrc	r30, 7
    2a4c:	f0 95       	com	r31
    2a4e:	f7 ff       	sbrs	r31, 7
    2a50:	03 c0       	rjmp	.+6      	; 0x2a58 <dtostrf+0x28>
    2a52:	f1 95       	neg	r31
    2a54:	e1 95       	neg	r30
    2a56:	f1 09       	sbc	r31, r1
    2a58:	e3 2e       	mov	r14, r19
    2a5a:	02 2f       	mov	r16, r18
    2a5c:	2e 2f       	mov	r18, r30
    2a5e:	ae 01       	movw	r20, r28
    2a60:	61 d0       	rcall	.+194    	; 0x2b24 <dtoa_prf>
    2a62:	ce 01       	movw	r24, r28
    2a64:	df 91       	pop	r29
    2a66:	cf 91       	pop	r28
    2a68:	1f 91       	pop	r17
    2a6a:	0f 91       	pop	r16
    2a6c:	ef 90       	pop	r14
    2a6e:	08 95       	ret

00002a70 <memcmp>:
    2a70:	fb 01       	movw	r30, r22
    2a72:	dc 01       	movw	r26, r24
    2a74:	04 c0       	rjmp	.+8      	; 0x2a7e <memcmp+0xe>
    2a76:	8d 91       	ld	r24, X+
    2a78:	01 90       	ld	r0, Z+
    2a7a:	80 19       	sub	r24, r0
    2a7c:	21 f4       	brne	.+8      	; 0x2a86 <memcmp+0x16>
    2a7e:	41 50       	subi	r20, 0x01	; 1
    2a80:	50 40       	sbci	r21, 0x00	; 0
    2a82:	c8 f7       	brcc	.-14     	; 0x2a76 <memcmp+0x6>
    2a84:	88 1b       	sub	r24, r24
    2a86:	99 0b       	sbc	r25, r25
    2a88:	08 95       	ret

00002a8a <memcpy>:
    2a8a:	fb 01       	movw	r30, r22
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	02 c0       	rjmp	.+4      	; 0x2a94 <memcpy+0xa>
    2a90:	01 90       	ld	r0, Z+
    2a92:	0d 92       	st	X+, r0
    2a94:	41 50       	subi	r20, 0x01	; 1
    2a96:	50 40       	sbci	r21, 0x00	; 0
    2a98:	d8 f7       	brcc	.-10     	; 0x2a90 <memcpy+0x6>
    2a9a:	08 95       	ret

00002a9c <memset>:
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	01 c0       	rjmp	.+2      	; 0x2aa2 <memset+0x6>
    2aa0:	6d 93       	st	X+, r22
    2aa2:	41 50       	subi	r20, 0x01	; 1
    2aa4:	50 40       	sbci	r21, 0x00	; 0
    2aa6:	e0 f7       	brcc	.-8      	; 0x2aa0 <memset+0x4>
    2aa8:	08 95       	ret

00002aaa <__itoa_ncheck>:
    2aaa:	bb 27       	eor	r27, r27
    2aac:	4a 30       	cpi	r20, 0x0A	; 10
    2aae:	31 f4       	brne	.+12     	; 0x2abc <__itoa_ncheck+0x12>
    2ab0:	99 23       	and	r25, r25
    2ab2:	22 f4       	brpl	.+8      	; 0x2abc <__itoa_ncheck+0x12>
    2ab4:	bd e2       	ldi	r27, 0x2D	; 45
    2ab6:	90 95       	com	r25
    2ab8:	81 95       	neg	r24
    2aba:	9f 4f       	sbci	r25, 0xFF	; 255
    2abc:	01 c0       	rjmp	.+2      	; 0x2ac0 <__utoa_common>

00002abe <__utoa_ncheck>:
    2abe:	bb 27       	eor	r27, r27

00002ac0 <__utoa_common>:
    2ac0:	fb 01       	movw	r30, r22
    2ac2:	55 27       	eor	r21, r21
    2ac4:	aa 27       	eor	r26, r26
    2ac6:	88 0f       	add	r24, r24
    2ac8:	99 1f       	adc	r25, r25
    2aca:	aa 1f       	adc	r26, r26
    2acc:	a4 17       	cp	r26, r20
    2ace:	10 f0       	brcs	.+4      	; 0x2ad4 <__utoa_common+0x14>
    2ad0:	a4 1b       	sub	r26, r20
    2ad2:	83 95       	inc	r24
    2ad4:	50 51       	subi	r21, 0x10	; 16
    2ad6:	b9 f7       	brne	.-18     	; 0x2ac6 <__utoa_common+0x6>
    2ad8:	a0 5d       	subi	r26, 0xD0	; 208
    2ada:	aa 33       	cpi	r26, 0x3A	; 58
    2adc:	08 f0       	brcs	.+2      	; 0x2ae0 <__utoa_common+0x20>
    2ade:	a9 5d       	subi	r26, 0xD9	; 217
    2ae0:	a1 93       	st	Z+, r26
    2ae2:	00 97       	sbiw	r24, 0x00	; 0
    2ae4:	79 f7       	brne	.-34     	; 0x2ac4 <__utoa_common+0x4>
    2ae6:	b1 11       	cpse	r27, r1
    2ae8:	b1 93       	st	Z+, r27
    2aea:	11 92       	st	Z+, r1
    2aec:	cb 01       	movw	r24, r22
    2aee:	6f c2       	rjmp	.+1246   	; 0x2fce <strrev>

00002af0 <__eerd_byte_m32u4>:
    2af0:	f9 99       	sbic	0x1f, 1	; 31
    2af2:	fe cf       	rjmp	.-4      	; 0x2af0 <__eerd_byte_m32u4>
    2af4:	92 bd       	out	0x22, r25	; 34
    2af6:	81 bd       	out	0x21, r24	; 33
    2af8:	f8 9a       	sbi	0x1f, 0	; 31
    2afa:	99 27       	eor	r25, r25
    2afc:	80 b5       	in	r24, 0x20	; 32
    2afe:	08 95       	ret

00002b00 <__eeupd_byte_m32u4>:
    2b00:	26 2f       	mov	r18, r22

00002b02 <__eeupd_r18_m32u4>:
    2b02:	f9 99       	sbic	0x1f, 1	; 31
    2b04:	fe cf       	rjmp	.-4      	; 0x2b02 <__eeupd_r18_m32u4>
    2b06:	92 bd       	out	0x22, r25	; 34
    2b08:	81 bd       	out	0x21, r24	; 33
    2b0a:	f8 9a       	sbi	0x1f, 0	; 31
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	00 b4       	in	r0, 0x20	; 32
    2b10:	02 16       	cp	r0, r18
    2b12:	39 f0       	breq	.+14     	; 0x2b22 <__eeupd_r18_m32u4+0x20>
    2b14:	1f ba       	out	0x1f, r1	; 31
    2b16:	20 bd       	out	0x20, r18	; 32
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	fa 9a       	sbi	0x1f, 2	; 31
    2b1e:	f9 9a       	sbi	0x1f, 1	; 31
    2b20:	0f be       	out	0x3f, r0	; 63
    2b22:	08 95       	ret

00002b24 <dtoa_prf>:
    2b24:	6f 92       	push	r6
    2b26:	7f 92       	push	r7
    2b28:	9f 92       	push	r9
    2b2a:	af 92       	push	r10
    2b2c:	bf 92       	push	r11
    2b2e:	cf 92       	push	r12
    2b30:	df 92       	push	r13
    2b32:	ef 92       	push	r14
    2b34:	ff 92       	push	r15
    2b36:	0f 93       	push	r16
    2b38:	1f 93       	push	r17
    2b3a:	cf 93       	push	r28
    2b3c:	df 93       	push	r29
    2b3e:	cd b7       	in	r28, 0x3d	; 61
    2b40:	de b7       	in	r29, 0x3e	; 62
    2b42:	29 97       	sbiw	r28, 0x09	; 9
    2b44:	0f b6       	in	r0, 0x3f	; 63
    2b46:	f8 94       	cli
    2b48:	de bf       	out	0x3e, r29	; 62
    2b4a:	0f be       	out	0x3f, r0	; 63
    2b4c:	cd bf       	out	0x3d, r28	; 61
    2b4e:	6a 01       	movw	r12, r20
    2b50:	b2 2e       	mov	r11, r18
    2b52:	10 2f       	mov	r17, r16
    2b54:	0c 33       	cpi	r16, 0x3C	; 60
    2b56:	20 f4       	brcc	.+8      	; 0x2b60 <dtoa_prf+0x3c>
    2b58:	ff 24       	eor	r15, r15
    2b5a:	f3 94       	inc	r15
    2b5c:	f0 0e       	add	r15, r16
    2b5e:	02 c0       	rjmp	.+4      	; 0x2b64 <dtoa_prf+0x40>
    2b60:	4c e3       	ldi	r20, 0x3C	; 60
    2b62:	f4 2e       	mov	r15, r20
    2b64:	0f 2d       	mov	r16, r15
    2b66:	27 e0       	ldi	r18, 0x07	; 7
    2b68:	ae 01       	movw	r20, r28
    2b6a:	4f 5f       	subi	r20, 0xFF	; 255
    2b6c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b6e:	57 d1       	rcall	.+686    	; 0x2e1e <__ftoa_engine>
    2b70:	79 81       	ldd	r23, Y+1	; 0x01
    2b72:	27 2f       	mov	r18, r23
    2b74:	29 70       	andi	r18, 0x09	; 9
    2b76:	21 30       	cpi	r18, 0x01	; 1
    2b78:	31 f0       	breq	.+12     	; 0x2b86 <dtoa_prf+0x62>
    2b7a:	e1 fc       	sbrc	r14, 1
    2b7c:	06 c0       	rjmp	.+12     	; 0x2b8a <dtoa_prf+0x66>
    2b7e:	e0 fc       	sbrc	r14, 0
    2b80:	06 c0       	rjmp	.+12     	; 0x2b8e <dtoa_prf+0x6a>
    2b82:	60 e0       	ldi	r22, 0x00	; 0
    2b84:	05 c0       	rjmp	.+10     	; 0x2b90 <dtoa_prf+0x6c>
    2b86:	6d e2       	ldi	r22, 0x2D	; 45
    2b88:	03 c0       	rjmp	.+6      	; 0x2b90 <dtoa_prf+0x6c>
    2b8a:	6b e2       	ldi	r22, 0x2B	; 43
    2b8c:	01 c0       	rjmp	.+2      	; 0x2b90 <dtoa_prf+0x6c>
    2b8e:	60 e2       	ldi	r22, 0x20	; 32
    2b90:	ae 2d       	mov	r26, r14
    2b92:	a0 71       	andi	r26, 0x10	; 16
    2b94:	73 ff       	sbrs	r23, 3
    2b96:	36 c0       	rjmp	.+108    	; 0x2c04 <dtoa_prf+0xe0>
    2b98:	66 23       	and	r22, r22
    2b9a:	11 f0       	breq	.+4      	; 0x2ba0 <dtoa_prf+0x7c>
    2b9c:	84 e0       	ldi	r24, 0x04	; 4
    2b9e:	01 c0       	rjmp	.+2      	; 0x2ba2 <dtoa_prf+0x7e>
    2ba0:	83 e0       	ldi	r24, 0x03	; 3
    2ba2:	8b 15       	cp	r24, r11
    2ba4:	10 f4       	brcc	.+4      	; 0x2baa <dtoa_prf+0x86>
    2ba6:	b8 1a       	sub	r11, r24
    2ba8:	01 c0       	rjmp	.+2      	; 0x2bac <dtoa_prf+0x88>
    2baa:	b1 2c       	mov	r11, r1
    2bac:	a1 11       	cpse	r26, r1
    2bae:	0b c0       	rjmp	.+22     	; 0x2bc6 <dtoa_prf+0xa2>
    2bb0:	f6 01       	movw	r30, r12
    2bb2:	8b 2d       	mov	r24, r11
    2bb4:	90 e2       	ldi	r25, 0x20	; 32
    2bb6:	88 23       	and	r24, r24
    2bb8:	19 f0       	breq	.+6      	; 0x2bc0 <dtoa_prf+0x9c>
    2bba:	91 93       	st	Z+, r25
    2bbc:	81 50       	subi	r24, 0x01	; 1
    2bbe:	fb cf       	rjmp	.-10     	; 0x2bb6 <dtoa_prf+0x92>
    2bc0:	cb 0c       	add	r12, r11
    2bc2:	d1 1c       	adc	r13, r1
    2bc4:	b1 2c       	mov	r11, r1
    2bc6:	66 23       	and	r22, r22
    2bc8:	31 f0       	breq	.+12     	; 0x2bd6 <dtoa_prf+0xb2>
    2bca:	f6 01       	movw	r30, r12
    2bcc:	60 83       	st	Z, r22
    2bce:	96 01       	movw	r18, r12
    2bd0:	2f 5f       	subi	r18, 0xFF	; 255
    2bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd4:	69 01       	movw	r12, r18
    2bd6:	c6 01       	movw	r24, r12
    2bd8:	03 96       	adiw	r24, 0x03	; 3
    2bda:	e2 fe       	sbrs	r14, 2
    2bdc:	05 c0       	rjmp	.+10     	; 0x2be8 <dtoa_prf+0xc4>
    2bde:	2e e4       	ldi	r18, 0x4E	; 78
    2be0:	f6 01       	movw	r30, r12
    2be2:	20 83       	st	Z, r18
    2be4:	31 e4       	ldi	r19, 0x41	; 65
    2be6:	04 c0       	rjmp	.+8      	; 0x2bf0 <dtoa_prf+0xcc>
    2be8:	2e e6       	ldi	r18, 0x6E	; 110
    2bea:	f6 01       	movw	r30, r12
    2bec:	20 83       	st	Z, r18
    2bee:	31 e6       	ldi	r19, 0x61	; 97
    2bf0:	31 83       	std	Z+1, r19	; 0x01
    2bf2:	22 83       	std	Z+2, r18	; 0x02
    2bf4:	fc 01       	movw	r30, r24
    2bf6:	2b 2d       	mov	r18, r11
    2bf8:	30 e2       	ldi	r19, 0x20	; 32
    2bfa:	22 23       	and	r18, r18
    2bfc:	f1 f1       	breq	.+124    	; 0x2c7a <dtoa_prf+0x156>
    2bfe:	31 93       	st	Z+, r19
    2c00:	21 50       	subi	r18, 0x01	; 1
    2c02:	fb cf       	rjmp	.-10     	; 0x2bfa <dtoa_prf+0xd6>
    2c04:	72 ff       	sbrs	r23, 2
    2c06:	40 c0       	rjmp	.+128    	; 0x2c88 <dtoa_prf+0x164>
    2c08:	66 23       	and	r22, r22
    2c0a:	11 f0       	breq	.+4      	; 0x2c10 <dtoa_prf+0xec>
    2c0c:	84 e0       	ldi	r24, 0x04	; 4
    2c0e:	01 c0       	rjmp	.+2      	; 0x2c12 <dtoa_prf+0xee>
    2c10:	83 e0       	ldi	r24, 0x03	; 3
    2c12:	8b 15       	cp	r24, r11
    2c14:	10 f4       	brcc	.+4      	; 0x2c1a <dtoa_prf+0xf6>
    2c16:	b8 1a       	sub	r11, r24
    2c18:	01 c0       	rjmp	.+2      	; 0x2c1c <dtoa_prf+0xf8>
    2c1a:	b1 2c       	mov	r11, r1
    2c1c:	a1 11       	cpse	r26, r1
    2c1e:	0b c0       	rjmp	.+22     	; 0x2c36 <dtoa_prf+0x112>
    2c20:	f6 01       	movw	r30, r12
    2c22:	8b 2d       	mov	r24, r11
    2c24:	90 e2       	ldi	r25, 0x20	; 32
    2c26:	88 23       	and	r24, r24
    2c28:	19 f0       	breq	.+6      	; 0x2c30 <dtoa_prf+0x10c>
    2c2a:	91 93       	st	Z+, r25
    2c2c:	81 50       	subi	r24, 0x01	; 1
    2c2e:	fb cf       	rjmp	.-10     	; 0x2c26 <dtoa_prf+0x102>
    2c30:	cb 0c       	add	r12, r11
    2c32:	d1 1c       	adc	r13, r1
    2c34:	b1 2c       	mov	r11, r1
    2c36:	66 23       	and	r22, r22
    2c38:	31 f0       	breq	.+12     	; 0x2c46 <dtoa_prf+0x122>
    2c3a:	f6 01       	movw	r30, r12
    2c3c:	60 83       	st	Z, r22
    2c3e:	96 01       	movw	r18, r12
    2c40:	2f 5f       	subi	r18, 0xFF	; 255
    2c42:	3f 4f       	sbci	r19, 0xFF	; 255
    2c44:	69 01       	movw	r12, r18
    2c46:	c6 01       	movw	r24, r12
    2c48:	03 96       	adiw	r24, 0x03	; 3
    2c4a:	e2 fe       	sbrs	r14, 2
    2c4c:	07 c0       	rjmp	.+14     	; 0x2c5c <dtoa_prf+0x138>
    2c4e:	29 e4       	ldi	r18, 0x49	; 73
    2c50:	f6 01       	movw	r30, r12
    2c52:	20 83       	st	Z, r18
    2c54:	2e e4       	ldi	r18, 0x4E	; 78
    2c56:	21 83       	std	Z+1, r18	; 0x01
    2c58:	26 e4       	ldi	r18, 0x46	; 70
    2c5a:	06 c0       	rjmp	.+12     	; 0x2c68 <dtoa_prf+0x144>
    2c5c:	29 e6       	ldi	r18, 0x69	; 105
    2c5e:	f6 01       	movw	r30, r12
    2c60:	20 83       	st	Z, r18
    2c62:	2e e6       	ldi	r18, 0x6E	; 110
    2c64:	21 83       	std	Z+1, r18	; 0x01
    2c66:	26 e6       	ldi	r18, 0x66	; 102
    2c68:	22 83       	std	Z+2, r18	; 0x02
    2c6a:	fc 01       	movw	r30, r24
    2c6c:	2b 2d       	mov	r18, r11
    2c6e:	30 e2       	ldi	r19, 0x20	; 32
    2c70:	22 23       	and	r18, r18
    2c72:	19 f0       	breq	.+6      	; 0x2c7a <dtoa_prf+0x156>
    2c74:	31 93       	st	Z+, r19
    2c76:	21 50       	subi	r18, 0x01	; 1
    2c78:	fb cf       	rjmp	.-10     	; 0x2c70 <dtoa_prf+0x14c>
    2c7a:	fc 01       	movw	r30, r24
    2c7c:	eb 0d       	add	r30, r11
    2c7e:	f1 1d       	adc	r31, r1
    2c80:	10 82       	st	Z, r1
    2c82:	8e ef       	ldi	r24, 0xFE	; 254
    2c84:	9f ef       	ldi	r25, 0xFF	; 255
    2c86:	b7 c0       	rjmp	.+366    	; 0x2df6 <dtoa_prf+0x2d2>
    2c88:	b1 e0       	ldi	r27, 0x01	; 1
    2c8a:	61 11       	cpse	r22, r1
    2c8c:	01 c0       	rjmp	.+2      	; 0x2c90 <dtoa_prf+0x16c>
    2c8e:	b0 e0       	ldi	r27, 0x00	; 0
    2c90:	4b 2f       	mov	r20, r27
    2c92:	50 e0       	ldi	r21, 0x00	; 0
    2c94:	18 16       	cp	r1, r24
    2c96:	19 06       	cpc	r1, r25
    2c98:	24 f4       	brge	.+8      	; 0x2ca2 <dtoa_prf+0x17e>
    2c9a:	9c 01       	movw	r18, r24
    2c9c:	2f 5f       	subi	r18, 0xFF	; 255
    2c9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2ca0:	02 c0       	rjmp	.+4      	; 0x2ca6 <dtoa_prf+0x182>
    2ca2:	21 e0       	ldi	r18, 0x01	; 1
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	24 0f       	add	r18, r20
    2ca8:	35 1f       	adc	r19, r21
    2caa:	11 23       	and	r17, r17
    2cac:	29 f0       	breq	.+10     	; 0x2cb8 <dtoa_prf+0x194>
    2cae:	41 2f       	mov	r20, r17
    2cb0:	50 e0       	ldi	r21, 0x00	; 0
    2cb2:	4f 5f       	subi	r20, 0xFF	; 255
    2cb4:	5f 4f       	sbci	r21, 0xFF	; 255
    2cb6:	02 c0       	rjmp	.+4      	; 0x2cbc <dtoa_prf+0x198>
    2cb8:	40 e0       	ldi	r20, 0x00	; 0
    2cba:	50 e0       	ldi	r21, 0x00	; 0
    2cbc:	42 0f       	add	r20, r18
    2cbe:	53 1f       	adc	r21, r19
    2cc0:	2b 2d       	mov	r18, r11
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	42 17       	cp	r20, r18
    2cc6:	53 07       	cpc	r21, r19
    2cc8:	14 f4       	brge	.+4      	; 0x2cce <dtoa_prf+0x1aa>
    2cca:	b4 1a       	sub	r11, r20
    2ccc:	01 c0       	rjmp	.+2      	; 0x2cd0 <dtoa_prf+0x1ac>
    2cce:	b1 2c       	mov	r11, r1
    2cd0:	2e 2d       	mov	r18, r14
    2cd2:	28 71       	andi	r18, 0x18	; 24
    2cd4:	59 f4       	brne	.+22     	; 0x2cec <dtoa_prf+0x1c8>
    2cd6:	f6 01       	movw	r30, r12
    2cd8:	2b 2d       	mov	r18, r11
    2cda:	30 e2       	ldi	r19, 0x20	; 32
    2cdc:	22 23       	and	r18, r18
    2cde:	19 f0       	breq	.+6      	; 0x2ce6 <dtoa_prf+0x1c2>
    2ce0:	31 93       	st	Z+, r19
    2ce2:	21 50       	subi	r18, 0x01	; 1
    2ce4:	fb cf       	rjmp	.-10     	; 0x2cdc <dtoa_prf+0x1b8>
    2ce6:	cb 0c       	add	r12, r11
    2ce8:	d1 1c       	adc	r13, r1
    2cea:	b1 2c       	mov	r11, r1
    2cec:	bb 23       	and	r27, r27
    2cee:	31 f0       	breq	.+12     	; 0x2cfc <dtoa_prf+0x1d8>
    2cf0:	f6 01       	movw	r30, r12
    2cf2:	60 83       	st	Z, r22
    2cf4:	96 01       	movw	r18, r12
    2cf6:	2f 5f       	subi	r18, 0xFF	; 255
    2cf8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cfa:	69 01       	movw	r12, r18
    2cfc:	a1 11       	cpse	r26, r1
    2cfe:	0b c0       	rjmp	.+22     	; 0x2d16 <dtoa_prf+0x1f2>
    2d00:	f6 01       	movw	r30, r12
    2d02:	2b 2d       	mov	r18, r11
    2d04:	30 e3       	ldi	r19, 0x30	; 48
    2d06:	22 23       	and	r18, r18
    2d08:	19 f0       	breq	.+6      	; 0x2d10 <dtoa_prf+0x1ec>
    2d0a:	31 93       	st	Z+, r19
    2d0c:	21 50       	subi	r18, 0x01	; 1
    2d0e:	fb cf       	rjmp	.-10     	; 0x2d06 <dtoa_prf+0x1e2>
    2d10:	cb 0c       	add	r12, r11
    2d12:	d1 1c       	adc	r13, r1
    2d14:	b1 2c       	mov	r11, r1
    2d16:	f8 0e       	add	r15, r24
    2d18:	0a 81       	ldd	r16, Y+2	; 0x02
    2d1a:	37 2f       	mov	r19, r23
    2d1c:	30 71       	andi	r19, 0x10	; 16
    2d1e:	a3 2e       	mov	r10, r19
    2d20:	74 ff       	sbrs	r23, 4
    2d22:	03 c0       	rjmp	.+6      	; 0x2d2a <dtoa_prf+0x206>
    2d24:	01 33       	cpi	r16, 0x31	; 49
    2d26:	09 f4       	brne	.+2      	; 0x2d2a <dtoa_prf+0x206>
    2d28:	fa 94       	dec	r15
    2d2a:	1f 14       	cp	r1, r15
    2d2c:	2c f4       	brge	.+10     	; 0x2d38 <dtoa_prf+0x214>
    2d2e:	2f 2d       	mov	r18, r15
    2d30:	29 30       	cpi	r18, 0x09	; 9
    2d32:	18 f0       	brcs	.+6      	; 0x2d3a <dtoa_prf+0x216>
    2d34:	28 e0       	ldi	r18, 0x08	; 8
    2d36:	01 c0       	rjmp	.+2      	; 0x2d3a <dtoa_prf+0x216>
    2d38:	21 e0       	ldi	r18, 0x01	; 1
    2d3a:	68 2f       	mov	r22, r24
    2d3c:	39 2f       	mov	r19, r25
    2d3e:	97 ff       	sbrs	r25, 7
    2d40:	02 c0       	rjmp	.+4      	; 0x2d46 <dtoa_prf+0x222>
    2d42:	60 e0       	ldi	r22, 0x00	; 0
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	46 2f       	mov	r20, r22
    2d48:	53 2f       	mov	r21, r19
    2d4a:	61 2c       	mov	r6, r1
    2d4c:	71 2c       	mov	r7, r1
    2d4e:	3e e2       	ldi	r19, 0x2E	; 46
    2d50:	93 2e       	mov	r9, r19
    2d52:	bc 01       	movw	r22, r24
    2d54:	62 1b       	sub	r22, r18
    2d56:	71 09       	sbc	r23, r1
    2d58:	9b 01       	movw	r18, r22
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	a4 1b       	sub	r26, r20
    2d5e:	b5 0b       	sbc	r27, r21
    2d60:	e1 e0       	ldi	r30, 0x01	; 1
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	ec 0f       	add	r30, r28
    2d66:	fd 1f       	adc	r31, r29
    2d68:	ae 0f       	add	r26, r30
    2d6a:	bf 1f       	adc	r27, r31
    2d6c:	e1 2e       	mov	r14, r17
    2d6e:	f1 2c       	mov	r15, r1
    2d70:	f1 94       	neg	r15
    2d72:	e1 94       	neg	r14
    2d74:	f1 08       	sbc	r15, r1
    2d76:	4f 3f       	cpi	r20, 0xFF	; 255
    2d78:	ff ef       	ldi	r31, 0xFF	; 255
    2d7a:	5f 07       	cpc	r21, r31
    2d7c:	31 f4       	brne	.+12     	; 0x2d8a <dtoa_prf+0x266>
    2d7e:	f6 01       	movw	r30, r12
    2d80:	90 82       	st	Z, r9
    2d82:	b6 01       	movw	r22, r12
    2d84:	6f 5f       	subi	r22, 0xFF	; 255
    2d86:	7f 4f       	sbci	r23, 0xFF	; 255
    2d88:	6b 01       	movw	r12, r22
    2d8a:	84 17       	cp	r24, r20
    2d8c:	95 07       	cpc	r25, r21
    2d8e:	4c f0       	brlt	.+18     	; 0x2da2 <dtoa_prf+0x27e>
    2d90:	24 17       	cp	r18, r20
    2d92:	35 07       	cpc	r19, r21
    2d94:	34 f4       	brge	.+12     	; 0x2da2 <dtoa_prf+0x27e>
    2d96:	bd 01       	movw	r22, r26
    2d98:	66 0d       	add	r22, r6
    2d9a:	77 1d       	adc	r23, r7
    2d9c:	fb 01       	movw	r30, r22
    2d9e:	11 81       	ldd	r17, Z+1	; 0x01
    2da0:	01 c0       	rjmp	.+2      	; 0x2da4 <dtoa_prf+0x280>
    2da2:	10 e3       	ldi	r17, 0x30	; 48
    2da4:	41 50       	subi	r20, 0x01	; 1
    2da6:	51 09       	sbc	r21, r1
    2da8:	ff ef       	ldi	r31, 0xFF	; 255
    2daa:	6f 1a       	sub	r6, r31
    2dac:	7f 0a       	sbc	r7, r31
    2dae:	b6 01       	movw	r22, r12
    2db0:	6f 5f       	subi	r22, 0xFF	; 255
    2db2:	7f 4f       	sbci	r23, 0xFF	; 255
    2db4:	4e 15       	cp	r20, r14
    2db6:	5f 05       	cpc	r21, r15
    2db8:	24 f0       	brlt	.+8      	; 0x2dc2 <dtoa_prf+0x29e>
    2dba:	f6 01       	movw	r30, r12
    2dbc:	10 83       	st	Z, r17
    2dbe:	6b 01       	movw	r12, r22
    2dc0:	da cf       	rjmp	.-76     	; 0x2d76 <dtoa_prf+0x252>
    2dc2:	48 17       	cp	r20, r24
    2dc4:	59 07       	cpc	r21, r25
    2dc6:	39 f4       	brne	.+14     	; 0x2dd6 <dtoa_prf+0x2b2>
    2dc8:	06 33       	cpi	r16, 0x36	; 54
    2dca:	20 f4       	brcc	.+8      	; 0x2dd4 <dtoa_prf+0x2b0>
    2dcc:	05 33       	cpi	r16, 0x35	; 53
    2dce:	19 f4       	brne	.+6      	; 0x2dd6 <dtoa_prf+0x2b2>
    2dd0:	a1 10       	cpse	r10, r1
    2dd2:	01 c0       	rjmp	.+2      	; 0x2dd6 <dtoa_prf+0x2b2>
    2dd4:	11 e3       	ldi	r17, 0x31	; 49
    2dd6:	f6 01       	movw	r30, r12
    2dd8:	10 83       	st	Z, r17
    2dda:	fb 01       	movw	r30, r22
    2ddc:	8b 2d       	mov	r24, r11
    2dde:	90 e2       	ldi	r25, 0x20	; 32
    2de0:	88 23       	and	r24, r24
    2de2:	19 f0       	breq	.+6      	; 0x2dea <dtoa_prf+0x2c6>
    2de4:	91 93       	st	Z+, r25
    2de6:	81 50       	subi	r24, 0x01	; 1
    2de8:	fb cf       	rjmp	.-10     	; 0x2de0 <dtoa_prf+0x2bc>
    2dea:	fb 01       	movw	r30, r22
    2dec:	eb 0d       	add	r30, r11
    2dee:	f1 1d       	adc	r31, r1
    2df0:	10 82       	st	Z, r1
    2df2:	80 e0       	ldi	r24, 0x00	; 0
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	29 96       	adiw	r28, 0x09	; 9
    2df8:	0f b6       	in	r0, 0x3f	; 63
    2dfa:	f8 94       	cli
    2dfc:	de bf       	out	0x3e, r29	; 62
    2dfe:	0f be       	out	0x3f, r0	; 63
    2e00:	cd bf       	out	0x3d, r28	; 61
    2e02:	df 91       	pop	r29
    2e04:	cf 91       	pop	r28
    2e06:	1f 91       	pop	r17
    2e08:	0f 91       	pop	r16
    2e0a:	ff 90       	pop	r15
    2e0c:	ef 90       	pop	r14
    2e0e:	df 90       	pop	r13
    2e10:	cf 90       	pop	r12
    2e12:	bf 90       	pop	r11
    2e14:	af 90       	pop	r10
    2e16:	9f 90       	pop	r9
    2e18:	7f 90       	pop	r7
    2e1a:	6f 90       	pop	r6
    2e1c:	08 95       	ret

00002e1e <__ftoa_engine>:
    2e1e:	28 30       	cpi	r18, 0x08	; 8
    2e20:	08 f0       	brcs	.+2      	; 0x2e24 <__ftoa_engine+0x6>
    2e22:	27 e0       	ldi	r18, 0x07	; 7
    2e24:	33 27       	eor	r19, r19
    2e26:	da 01       	movw	r26, r20
    2e28:	99 0f       	add	r25, r25
    2e2a:	31 1d       	adc	r19, r1
    2e2c:	87 fd       	sbrc	r24, 7
    2e2e:	91 60       	ori	r25, 0x01	; 1
    2e30:	00 96       	adiw	r24, 0x00	; 0
    2e32:	61 05       	cpc	r22, r1
    2e34:	71 05       	cpc	r23, r1
    2e36:	39 f4       	brne	.+14     	; 0x2e46 <__ftoa_engine+0x28>
    2e38:	32 60       	ori	r19, 0x02	; 2
    2e3a:	2e 5f       	subi	r18, 0xFE	; 254
    2e3c:	3d 93       	st	X+, r19
    2e3e:	30 e3       	ldi	r19, 0x30	; 48
    2e40:	2a 95       	dec	r18
    2e42:	e1 f7       	brne	.-8      	; 0x2e3c <__ftoa_engine+0x1e>
    2e44:	08 95       	ret
    2e46:	9f 3f       	cpi	r25, 0xFF	; 255
    2e48:	30 f0       	brcs	.+12     	; 0x2e56 <__ftoa_engine+0x38>
    2e4a:	80 38       	cpi	r24, 0x80	; 128
    2e4c:	71 05       	cpc	r23, r1
    2e4e:	61 05       	cpc	r22, r1
    2e50:	09 f0       	breq	.+2      	; 0x2e54 <__ftoa_engine+0x36>
    2e52:	3c 5f       	subi	r19, 0xFC	; 252
    2e54:	3c 5f       	subi	r19, 0xFC	; 252
    2e56:	3d 93       	st	X+, r19
    2e58:	91 30       	cpi	r25, 0x01	; 1
    2e5a:	08 f0       	brcs	.+2      	; 0x2e5e <__ftoa_engine+0x40>
    2e5c:	80 68       	ori	r24, 0x80	; 128
    2e5e:	91 1d       	adc	r25, r1
    2e60:	df 93       	push	r29
    2e62:	cf 93       	push	r28
    2e64:	1f 93       	push	r17
    2e66:	0f 93       	push	r16
    2e68:	ff 92       	push	r15
    2e6a:	ef 92       	push	r14
    2e6c:	19 2f       	mov	r17, r25
    2e6e:	98 7f       	andi	r25, 0xF8	; 248
    2e70:	96 95       	lsr	r25
    2e72:	e9 2f       	mov	r30, r25
    2e74:	96 95       	lsr	r25
    2e76:	96 95       	lsr	r25
    2e78:	e9 0f       	add	r30, r25
    2e7a:	ff 27       	eor	r31, r31
    2e7c:	e4 5b       	subi	r30, 0xB4	; 180
    2e7e:	fd 4f       	sbci	r31, 0xFD	; 253
    2e80:	99 27       	eor	r25, r25
    2e82:	33 27       	eor	r19, r19
    2e84:	ee 24       	eor	r14, r14
    2e86:	ff 24       	eor	r15, r15
    2e88:	a7 01       	movw	r20, r14
    2e8a:	e7 01       	movw	r28, r14
    2e8c:	05 90       	lpm	r0, Z+
    2e8e:	08 94       	sec
    2e90:	07 94       	ror	r0
    2e92:	28 f4       	brcc	.+10     	; 0x2e9e <__ftoa_engine+0x80>
    2e94:	36 0f       	add	r19, r22
    2e96:	e7 1e       	adc	r14, r23
    2e98:	f8 1e       	adc	r15, r24
    2e9a:	49 1f       	adc	r20, r25
    2e9c:	51 1d       	adc	r21, r1
    2e9e:	66 0f       	add	r22, r22
    2ea0:	77 1f       	adc	r23, r23
    2ea2:	88 1f       	adc	r24, r24
    2ea4:	99 1f       	adc	r25, r25
    2ea6:	06 94       	lsr	r0
    2ea8:	a1 f7       	brne	.-24     	; 0x2e92 <__ftoa_engine+0x74>
    2eaa:	05 90       	lpm	r0, Z+
    2eac:	07 94       	ror	r0
    2eae:	28 f4       	brcc	.+10     	; 0x2eba <__ftoa_engine+0x9c>
    2eb0:	e7 0e       	add	r14, r23
    2eb2:	f8 1e       	adc	r15, r24
    2eb4:	49 1f       	adc	r20, r25
    2eb6:	56 1f       	adc	r21, r22
    2eb8:	c1 1d       	adc	r28, r1
    2eba:	77 0f       	add	r23, r23
    2ebc:	88 1f       	adc	r24, r24
    2ebe:	99 1f       	adc	r25, r25
    2ec0:	66 1f       	adc	r22, r22
    2ec2:	06 94       	lsr	r0
    2ec4:	a1 f7       	brne	.-24     	; 0x2eae <__ftoa_engine+0x90>
    2ec6:	05 90       	lpm	r0, Z+
    2ec8:	07 94       	ror	r0
    2eca:	28 f4       	brcc	.+10     	; 0x2ed6 <__ftoa_engine+0xb8>
    2ecc:	f8 0e       	add	r15, r24
    2ece:	49 1f       	adc	r20, r25
    2ed0:	56 1f       	adc	r21, r22
    2ed2:	c7 1f       	adc	r28, r23
    2ed4:	d1 1d       	adc	r29, r1
    2ed6:	88 0f       	add	r24, r24
    2ed8:	99 1f       	adc	r25, r25
    2eda:	66 1f       	adc	r22, r22
    2edc:	77 1f       	adc	r23, r23
    2ede:	06 94       	lsr	r0
    2ee0:	a1 f7       	brne	.-24     	; 0x2eca <__ftoa_engine+0xac>
    2ee2:	05 90       	lpm	r0, Z+
    2ee4:	07 94       	ror	r0
    2ee6:	20 f4       	brcc	.+8      	; 0x2ef0 <__ftoa_engine+0xd2>
    2ee8:	49 0f       	add	r20, r25
    2eea:	56 1f       	adc	r21, r22
    2eec:	c7 1f       	adc	r28, r23
    2eee:	d8 1f       	adc	r29, r24
    2ef0:	99 0f       	add	r25, r25
    2ef2:	66 1f       	adc	r22, r22
    2ef4:	77 1f       	adc	r23, r23
    2ef6:	88 1f       	adc	r24, r24
    2ef8:	06 94       	lsr	r0
    2efa:	a9 f7       	brne	.-22     	; 0x2ee6 <__ftoa_engine+0xc8>
    2efc:	84 91       	lpm	r24, Z
    2efe:	10 95       	com	r17
    2f00:	17 70       	andi	r17, 0x07	; 7
    2f02:	41 f0       	breq	.+16     	; 0x2f14 <__ftoa_engine+0xf6>
    2f04:	d6 95       	lsr	r29
    2f06:	c7 95       	ror	r28
    2f08:	57 95       	ror	r21
    2f0a:	47 95       	ror	r20
    2f0c:	f7 94       	ror	r15
    2f0e:	e7 94       	ror	r14
    2f10:	1a 95       	dec	r17
    2f12:	c1 f7       	brne	.-16     	; 0x2f04 <__ftoa_engine+0xe6>
    2f14:	e2 ef       	ldi	r30, 0xF2	; 242
    2f16:	f1 e0       	ldi	r31, 0x01	; 1
    2f18:	68 94       	set
    2f1a:	15 90       	lpm	r1, Z+
    2f1c:	15 91       	lpm	r17, Z+
    2f1e:	35 91       	lpm	r19, Z+
    2f20:	65 91       	lpm	r22, Z+
    2f22:	95 91       	lpm	r25, Z+
    2f24:	05 90       	lpm	r0, Z+
    2f26:	7f e2       	ldi	r23, 0x2F	; 47
    2f28:	73 95       	inc	r23
    2f2a:	e1 18       	sub	r14, r1
    2f2c:	f1 0a       	sbc	r15, r17
    2f2e:	43 0b       	sbc	r20, r19
    2f30:	56 0b       	sbc	r21, r22
    2f32:	c9 0b       	sbc	r28, r25
    2f34:	d0 09       	sbc	r29, r0
    2f36:	c0 f7       	brcc	.-16     	; 0x2f28 <__ftoa_engine+0x10a>
    2f38:	e1 0c       	add	r14, r1
    2f3a:	f1 1e       	adc	r15, r17
    2f3c:	43 1f       	adc	r20, r19
    2f3e:	56 1f       	adc	r21, r22
    2f40:	c9 1f       	adc	r28, r25
    2f42:	d0 1d       	adc	r29, r0
    2f44:	7e f4       	brtc	.+30     	; 0x2f64 <__ftoa_engine+0x146>
    2f46:	70 33       	cpi	r23, 0x30	; 48
    2f48:	11 f4       	brne	.+4      	; 0x2f4e <__ftoa_engine+0x130>
    2f4a:	8a 95       	dec	r24
    2f4c:	e6 cf       	rjmp	.-52     	; 0x2f1a <__ftoa_engine+0xfc>
    2f4e:	e8 94       	clt
    2f50:	01 50       	subi	r16, 0x01	; 1
    2f52:	30 f0       	brcs	.+12     	; 0x2f60 <__ftoa_engine+0x142>
    2f54:	08 0f       	add	r16, r24
    2f56:	0a f4       	brpl	.+2      	; 0x2f5a <__ftoa_engine+0x13c>
    2f58:	00 27       	eor	r16, r16
    2f5a:	02 17       	cp	r16, r18
    2f5c:	08 f4       	brcc	.+2      	; 0x2f60 <__ftoa_engine+0x142>
    2f5e:	20 2f       	mov	r18, r16
    2f60:	23 95       	inc	r18
    2f62:	02 2f       	mov	r16, r18
    2f64:	7a 33       	cpi	r23, 0x3A	; 58
    2f66:	28 f0       	brcs	.+10     	; 0x2f72 <__ftoa_engine+0x154>
    2f68:	79 e3       	ldi	r23, 0x39	; 57
    2f6a:	7d 93       	st	X+, r23
    2f6c:	2a 95       	dec	r18
    2f6e:	e9 f7       	brne	.-6      	; 0x2f6a <__ftoa_engine+0x14c>
    2f70:	10 c0       	rjmp	.+32     	; 0x2f92 <__ftoa_engine+0x174>
    2f72:	7d 93       	st	X+, r23
    2f74:	2a 95       	dec	r18
    2f76:	89 f6       	brne	.-94     	; 0x2f1a <__ftoa_engine+0xfc>
    2f78:	06 94       	lsr	r0
    2f7a:	97 95       	ror	r25
    2f7c:	67 95       	ror	r22
    2f7e:	37 95       	ror	r19
    2f80:	17 95       	ror	r17
    2f82:	17 94       	ror	r1
    2f84:	e1 18       	sub	r14, r1
    2f86:	f1 0a       	sbc	r15, r17
    2f88:	43 0b       	sbc	r20, r19
    2f8a:	56 0b       	sbc	r21, r22
    2f8c:	c9 0b       	sbc	r28, r25
    2f8e:	d0 09       	sbc	r29, r0
    2f90:	98 f0       	brcs	.+38     	; 0x2fb8 <__ftoa_engine+0x19a>
    2f92:	23 95       	inc	r18
    2f94:	7e 91       	ld	r23, -X
    2f96:	73 95       	inc	r23
    2f98:	7a 33       	cpi	r23, 0x3A	; 58
    2f9a:	08 f0       	brcs	.+2      	; 0x2f9e <__ftoa_engine+0x180>
    2f9c:	70 e3       	ldi	r23, 0x30	; 48
    2f9e:	7c 93       	st	X, r23
    2fa0:	20 13       	cpse	r18, r16
    2fa2:	b8 f7       	brcc	.-18     	; 0x2f92 <__ftoa_engine+0x174>
    2fa4:	7e 91       	ld	r23, -X
    2fa6:	70 61       	ori	r23, 0x10	; 16
    2fa8:	7d 93       	st	X+, r23
    2faa:	30 f0       	brcs	.+12     	; 0x2fb8 <__ftoa_engine+0x19a>
    2fac:	83 95       	inc	r24
    2fae:	71 e3       	ldi	r23, 0x31	; 49
    2fb0:	7d 93       	st	X+, r23
    2fb2:	70 e3       	ldi	r23, 0x30	; 48
    2fb4:	2a 95       	dec	r18
    2fb6:	e1 f7       	brne	.-8      	; 0x2fb0 <__ftoa_engine+0x192>
    2fb8:	11 24       	eor	r1, r1
    2fba:	ef 90       	pop	r14
    2fbc:	ff 90       	pop	r15
    2fbe:	0f 91       	pop	r16
    2fc0:	1f 91       	pop	r17
    2fc2:	cf 91       	pop	r28
    2fc4:	df 91       	pop	r29
    2fc6:	99 27       	eor	r25, r25
    2fc8:	87 fd       	sbrc	r24, 7
    2fca:	90 95       	com	r25
    2fcc:	08 95       	ret

00002fce <strrev>:
    2fce:	dc 01       	movw	r26, r24
    2fd0:	fc 01       	movw	r30, r24
    2fd2:	67 2f       	mov	r22, r23
    2fd4:	71 91       	ld	r23, Z+
    2fd6:	77 23       	and	r23, r23
    2fd8:	e1 f7       	brne	.-8      	; 0x2fd2 <strrev+0x4>
    2fda:	32 97       	sbiw	r30, 0x02	; 2
    2fdc:	04 c0       	rjmp	.+8      	; 0x2fe6 <strrev+0x18>
    2fde:	7c 91       	ld	r23, X
    2fe0:	6d 93       	st	X+, r22
    2fe2:	70 83       	st	Z, r23
    2fe4:	62 91       	ld	r22, -Z
    2fe6:	ae 17       	cp	r26, r30
    2fe8:	bf 07       	cpc	r27, r31
    2fea:	c8 f3       	brcs	.-14     	; 0x2fde <strrev+0x10>
    2fec:	08 95       	ret

00002fee <_exit>:
    2fee:	f8 94       	cli

00002ff0 <__stop_program>:
    2ff0:	ff cf       	rjmp	.-2      	; 0x2ff0 <__stop_program>
