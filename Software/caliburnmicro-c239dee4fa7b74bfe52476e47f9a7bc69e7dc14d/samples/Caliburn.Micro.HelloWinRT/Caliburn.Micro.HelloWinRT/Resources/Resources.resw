<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActionsExplanation.Text" xml:space="preserve">
    <value>The action binding conventions in Caliburn.Micro should be working as expected, the biggest change has been to use a third party library Windows.UI.Interactivity to replace the System.Windows.Interactivity framework available in other xaml platforms. Therefore there will may be some issues to resolve.

One of the other changes is that when parameters are resolved. Windows 8 is missing UpdateSourceTrigger or GetBindingExpression. So resolution of guard properties will not be responsive as other platforms.

To the right is a number of samples, the first is a method bound to action through the Name of the button. The second uses the Message.Attach property passing through a named parameter. The third uses the full syntax to wire a method to the DoubleTapped event to a method call.

Buttons in the AppBar work like another other button (unlike Windows Phone) and all standard conventions should apply.
</value>
  </data>
  <data name="BindingsExplanation.Text" xml:space="preserve">
    <value>The property binding conventions in Caliburn.Micro should be working as expected, there have been no changes in this area. Though some work may still be necessary to add default conventions for some of the new controls.

To the right is a sample of a ListBox named "Developers" by convention being bound to the collection Developers and the SelectedDeveloper property,  notice the changes in pluralisation.

Because we haven't specified an ItemTemplate for the ListBox Caliburn.Micro uses it's conventions to locate the user control DeveloperView for each list item.

Below the ListBox is a TextBlock bound to the SelectedDeveloper using the name "SelectedDeveloper_Name".

Controls in the AppBar work be bound like any other other control (unlike Windows Phone) and all standard conventions should apply.</value>
  </data>
  <data name="CoroutinesExplanation.Text" xml:space="preserve">
    <value>Thanks to the introduction of async / await into WinRT apps the use of coroutines to provide functionality around asynchronous methods will most likely be limited. However Caliburn.Micro IResult's do have one extra feature in that they provide access to the "ActionExectutionContext", this provides access to the View in a more controlled manner and means any view interaction code can be seperate from  the View Model.

Using these coroutines doesn't preclude you from using the async await keywords as the Execute method on a custom IResult can be an async method. The DelayResult class shows a good example of this.

The button to the left executes a coroutine that returns four results, the first changes the views visual state, the second causes an artificial delay. The third then changes the visual state and the four shows a message dialog.</value>
  </data>
  <data name="ExecuteExplanation.Text" xml:space="preserve">
    <value>Caliburn Micro has always had mechanisms for marshalling code back to the UI thread through the method "Execute.OnUIThread", this hasn't changed. This method is used in the binding base classes PropertyChangedBase and BindableCollection in order to make sure all property changed notifications are on the UI thread.

Note that in initial versions of the WinRT port this method was asynchronous (the method would return before the code was excuted). From this sample the method is synchronous, in order to better control the flow of execution.

The sample to the right side steps all binding and directly updates the view from a background thread. Removing the call to Execute.OnUIThread causes the application to crash.</value>
  </data>
  <data name="NavigationExplanation.Text" xml:space="preserve">
    <value>Navigation in View first applications works much the same as Windows Phone in Caliburn Micro, the interface INavigationService lets you move forward and back between pages. While the Frame control in WinRT only supports a single paramter Caliburn Micro packs multiple values into this single paramter and then on navigation expands them back to their target properties.

The button to the right uses the UriFor syntax to allow you to control more and one parameter to subsequent views.

The back button is bound through Action conventions to the method GoBack and property CanGoBack.</value>
  </data>
  <data name="SearchExplanation.Text" xml:space="preserve">
    <value>To enable your applicaiton for search you will need to set the Search declaration in your Package.appxmanifest file. Then override OnSearchActivated in App.xaml.cs, this will let you tell Caliburn Micro how to handle the Search activation, in this example app we use the root Frame control to navigate to this search view passing the query text as a parameter.</value>
  </data>
  <data name="SettingsExplanation.Text" xml:space="preserve">
    <value>Caliburn Micro now supports using your view models as part of the settings charm.  To start using this feature use the RegisterSettingsService on WinRTContainer. By default uses the UI library Callisto to display settings through the interface ISettingsWindowManager, if you wish to use a differing windowing manager then register an instance of this interface before calling RegisterSettingsService.

This method returns a settings service interface that you can use register commands with, the generic paramter is the type of the view model you wish to display. The second is the label of the settings section to be used in the charm.

Caliburn will then use it's default behavior to locate the view for your view model and display it as a settings flyout.</value>
  </data>
  <data name="SetupExplanation.Text" xml:space="preserve">
    <value>Unlike other versions of Caliburn Micro the WinRT version doesn't use a Bootstrapper, the non ranty reason for this is that Windows.UI.Xaml.Application exposes most of it's functionality through method overrides and not events. Therefore it makes sense to have a custom Application rather than forcing the developer to wire the application to the bootstrapper.

The functionality of this new CaliburnApplication is very similar to the previous Bootstrapper. Do expect some breaking changes regarding the functionality of handling the default view, launch arguments and types.

Caliburn Micro on its various platforms has usually supported either a View Model first or a View first approach, but not usually both at the same time. Typically Silverlight and WPF applications follow a View Model first approach, usually with a Shell View Model and using view model composition. Meanwhile Windows Phone applications due to having the navigation concept baked very close to the hardware (with the back button) typically follow a View first approach and expose a navigation service to move between pages.
Windows 8 apps sit somewhere in the middle, since there is no hardware back button we don’t have the same drive towards View first, however most apps follow a design where a root Frame control navigating between pages makes sense. However there is nothing stopping a developer using a View Model first approach and for certain apps and scenarios this makes sense. In fact I feel that fully featured apps will use both approaches.

This latest version of Caliburn Micro on Codeplex adds support for both approaches out of the box, a first for the library. This adds some breaking changes so I thought I’d write a bit more about them and how it affects your apps.

The initial versions of Caliburn Micro for WinRT did in my opinion a little too much around launch, while GetDefaultView works well for a first app it quickly becomes cumbersome when you want to launch different views based on launch arguments or when the app is activated for Search etc. Because of this the new version steps back and lets you override the appropriate methods in the Application and direct Caliburn Micro what to do. This hands back the control to you and should mean that framework gets out of your way when you need it to.

Here’s some examples of how you’d run through each scenario.

View First

This approach is what you’re used to if you’ve been using the WinRT version up until now, it’s fundamentally the same with a few minor changes in your App.xaml.cs. The first thing to note is that WinRTContainer.RegisterDefaultServices doesn’t register an instance of INavigationService as it wouldn’t make sense in View Model first scenarios. Instead we override a method named PrepareViewFirst that has a parameter of the root frame for the application (this is also accessible through the RootFrame property). We can then pass this to WinRTContainer.RegisterNavigationService, this creates the required FrameAdapter and registers it to the container as a navigation service. If you’re using a different container this is where you’d do the same with your own container.

Now instead of defining the default view we’ll override OnLaunched, this is the method called by Windows 8 on launch. Here we’ll call DisplayRootView with the type of the view we want our root frame to navigate to, in this case MenuView. This approach enables us to use things like the launch arguments and choose a different view to navigate to. Caliburn will ensure then ensure the Bootstrapper is initialized, set the root frame as the content of the window and navigate to the specified view.

View Model First

This approach takes advantage of the view model composition built into Caliburn Micro. It’s a little simpler to set up than view first. We don’t need to override PrepareViewFirst and in our OnLaunched we call DisplayRootViewFor with the view model as the type. Caliburn determines the view as per its conventions and sets that as the content of the window as well as binding the two together.

Things to watch out for

Due to the event model of a WinRT application there isn’t a suitable place to initialize the CaliburnApplication before OnLaunched, therefore both DisplayRootView and DisplayRootViewFor will Initialize the application (and ultimately call Configure). If you’re dependent upon the application already being configured then you can call Initialize yourself.

Combining both approaches

Any significantly sized WinRT application will most likely use a combination of the two approaches. While you may use View first to quickly enable the navigation metaphor with a back button you may compose individual views with child view models. Also some launch scenarios such as Share Target give you a small window to work in where View Model first will be simpler. The sample WinRT application shows this approach.
Overall these changes should give you increased functionality and better control of your application using Caliburn Micro.</value>
  </data>
  <data name="ShareExplanation.Text" xml:space="preserve">
    <value>To support being a source of data on your view models the first step is to register the sharing service on the WinRTContainer using RegisterSharingService. For each view model you wish to be a share source use the interface ISupportSharing. In a view first approach Caliburn Micro will query for the current view model. In a view model first scenario then the root (or shell) view model will be queried.</value>
  </data>
</root>